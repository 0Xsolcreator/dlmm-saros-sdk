{"version":3,"file":"dlmm-sdk.cjs.production.min.js","sources":["../types/config.ts","../constants/config.ts","../interface/liquidityBookAbstract.ts","../services/getProgram.ts","../utils/price.ts","../services/swap.ts","../types/services.ts","../utils/math.ts","../utils/index.ts","../services/core.ts"],"sourcesContent":["import { PublicKey } from \"@solana/web3.js\";\nimport { BN } from \"@coral-xyz/anchor\";\n\nexport enum MODE {\n  TESTNET = \"testnet\",\n  DEVNET = \"devnet\",\n  MAINNET = \"mainnet\",\n}\n\nexport type LiquidityBookConfig = {\n  baseFactor: number;\n  binStep: number;\n  activeId: number;\n  binArraySize: number;\n  binArrayIndex: number;\n  maxBasisPoints: number;\n  filterPeriod: number;\n  decayPeriod: number;\n  reductionFactor: number;\n  variableFeeControl: number;\n  maxVolatilityAccumulator: number;\n  protocolShare: number;\n  startTime: number;\n  rewardsDuration: number;\n  rewardsPerSecond: number;\n};\n\nexport interface ILiquidityBookConfig {\n  mode: MODE;\n  liquidBookConfig?: LiquidityBookConfig;\n  options?: {\n    rpcUrl: string;\n  };\n}\n\nexport type Bin = {\n  reserveX: number;\n  reserveY: number;\n  totalSupply: number;\n};\nexport type BinArray = {\n  bins: Bin[];\n  index: number;\n};\n\nexport type StaticFeeParameters = {\n  baseFactor: number;\n  filterPeriod: number;\n  decayPeriod: number;\n  reductionFactor: number;\n  variableFeeControl: number;\n  maxVolatilityAccumulator: number;\n  protocolShare: number;\n  space: Uint8Array;\n};\n\nexport type DynamicFeeParameters = {\n  timeLastUpdated: bigint;\n  volatilityAccumulator: number;\n  volatilityReference: number;\n  idReference: number;\n  space: Uint8Array;\n};\n\nexport type PairInfo = {\n  bump: Uint8Array;\n  liquidityBookConfig: PublicKey;\n  binStep: number;\n  binStepSeed: Uint8Array;\n  tokenMintX: PublicKey;\n  tokenMintY: PublicKey;\n  staticFeeParameters: StaticFeeParameters;\n  activeId: number;\n  dynamicFeeParameters: DynamicFeeParameters;\n  protocolFeesX: BN;\n  protocolFeesY: BN;\n  hook: PublicKey | null;\n};\n\nexport interface PoolMetadata {\n  poolAddress: string;\n  baseMint: string;\n  baseReserve: string;\n  quoteMint: string;\n  quoteReserve: string;\n  tradeFee: number;\n  extra: {\n    hook?: string;\n    tokenQuoteDecimal: number;\n    tokenBaseDecimal: number;\n  };\n}\n","import { MODE } from \"../types\";\n\nexport const CONFIG = {\n  [MODE.TESTNET]: {\n    rpc: \"https://api.testnet.solana.com\",\n  },\n  [MODE.DEVNET]: {\n    rpc: \"https://api.devnet.solana.com\",\n  },\n  [MODE.MAINNET]: {\n    rpc: \"https://api.mainnet-beta.solana.com\",\n  },\n};\n\nexport const BASE_FACTOR = 8_000;\nexport const BIN_STEP = 1;\nexport const ACTIVE_ID = 8388608;\nexport const BIN_ARRAY_SIZE = 256;\nexport const BIN_ARRAY_INDEX = ACTIVE_ID / BIN_ARRAY_SIZE - 1;\nexport const MAX_BASIS_POINTS = 10_000;\nexport const FILTER_PERIOD = 30;\nexport const DECAY_PERIOD = 600;\nexport const REDUCTION_FACTOR = 5_000;\nexport const VARIABLE_FEE_CONTROL = 40_000;\nexport const MAX_VOLATILITY_ACCUMULATOR = 350_000;\nexport const PROTOCOL_SHARE = 2000;\nexport const START_TIME = 1000;\nexport const REWARDS_DURATION = 24 * 3600;\nexport const REWARDS_PER_SECOND = Math.floor(100e9 / REWARDS_DURATION);\nexport const VARIABLE_FEE_PRECISION = 100_000_000_000;\nexport const SCALE_OFFSET = 64;\nexport const BASIS_POINT_MAX = 10_000;\nexport const ONE = 1 << SCALE_OFFSET;\nexport const PRECISION = 1_000_000_000;\n\nexport const UNIT_PRICE_DEFAULT = 1_000_000;\nexport const CCU_LIMIT = 400_000;\nexport const WRAP_SOL_ADDRESS = \"So11111111111111111111111111111111111111112\";\nexport const FIXED_LENGTH = 16;\n\nexport const BIN_STEP_CONFIGS = [\n  {\n    binStep: 1,\n    feeParameters: {\n      baseFactor: 10000,\n      filterPeriod: 10,\n      decayPeriod: 120,\n      reductionFactor: 5000,\n      variableFeeControl: 2000000,\n      maxVolatilityAccumulator: 100000,\n      protocolShare: 2000,\n      space: [0, 0],\n    },\n  },\n  {\n    binStep: 2,\n    feeParameters: {\n      baseFactor: 10000,\n      filterPeriod: 10,\n      decayPeriod: 120,\n      reductionFactor: 5000,\n      variableFeeControl: 500000,\n      maxVolatilityAccumulator: 250000,\n      protocolShare: 2000,\n      space: [0, 0],\n    },\n  },\n  {\n    binStep: 5,\n    feeParameters: {\n      baseFactor: 10000,\n      filterPeriod: 30,\n      decayPeriod: 600,\n      reductionFactor: 5000,\n      variableFeeControl: 120000,\n      maxVolatilityAccumulator: 300000,\n      protocolShare: 2000,\n      space: [0, 0],\n    },\n  },\n  {\n    binStep: 10,\n    feeParameters: {\n      baseFactor: 10000,\n      filterPeriod: 30,\n      decayPeriod: 600,\n      reductionFactor: 5000,\n      variableFeeControl: 40000,\n      maxVolatilityAccumulator: 350000,\n      protocolShare: 2000,\n      space: [0, 0],\n    },\n  },\n  {\n    binStep: 20,\n    feeParameters: {\n      baseFactor: 10000,\n      filterPeriod: 30,\n      decayPeriod: 600,\n      reductionFactor: 5000,\n      variableFeeControl: 20000,\n      maxVolatilityAccumulator: 350000,\n      protocolShare: 2000,\n      space: [0, 0],\n    },\n  },\n  {\n    binStep: 50,\n    feeParameters: {\n      baseFactor: 10000,\n      filterPeriod: 120,\n      decayPeriod: 1200,\n      reductionFactor: 5000,\n      variableFeeControl: 10000,\n      maxVolatilityAccumulator: 250000,\n      protocolShare: 2000,\n      space: [0, 0],\n    },\n  },\n  {\n    binStep: 100,\n    feeParameters: {\n      baseFactor: 10000,\n      filterPeriod: 300,\n      decayPeriod: 1200,\n      reductionFactor: 5000,\n      variableFeeControl: 7500,\n      maxVolatilityAccumulator: 150000,\n      protocolShare: 2000,\n      space: [0, 0],\n    },\n  },\n  {\n    binStep: 200,\n    feeParameters: {\n      baseFactor: 10000,\n      filterPeriod: 300,\n      decayPeriod: 1200,\n      reductionFactor: 5000,\n      variableFeeControl: 7500,\n      maxVolatilityAccumulator: 150000,\n      protocolShare: 2000,\n      space: [0, 0],\n    },\n  },\n  {\n    binStep: 250,\n    feeParameters: {\n      baseFactor: 20000,\n      filterPeriod: 300,\n      decayPeriod: 1200,\n      reductionFactor: 5000,\n      variableFeeControl: 7500,\n      maxVolatilityAccumulator: 150000,\n      protocolShare: 2000,\n      space: [0, 0],\n    },\n  },\n];\n","import { Connection } from \"@solana/web3.js\";\nimport { AnchorProvider, Idl, Program } from \"@coral-xyz/anchor\";\nimport { ILiquidityBookConfig } from \"../types\";\nimport { CONFIG } from \"../constants/config\";\nimport LiquidityBookIDL from \"../constants/idl/liquidity_book.json\";\nimport MdmaIDL from \"../constants/idl/mdma_hook.json\";\n\nexport abstract class LiquidityBookAbstract {\n  connection: Connection;\n\n  lbProgram!: Program<Idl>;\n  hooksProgram!: Program<Idl>;\n\n  constructor(config: ILiquidityBookConfig) {\n    // Initialize the services heref\n    this.connection = new Connection(\n      config.options?.rpcUrl || CONFIG[config.mode].rpc,\n      {\n        commitment: \"confirmed\",\n        httpHeaders: {\n          development: \"coin98\",\n        },\n      }\n    );\n\n    const provider = new AnchorProvider(\n      this.connection,\n      (window as any).solana,\n      AnchorProvider.defaultOptions()\n    );\n\n    this.lbProgram = new Program(LiquidityBookIDL as Idl, provider);\n    this.hooksProgram = new Program(MdmaIDL as Idl, provider);\n  }\n}\n","import { TOKEN_2022_PROGRAM_ID, TOKEN_PROGRAM_ID } from \"@solana/spl-token\";\nimport { Connection, PublicKey } from \"@solana/web3.js\";\n\nexport const getProgram = async (\n  address: PublicKey,\n  connection: Connection\n) => {\n  const account = await connection.getParsedAccountInfo(address);\n\n  const owner = account.value?.owner.toBase58();\n\n  const program =\n    owner === TOKEN_PROGRAM_ID.toBase58()\n      ? TOKEN_PROGRAM_ID\n      : TOKEN_2022_PROGRAM_ID;\n\n  return program;\n};\n","import { BASIS_POINT_MAX, ONE, SCALE_OFFSET } from '../constants/config'\n\nconst getBase = (binStep: number) => {\n  const quotient = binStep << SCALE_OFFSET\n  if (quotient < 0) return null\n\n  const basisPointMaxBigInt = BASIS_POINT_MAX\n\n  //@ts-ignore\n  if (basisPointMaxBigInt === 0) return null\n  const fraction = quotient / basisPointMaxBigInt\n\n  const oneBigInt = ONE\n  const result = oneBigInt + fraction\n\n  return result\n}\n\nexport const getPriceFromId = (\n  bin_step: number,\n  bin_id: number,\n  baseTokenDecimal: number,\n  quoteTokenDecimal: number\n) => {\n  const base = getBase(bin_step) as number\n  const exponent = bin_id - 8_388_608\n  const decimalPow = Math.pow(10, baseTokenDecimal - quoteTokenDecimal)\n\n  return Math.pow(base, exponent) * decimalPow\n}\n\nexport const getIdFromPrice = (\n  price: number,\n  binStep: number,\n  baseTokenDecimal: number,\n  quoteTokenDecimal: number\n): number => {\n  if (price <= 0) throw new Error('Giá phải lớn hơn 0')\n  if (binStep <= 0 || binStep > BASIS_POINT_MAX)\n    throw new Error('Bin step invalid')\n\n  const decimalPow = Math.pow(10, quoteTokenDecimal - baseTokenDecimal)\n\n  const base = 1 + binStep / BASIS_POINT_MAX\n  const exponent = Math.log(price * decimalPow) / Math.log(base)\n  const binId = Math.round(exponent + 8_388_608)\n\n  return binId\n}\n","import { BN, Idl, Program, utils } from \"@coral-xyz/anchor\";\nimport { Bin, BinArray } from \"../types\";\n\nimport { Connection, PublicKey } from \"@solana/web3.js\";\nimport {\n  BASIS_POINT_MAX,\n  BIN_ARRAY_SIZE,\n  PRECISION,\n  SCALE_OFFSET,\n  VARIABLE_FEE_PRECISION,\n} from \"../constants/config\";\nimport { getPriceFromId } from \"../utils/price\";\nimport {\n  GetBinArrayParams,\n  GetTokenOutputParams,\n  Pair,\n} from \"../types/services\";\n\nclass LBError extends Error {\n  static BinNotFound = new LBError(\"Bin not found\");\n  static BinArrayIndexMismatch = new LBError(\"Bin array index mismatch\");\n\n  constructor(message: string) {\n    super(message);\n    this.name = \"LBError\";\n  }\n}\n\nclass BinArrayRange {\n  private readonly bins: { [binId: number]: Bin };\n  constructor(\n    binArrayPrevious: BinArray,\n    binArrayCurrent: BinArray,\n    binArrayNext: BinArray\n  ) {\n    if (\n      binArrayCurrent.index !== binArrayPrevious.index + 1 ||\n      binArrayNext.index !== binArrayCurrent.index + 1\n    ) {\n      throw LBError.BinArrayIndexMismatch;\n    }\n\n    this.bins = {};\n\n    const addBins = (binArray: BinArray) => {\n      binArray.bins.forEach((bin, index) => {\n        const binId = binArray.index * BIN_ARRAY_SIZE + index;\n        this.bins[binId] = bin;\n      });\n    };\n\n    addBins(binArrayPrevious);\n    addBins(binArrayCurrent);\n    addBins(binArrayNext);\n  }\n\n  getBinMut(binId: number) {\n    const bin = this.bins[binId];\n    return bin;\n  }\n\n  getAllBins() {\n    return Object.values(this.bins);\n  }\n}\n\nexport class LBSwapService {\n  lbProgram!: Program<Idl>;\n  volatilityAccumulator: number;\n  volatilityReference: number;\n  timeLastUpdated: number;\n  referenceId: number;\n  connection: Connection;\n\n  constructor(lbProgram: Program<Idl>, connection: Connection) {\n    this.lbProgram = lbProgram;\n    this.connection = connection;\n    this.volatilityAccumulator = 0;\n    this.volatilityReference = 0;\n    this.referenceId = 0;\n    this.timeLastUpdated = 0;\n  }\n\n  static fromLbConfig(lbProgram: Program<Idl>, connection: Connection) {\n    return new LBSwapService(lbProgram, connection);\n  }\n\n  getBinArray(params: GetBinArrayParams) {\n    const { binArrayIndex, pair } = params;\n\n    const binArray = PublicKey.findProgramAddressSync(\n      [\n        Buffer.from(utils.bytes.utf8.encode(\"bin_array\")),\n        pair.toBuffer(),\n        new BN(binArrayIndex).toArrayLike(Buffer, \"le\", 4),\n      ],\n      this.lbProgram.programId\n    )[0];\n\n    return binArray;\n  }\n\n  public async calculateInOutAmount(params: GetTokenOutputParams) {\n    const { amount, swapForY, pair, isExactInput } = params;\n    try {\n       //@ts-ignore\n      const pairInfo: Pair = await this.lbProgram.account.pair.fetch(pair);\n      if (!pairInfo) throw new Error(\"Pair not found\");\n\n      const currentBinArrayIndex = Math.floor(\n        pairInfo.activeId / BIN_ARRAY_SIZE\n      );\n      const binArrayIndexes = [\n        currentBinArrayIndex - 1,\n        currentBinArrayIndex,\n        currentBinArrayIndex + 1,\n      ];\n      const binArrayAddresses = binArrayIndexes.map((idx) =>\n        this.getBinArray({\n          binArrayIndex: idx,\n          pair,\n        })\n      );\n\n      // Fetch bin arrays in batch, fallback to empty if not found\n      const binArrays: BinArray[] = await Promise.all(\n        binArrayAddresses.map((address, i) =>\n           //@ts-ignore\n          this.lbProgram.account.binArray.fetch(address).catch((error: any) => {\n            return { index: binArrayIndexes[i], bins: [] } as BinArray;\n          })\n        )\n      );\n\n      // Validate bin arrays and build range\n      const binRange = new BinArrayRange(\n        binArrays[0],\n        binArrays[1],\n        binArrays[2]\n      );\n      const totalSupply = binRange\n        .getAllBins()\n        .reduce((acc, cur) => acc.add(cur.totalSupply), new BN(0));\n      if (totalSupply.isZero()) {\n        return {\n          amountIn: BigInt(0),\n          amountOut: BigInt(0),\n        };\n      }\n\n      const amountAfterTransferFee = amount;\n\n      if (isExactInput) {\n        const amountOut = await this.calculateAmountOut(\n          amountAfterTransferFee,\n          binRange,\n          pairInfo,\n          swapForY\n        );\n\n        return {\n          amountIn: amount,\n          amountOut,\n        };\n      } else {\n        const amountIn = await this.calculateAmountIn(\n          amountAfterTransferFee,\n          binRange,\n          pairInfo,\n          swapForY\n        );\n\n        return {\n          amountIn,\n          amountOut: amountAfterTransferFee,\n        };\n      }\n    } catch (error) {\n      throw new Error(error as string);\n    }\n  }\n\n  /**\n   * @description Calculate the input amount for the swap. isExactInput = false\n   */\n  public async calculateAmountIn(\n    amount: bigint,\n    bins: BinArrayRange,\n    pairInfo: Pair,\n    swapForY: boolean\n  ) {\n    let amountIn = BigInt(0);\n    let totalProtocolFee = BigInt(0);\n    let amountOutLeft = amount;\n    let activeId = pairInfo.activeId;\n\n    await this.updateReferences(pairInfo, activeId);\n\n    while (amountOutLeft > BigInt(0)) {\n      this.updateVolatilityAccumulator(pairInfo, activeId);\n\n      const activeBin = bins.getBinMut(activeId);\n      if (!activeBin) {\n        break;\n      }\n\n      const fee = this.getTotalFee(pairInfo);\n\n      const {\n        amountInWithFees,\n        amountOut: amountOutOfBin,\n        protocolFeeAmount,\n      } = this.swapExactOutput({\n        binStep: pairInfo.binStep,\n        activeId,\n        amountOutLeft,\n        fee,\n        protocolShare: pairInfo.staticFeeParameters.protocolShare,\n        swapForY,\n        reserveX: activeBin.reserveX,\n        reserveY: activeBin.reserveY,\n      });\n\n      amountIn += amountInWithFees;\n      amountOutLeft -= amountOutOfBin;\n      totalProtocolFee += protocolFeeAmount;\n\n      if (!amountOutLeft) break;\n      activeId = this.moveActiveId(activeId, swapForY);\n    }\n\n    return amountIn;\n  }\n\n  /**\n   * @description Calculate the output amount for the swap. isExactInput = true\n   */\n  public async calculateAmountOut(\n    amount: bigint,\n    bins: BinArrayRange,\n    pairInfo: Pair,\n    swapForY: boolean\n  ) {\n    try {\n      let amountOut = BigInt(0);\n      let totalProtocolFee = BigInt(0);\n      let amountInLeft = amount;\n      let activeId = pairInfo.activeId;\n\n      await this.updateReferences(pairInfo, activeId);\n\n      while (amountInLeft > BigInt(0)) {\n        this.updateVolatilityAccumulator(pairInfo, activeId);\n\n        const activeBin = bins.getBinMut(activeId);\n        if (!activeBin) {\n          break;\n        }\n\n        const fee = this.getTotalFee(pairInfo);\n\n        const {\n          amountInWithFees,\n          amountOut: amountOutOfBin,\n          protocolFeeAmount,\n        } = this.swapExactInput({\n          binStep: pairInfo.binStep,\n          activeId,\n          amountInLeft,\n          fee,\n          protocolShare: pairInfo.staticFeeParameters.protocolShare,\n          swapForY,\n          reserveX: activeBin.reserveX,\n          reserveY: activeBin.reserveY,\n        });\n\n        amountOut += amountOutOfBin;\n        amountInLeft -= amountInWithFees;\n        totalProtocolFee += protocolFeeAmount;\n\n        if (!amountInLeft) break;\n        activeId = this.moveActiveId(activeId, swapForY);\n      }\n\n      return amountOut;\n    } catch (error) {\n      throw new Error(error as string);\n    }\n  }\n\n  public swapExactOutput(params: {\n    binStep: number;\n    activeId: number;\n    amountOutLeft: bigint;\n    fee: bigint;\n    protocolShare: number;\n    swapForY: boolean;\n    reserveX: BN;\n    reserveY: BN;\n  }) {\n    const {\n      binStep,\n      activeId,\n      amountOutLeft,\n      protocolShare,\n      swapForY,\n      reserveX,\n      reserveY,\n      fee,\n    } = params;\n    const protocolShareBigInt = BigInt(protocolShare);\n    const binReserveOut = swapForY ? reserveY : reserveX;\n\n    if (binReserveOut.isZero()) {\n      return {\n        amountInWithFees: BigInt(0),\n        amountOut: BigInt(0),\n        feeAmount: BigInt(0),\n        protocolFeeAmount: BigInt(0),\n      };\n    }\n\n    const binReserveOutBigInt = BigInt(binReserveOut.toString());\n    const amountOut =\n      amountOutLeft > binReserveOutBigInt ? binReserveOutBigInt : amountOutLeft;\n\n    /** @notice assume base token and quote token have the same decimals to get the price */\n    const price = getPriceFromId(binStep, activeId, 9, 9);\n    // Encode price as bigint with SCALE_OFFSET\n    const priceScaled = BigInt(\n      Math.round(Number(price) * Math.pow(2, SCALE_OFFSET))\n    );\n\n    const amountInWithoutFee = this.calcAmountInByPrice(\n      amountOut,\n      priceScaled,\n      SCALE_OFFSET,\n      swapForY,\n      \"up\"\n    );\n\n    const feeAmount = this.getFeeForAmount(amountInWithoutFee, fee);\n    const amountIn = amountInWithoutFee + feeAmount;\n    const protocolFeeAmount = this.getProtocolFee(\n      feeAmount,\n      protocolShareBigInt\n    );\n\n    return {\n      amountInWithFees: amountIn,\n      amountOut,\n      feeAmount,\n      protocolFeeAmount,\n    };\n  }\n\n  public swapExactInput(params: {\n    binStep: number;\n    activeId: number;\n    amountInLeft: bigint;\n    fee: bigint;\n    protocolShare: number;\n    swapForY: boolean;\n    reserveX: BN;\n    reserveY: BN;\n  }) {\n    const {\n      binStep,\n      activeId,\n      amountInLeft,\n      protocolShare,\n      swapForY,\n      reserveX,\n      reserveY,\n      fee,\n    } = params;\n    const protocolShareBigInt = BigInt(protocolShare);\n    const binReserveOut = swapForY ? reserveY : reserveX;\n\n    if (binReserveOut.isZero()) {\n      return {\n        amountInWithFees: BigInt(0),\n        amountOut: BigInt(0),\n        feeAmount: BigInt(0),\n        protocolFeeAmount: BigInt(0),\n      };\n    }\n\n    const binReserveOutBigInt = BigInt(binReserveOut.toString());\n\n    /** @notice assume base token and quote token have the same decimals to get the price */\n    const price = getPriceFromId(binStep, activeId, 9, 9);\n    // Encode price as bigint with SCALE_OFFSET\n    const priceScaled = BigInt(\n      Math.round(Number(price) * Math.pow(2, SCALE_OFFSET))\n    );\n\n    // Calculate maxAmountIn (input needed to take all output in bin, before fee)\n    let maxAmountIn = this.calcAmountInByPrice(\n      binReserveOutBigInt,\n      priceScaled,\n      SCALE_OFFSET,\n      swapForY,\n      \"up\"\n    );\n\n    // Add fee to get total input needed (ceil)\n    const maxFeeAmount = this.getFeeForAmount(maxAmountIn, fee);\n    maxAmountIn += maxFeeAmount;\n\n    let amountOut = BigInt(0);\n    let amountIn = BigInt(0);\n    let feeAmount = BigInt(0);\n\n    if (amountInLeft >= maxAmountIn) {\n      feeAmount = maxFeeAmount;\n      amountIn = maxAmountIn - feeAmount;\n      amountOut = binReserveOutBigInt;\n    } else {\n      feeAmount = this.getFeeAmount(amountInLeft, fee);\n      amountIn = amountInLeft - feeAmount;\n      amountOut = this.calcAmountOutByPrice(\n        amountIn,\n        priceScaled,\n        SCALE_OFFSET,\n        swapForY,\n        \"down\"\n      );\n      if (amountOut > binReserveOutBigInt) {\n        amountOut = binReserveOutBigInt;\n      }\n    }\n\n    const protocolFeeAmount =\n      protocolShare > BigInt(0)\n        ? this.getProtocolFee(feeAmount, protocolShareBigInt)\n        : BigInt(0);\n\n    return {\n      amountInWithFees: amountIn + feeAmount,\n      amountOut,\n      feeAmount,\n      protocolFeeAmount,\n    };\n  }\n\n  public async updateReferences(pairInfo: Pair, activeId: number) {\n    this.referenceId = pairInfo.dynamicFeeParameters.idReference;\n    this.timeLastUpdated =\n      pairInfo.dynamicFeeParameters.timeLastUpdated.toNumber();\n    this.volatilityReference =\n      pairInfo.dynamicFeeParameters.volatilityReference;\n\n    const slot = await this.connection.getSlot(); // Lấy slot hiện tại\n    const blockTimeStamp = await this.connection.getBlockTime(slot);\n\n    if (blockTimeStamp) {\n      const timeDelta = blockTimeStamp - this.timeLastUpdated;\n\n      if (timeDelta > pairInfo.staticFeeParameters.filterPeriod) {\n        this.referenceId = activeId;\n\n        if (timeDelta >= pairInfo.staticFeeParameters.decayPeriod) {\n          this.volatilityReference = 0;\n        } else {\n          return this.updateVolatilityReference(pairInfo);\n        }\n      }\n\n      this.timeLastUpdated = blockTimeStamp;\n    }\n\n    return this.updateVolatilityAccumulator(pairInfo, activeId);\n  }\n\n  public updateVolatilityReference(pairInfo: Pair) {\n    this.volatilityReference =\n      (pairInfo.dynamicFeeParameters.volatilityAccumulator *\n        pairInfo.staticFeeParameters.reductionFactor) /\n      10_000;\n  }\n\n  public updateVolatilityAccumulator(pairInfo: Pair, activeId: number) {\n    const deltaId = Math.abs(activeId - this.referenceId);\n    const volatilityAccumulator = deltaId * 10000 + this.volatilityReference;\n\n    const maxVolatilityAccumulator =\n      pairInfo.staticFeeParameters.maxVolatilityAccumulator;\n\n    if (volatilityAccumulator > maxVolatilityAccumulator) {\n      this.volatilityAccumulator = maxVolatilityAccumulator;\n    } else {\n      this.volatilityAccumulator = volatilityAccumulator;\n    }\n  }\n\n  public getVariableFee(pairInfo: Pair): bigint {\n    const variableFeeControl = BigInt(\n      pairInfo.staticFeeParameters.variableFeeControl\n    );\n    if (variableFeeControl > BigInt(0)) {\n      const prod = BigInt(\n        Math.floor(this.volatilityAccumulator * pairInfo.binStep)\n      );\n      const variableFee =\n        (prod * prod * variableFeeControl +\n          BigInt(VARIABLE_FEE_PRECISION) -\n          BigInt(1)) /\n        BigInt(VARIABLE_FEE_PRECISION);\n      return variableFee;\n    }\n    return variableFeeControl;\n  }\n\n  public getBaseFee(binStep: number, baseFactor: number): bigint {\n    return BigInt(binStep) * BigInt(baseFactor) * BigInt(10);\n  }\n\n  public getFeeForAmount(amount: bigint, fee: bigint) {\n    const denominator = BigInt(PRECISION) - fee;\n    const feeForAmount = (amount * fee + denominator - BigInt(1)) / denominator;\n\n    return feeForAmount;\n  }\n\n  public getFeeAmount(amount: bigint, fee: bigint) {\n    const feeAmount =\n      (amount * fee + BigInt(PRECISION) - BigInt(1)) / BigInt(PRECISION);\n\n    return feeAmount;\n  }\n\n  public getProtocolFee(fee: bigint, protocolShare: bigint) {\n    const protocolFee = (fee * protocolShare) / BigInt(BASIS_POINT_MAX);\n\n    return protocolFee;\n  }\n\n  public getTotalFee(pairInfo: Pair) {\n    return (\n      this.getBaseFee(\n        pairInfo.binStep,\n        pairInfo.staticFeeParameters.baseFactor\n      ) + this.getVariableFee(pairInfo)\n    );\n  }\n\n  public moveActiveId(pairId: number, swapForY: boolean) {\n    if (swapForY) {\n      return pairId - 1;\n    } else {\n      return pairId + 1;\n    }\n  }\n\n  /**\n   * Calculates the input amount required for a swap based on the desired output amount and price.\n   *\n   * @param amountOut - The desired output amount as a bigint.\n   * @param priceScaled - The scaled price as a bigint.\n   * @param scaleOffset - The scaling factor used for price adjustments.\n   * @param swapForY - A boolean indicating the direction of the swap\n   * @param rounding - Specifies the rounding mode\n   * @returns The calculated input amount as a bigint.\n   */\n  private calcAmountInByPrice(\n    amountOut: bigint,\n    priceScaled: bigint,\n    scaleOffset: number,\n    swapForY: boolean,\n    rounding: \"up\" | \"down\"\n  ): bigint {\n    if (swapForY) {\n      // amountIn = (amountOut << scaleOffset) / priceScaled\n      return rounding === \"up\"\n        ? ((amountOut << BigInt(scaleOffset)) + priceScaled - BigInt(1)) /\n            priceScaled\n        : (amountOut << BigInt(scaleOffset)) / priceScaled;\n    } else {\n      // amountIn = (amountOut * priceScaled) >> scaleOffset\n      return rounding === \"up\"\n        ? (amountOut * priceScaled +\n            (BigInt(1) << BigInt(scaleOffset)) -\n            BigInt(1)) >>\n            BigInt(scaleOffset)\n        : (amountOut * priceScaled) >> BigInt(scaleOffset);\n    }\n  }\n\n  /**\n   * Calculates the output amount based on the input amount, price, and scaling factors.\n   *\n   * @param amountIn - The input amount as a bigint.\n   * @param priceScaled - The scaled price as a bigint.\n   * @param scaleOffset - The scaling offset as a number, used to adjust the precision.\n   * @param swapForY - A boolean indicating the direction of the swap\n   * @param rounding - The rounding mode to apply when calculating the output amount\n   * @returns The calculated output amount as a bigint.\n   */\n  private calcAmountOutByPrice(\n    amountIn: bigint,\n    priceScaled: bigint,\n    scaleOffset: number,\n    swapForY: boolean,\n    rounding: \"up\" | \"down\"\n  ): bigint {\n    if (swapForY) {\n      // price = (Y / X) & swapForY => amountOut = amountIn * price\n      // amountOut = (amountIn * priceScaled) >> scaleOffset\n      return rounding === \"up\"\n        ? (amountIn * priceScaled +\n            (BigInt(1) << BigInt(scaleOffset)) -\n            BigInt(1)) >>\n            BigInt(scaleOffset)\n        : (amountIn * priceScaled) >> BigInt(scaleOffset);\n    } else {\n      // price = (X / Y) & !swapForY => amountOut = amountIn / price\n      // amountOut = (amountIn << scaleOffset) / priceScaled\n      return rounding === \"up\"\n        ? ((amountIn << BigInt(scaleOffset)) + priceScaled - BigInt(1)) /\n            priceScaled\n        : (amountIn << BigInt(scaleOffset)) / priceScaled;\n    }\n  }\n}\n","import { PublicKey, Transaction } from \"@solana/web3.js\";\nimport { BN } from \"@coral-xyz/anchor\";\n\nexport enum LiquidityShape {\n  Spot = \"Spot\",\n  Curve = \"Curve\",\n  BidAsk = \"BidAsk\",\n}\n\nexport enum RemoveLiquidityType {\n  Both = \"removeBoth\",\n  BaseToken = \"removeBaseToken\",\n  QuoteToken = \"removeQuoteToken\",\n}\n\nexport interface PositionInfo {\n  pair: string;\n  positionMint: string;\n  position: string;\n\n  liquidityShares: string[];\n  lowerBinId: number;\n  upperBinId: number;\n  space: number[];\n}\n\nexport interface GetBinArrayParams {\n  binArrayIndex: number;\n  pair: PublicKey;\n  payer?: PublicKey;\n  transaction?: Transaction;\n}\nexport interface SwapParams {\n  tokenMintX: PublicKey;\n  tokenMintY: PublicKey;\n  amount: bigint;\n  otherAmountOffset: bigint;\n  swapForY: boolean;\n  isExactInput: boolean;\n  pair: PublicKey;\n  hook: PublicKey;\n  payer: PublicKey;\n}\n\nexport interface GetTokenOutputParams {\n  pair: PublicKey;\n  tokenBase: PublicKey;\n  tokenQuote: PublicKey;\n  amount: bigint;\n  swapForY: boolean;\n  isExactInput: boolean;\n  tokenBaseDecimal: number;\n  tokenQuoteDecimal: number;\n  slippage: number;\n}\n\nexport interface GetTokenOutputResponse {\n  amountIn: bigint;\n  amountOut: bigint;\n  priceImpact: number;\n  amount: bigint;\n  otherAmountOffset: bigint;\n}\n\nexport interface Pair {\n  bump: number[];\n  liquidityBookConfig: string; // PublicKey as string\n  binStep: number;\n  binStepSeed: number[];\n  tokenMintX: string; // PublicKey as string\n  tokenMintY: string; // PublicKey as string\n  staticFeeParameters: {\n    baseFactor: number;\n    filterPeriod: number;\n    decayPeriod: number;\n    reductionFactor: number;\n    variableFeeControl: number;\n    maxVolatilityAccumulator: number;\n    protocolShare: number;\n    space: [number, number];\n  };\n  activeId: number;\n  dynamicFeeParameters: {\n    timeLastUpdated: BN; // hex string, likely timestamp\n    volatilityAccumulator: number;\n    volatilityReference: number;\n    idReference: number;\n    space: [number, number, number, number];\n  };\n  protocolFeesX: string; // likely bytes/hex\n  protocolFeesY: string; // likely bytes/hex\n  hook: null | string; // hook could be nullable\n}\n\ninterface Bin {\n  totalSupply: string;\n  reserveX: string;\n  reserveY: string;\n}\n\nexport interface BinArray {\n  index: number;\n  pair: PublicKey;\n  bins: Bin[];\n  space: number[];\n}\n\nexport interface CreatePairWithConfigParams {\n  tokenBase: {\n    decimal: number;\n    mintAddress: string;\n  };\n  tokenQuote: {\n    decimal: number;\n    mintAddress: string;\n  };\n  binStep: number;\n  ratePrice: number;\n  payer: PublicKey;\n}\n\nexport interface CreatePositionParams {\n  payer: PublicKey;\n  relativeBinIdLeft: number;\n  relativeBinIdRight: number;\n  pair: PublicKey;\n  binArrayIndex: number;\n  positionMint: PublicKey;\n  transaction: Transaction;\n}\n\nexport interface GetUserVaultInfoParams {\n  tokenAddress: PublicKey;\n  payer: PublicKey;\n  transaction?: Transaction;\n}\n\nexport interface Distribution {\n  relativeBinId: number;\n  distributionX: number;\n  distributionY: number;\n}\n\nexport interface AddLiquidityIntoPositionParams {\n  positionMint: PublicKey;\n  payer: PublicKey;\n  pair: PublicKey;\n  transaction: Transaction;\n  liquidityDistribution: Distribution[];\n  amountY: number;\n  amountX: number;\n  binArrayLower: PublicKey;\n  binArrayUpper: PublicKey;\n}\n\nexport interface AddLiquidityParams {\n  tokenX: {\n    address?: string;\n    decimals: number;\n    amount: number;\n    mintAddress: string;\n  };\n  tokenY: {\n    address?: string;\n    decimals: number;\n    amount: number;\n    mintAddress: string;\n  };\n\n  pair: string;\n  binRange: [number, number];\n  positions: PositionInfo[];\n  shape: LiquidityShape;\n  activeBin: number;\n  refId: number;\n  payer: PublicKey;\n}\n\nexport interface RemoveMultipleLiquidityParams {\n  maxPositionList: {\n    position: string;\n    start: number;\n    end: number;\n    positionMint: string;\n  }[];\n  payer: PublicKey;\n  type: \"removeBoth\" | \"removeBaseToken\" | \"removeQuoteToken\";\n  pair: PublicKey;\n  tokenMintX: PublicKey;\n  tokenMintY: PublicKey;\n  activeId: number;\n}\n\nexport interface RemoveMultipleLiquidityResponse {\n  txs: Transaction[];\n  txCreateAccount?: Transaction;\n  txCloseAccount?: Transaction;\n  positionClosed?: Record<string, string>[];\n}\n\nexport interface GetBinsArrayInfoParams {\n  binArrayIndex: number;\n  pair: PublicKey;\n  payer: PublicKey;\n}\n\nexport interface GetBinsReserveParams {\n  position: PublicKey;\n  pair: PublicKey;\n  payer: PublicKey;\n}\n\nexport interface GetBinsReserveResponse {\n  reserveX: string | number;\n  reserveY: string | number;\n  totalSupply: string | number;\n  liquidityShare: BN;\n  binId: number;\n  binPosistion: number;\n}\n\nexport interface ReserveParams {\n  binId: number;\n  reserveX: string | number;\n  reserveY: string | number;\n  liquidityShare: string | number;\n}\n\nexport interface UserPositionsParams {\n  payer: PublicKey;\n  pair: PublicKey;\n}\n","export const divRem = (numerator: number, denominator: number) => {\n  if (denominator === 0) {\n    throw new Error('Division by zero') // Xử lý lỗi chia cho 0\n  }\n\n  // Tính thương và phần dư\n  const quotient = numerator / denominator // Thương\n  const remainder = numerator % denominator // Phần dư\n\n  return [quotient, remainder] // Trả về mảng chứa thương và phần dư\n}\n\n/// (x * y) / denominator\nexport const mulDiv = (\n  x: number,\n  y: number,\n  denominator: number,\n  rounding: 'up' | 'down'\n) => {\n  const prod = x * y\n\n  if (rounding === 'up') {\n    return Math.floor((prod + denominator - 1) / denominator)\n  }\n\n  if (rounding === 'down') {\n    const [quotient] = divRem(prod, denominator)\n    return quotient\n  }\n}\n\nexport const mulShr = (\n  x: number,\n  y: number,\n  offset: number,\n  rounding: 'up' | 'down'\n) => {\n  const denominator = 1 << offset\n  return mulDiv(x, y, denominator, rounding)\n}\n\n// (x << offset) / y\nexport const shlDiv = (\n  x: number,\n  y: number,\n  offset: number,\n  rounding: 'up' | 'down'\n) => {\n  const scale = 1 << offset\n  return mulDiv(x, scale, y, rounding)\n}\n","import { Connection } from \"@solana/web3.js\";\nimport {\n  ACTIVE_ID,\n  BIN_ARRAY_SIZE,\n  FIXED_LENGTH,\n  MAX_BASIS_POINTS,\n  UNIT_PRICE_DEFAULT,\n} from \"../constants/config\";\nimport { LiquidityShape, PositionInfo } from \"../types/services\";\nimport { divRem } from \"./math\";\n\nexport interface Distribution {\n  relativeBinId: number;\n  distributionX: number;\n  distributionY: number;\n}\n\ninterface CreateLiquidityDistributionParams {\n  shape: LiquidityShape;\n  binRange: [number, number];\n}\n\nconst getCurveDistributionFromBinRange = (binRange: number[]) => {\n  const activeId = 0;\n\n  // init return values\n  let deltaIds: number[] = [],\n    _distributionX: number[] = [],\n    _distributionY: number[] = [];\n\n  // get sigma based on radius R\n  const getSigma = (_R: number) => {\n    const factor =\n      _R >= 20\n        ? 2.0\n        : _R >= 15\n        ? 1.8\n        : _R >= 10\n        ? 1.7\n        : _R >= 8\n        ? 1.6\n        : _R >= 6\n        ? 1.5\n        : _R >= 5\n        ? 1.4\n        : 1.0;\n    return _R / factor;\n  };\n\n  // range only includes B tokens (Y tokens)\n  if (binRange[1] < activeId) {\n    const negDelta = binRange[1] - binRange[0] + 1;\n    const negativeDeltaIds = Array.from(Array(activeId - binRange[0]).keys())\n      .reverse()\n      .slice(0, negDelta)\n      .map((el) => -1 * (el + 1));\n\n    deltaIds = [...negativeDeltaIds];\n    if (activeId === binRange[1]) {\n      deltaIds.push(0);\n    }\n\n    _distributionX = [...Array(deltaIds.length).fill(0)];\n\n    // radius is num of bins\n    const R = deltaIds.length - 1;\n    const sigma = getSigma(R);\n\n    // A = 1 / (sigma  * sqrt(2 * pi))\n    const A = 1 / (Math.sqrt(Math.PI * 2) * sigma);\n\n    // dist = 2 * A * exp(-0.5 * (r /sigma) ^ 2)\n    // r is distance from right-most bin\n    _distributionY = deltaIds.map(\n      (_, ind) => 2 * A * Math.exp(-0.5 * Math.pow((R - ind) / sigma, 2))\n    );\n  }\n\n  // range only includes A tokens (X tokens)\n  else if (activeId < binRange[0]) {\n    const posDelta = binRange[1] - binRange[0] + 1;\n    const positiveDeltaIds = Array.from(Array(binRange[1] - activeId).keys())\n      .reverse()\n      .slice(0, posDelta)\n      .reverse()\n      .map((el) => el + 1);\n\n    deltaIds = [...positiveDeltaIds];\n    if (activeId === binRange[0]) {\n      deltaIds.unshift(0);\n    }\n\n    _distributionY = [...Array(deltaIds.length).fill(0)];\n\n    // radius is num of bins\n    const R = deltaIds.length - 1;\n    const sigma = getSigma(R);\n\n    // A = 1 / (sigma  * sqrt(2 * pi))\n    const A = 1 / (Math.sqrt(Math.PI * 2) * sigma);\n\n    // dist = 2 * A * exp(-0.5 * (r /sigma) ^ 2)\n    // r is distance from left-most bin\n    _distributionX = deltaIds.map(\n      (_, ind) => 2 * A * Math.exp(-0.5 * Math.pow(ind / sigma, 2))\n    );\n  }\n\n  // range includes both X and Y tokens\n  else {\n    const negDelta = activeId - binRange[0];\n    const posDelta = binRange[1] - activeId;\n\n    const negativeDeltaIds = Array.from(Array(negDelta).keys())\n      .reverse()\n      .map((el) => -1 * (el + 1));\n    const positiveDeltaIds = Array.from(Array(posDelta).keys()).map(\n      (el) => el + 1\n    );\n    deltaIds = [...negativeDeltaIds, 0, ...positiveDeltaIds];\n\n    // radius is num of bins\n    const RX = positiveDeltaIds.length;\n    const sigmaX = getSigma(RX);\n\n    // A = 1 / (sigma  * sqrt(2 * pi))\n    const AX = RX === 0 ? 1 : 1 / (Math.sqrt(Math.PI * 2) * sigmaX);\n\n    // dist = 2 * A * exp(-0.5 * (r /sigma) ^ 2)\n    // r is distance from 0\n    _distributionX = [\n      ...Array(negDelta).fill(0),\n      AX,\n      ...positiveDeltaIds.map(\n        (_, ind) => 2 * AX * Math.exp(-0.5 * Math.pow((ind + 1) / sigmaX, 2))\n      ),\n    ];\n\n    // radius is num of bins\n    const RY = negativeDeltaIds.length;\n    const sigmaY = getSigma(RY);\n\n    // A = 1 / (sigma  * sqrt(2 * pi))\n    const AY = RY === 0 ? 1 : 1 / (Math.sqrt(Math.PI * 2) * sigmaY);\n\n    // dist = 2 * A * exp(-0.5 * (r /sigma) ^ 2)\n    // r is distance from 0\n    _distributionY = [\n      ...negativeDeltaIds.map(\n        (_, ind) => 2 * AY * Math.exp(-0.5 * Math.pow((RY - ind) / sigmaY, 2))\n      ),\n      AY,\n      ...Array(posDelta).fill(0),\n    ];\n  }\n\n  let liquidityDistributionX = _distributionX.map((i) =>\n    Math.floor(i * MAX_BASIS_POINTS)\n  );\n\n  let liquidityDistributionY = _distributionY.map((i) =>\n    Math.floor(i * MAX_BASIS_POINTS)\n  );\n\n  // check totalX and totalY with MAX_BASIS_POINTS\n  const totalX = liquidityDistributionX.reduce((acc, val) => acc + val, 0);\n\n  const totalY = liquidityDistributionY.reduce((acc, val) => acc + val, 0);\n\n  if (totalX > 0 && totalX !== MAX_BASIS_POINTS) {\n    const isOverflow = totalX > MAX_BASIS_POINTS;\n    const overPoint = Math.abs(totalX - MAX_BASIS_POINTS);\n    const numberBins = liquidityDistributionX.filter((i) => i > 0).length;\n    const [quotient, remainder] = divRem(overPoint, numberBins);\n\n    liquidityDistributionX = liquidityDistributionX.map((i) => {\n      if (i === 0) return i;\n      return isOverflow ? i - Math.floor(quotient) : i + Math.floor(quotient);\n    });\n    let remainderLeft = remainder;\n    if (remainder > 0) {\n      if (!isOverflow) {\n        liquidityDistributionX = liquidityDistributionX.map((i) => {\n          if (i === 0) return i;\n          if (remainderLeft > 0) {\n            remainderLeft--;\n            return i + 1;\n          }\n          return i;\n        });\n      } else {\n        const reverseLiquid = liquidityDistributionX.reverse().map((i) => {\n          if (i === 0) return i;\n          if (remainderLeft > 0) {\n            remainderLeft--;\n            return i - 1;\n          }\n          return i;\n        });\n        liquidityDistributionX = reverseLiquid.reverse();\n      }\n    }\n  }\n\n  if (totalY > 0 && totalY !== MAX_BASIS_POINTS) {\n    const isOverflow = totalY > MAX_BASIS_POINTS;\n    const overPoint = Math.abs(totalY - MAX_BASIS_POINTS);\n    const numberBins = liquidityDistributionY.filter((i) => i > 0).length;\n    const [quotient, remainder] = divRem(overPoint, numberBins);\n\n    liquidityDistributionY = liquidityDistributionY.map((i, idx) => {\n      if (i === 0) return i;\n      if (remainder > 0 && idx === numberBins - 1) {\n        return isOverflow\n          ? i - Math.floor(quotient) - remainder\n          : i + Math.floor(quotient) + remainder;\n      }\n      return isOverflow ? i - Math.floor(quotient) : i + Math.floor(quotient);\n    });\n  }\n\n  //return\n  const liquidityDistribution = deltaIds.map((i, idx) => {\n    return {\n      relativeBinId: i,\n      distributionX: liquidityDistributionX[idx],\n      distributionY: liquidityDistributionY[idx],\n    };\n  });\n  return liquidityDistribution;\n};\n\nexport function createUniformDistribution(\n  params: CreateLiquidityDistributionParams\n): Distribution[] {\n  const { shape, binRange } = params;\n\n  const [minBin, maxBin] = binRange;\n\n  if (minBin > maxBin) {\n    throw new Error(\"Invalid binRange: minBin must be <= maxBin\");\n  }\n\n  const relativeIds = Array.from(\n    { length: maxBin - minBin + 1 },\n    (_, i) => i + minBin\n  );\n\n  if (shape === LiquidityShape.Spot) {\n    const totalArrayLength = maxBin - minBin + 1;\n    const findActiveBinIndex = relativeIds.findIndex((item) => item === 0);\n\n    if (findActiveBinIndex === -1) {\n      const isOnlyX = minBin > 0;\n      const isOnlyY = maxBin < 0;\n      const distribution = MAX_BASIS_POINTS / totalArrayLength;\n\n      return relativeIds.map((x) => ({\n        relativeBinId: x,\n        distributionX: isOnlyX ? distribution : 0,\n        distributionY: isOnlyY ? distribution : 0,\n      }));\n    }\n\n    const totalYBin = Math.abs(minBin);\n    const totalXBin = maxBin;\n\n    const distributionX = Array.from({ length: totalArrayLength }, (_, i) => {\n      if (i < findActiveBinIndex) return 0;\n      const pricePerBin = Math.floor(\n        (2 * MAX_BASIS_POINTS) / (totalXBin * 2 + 1)\n      );\n      if (i === findActiveBinIndex)\n        return MAX_BASIS_POINTS - pricePerBin * totalXBin;\n      return pricePerBin;\n    });\n\n    const distributionY = Array.from({ length: totalArrayLength }, (_, i) => {\n      if (i > findActiveBinIndex) return 0;\n      const pricePerBin = Math.floor(\n        (2 * MAX_BASIS_POINTS) / (totalYBin * 2 + 1)\n      );\n      if (i === findActiveBinIndex)\n        return MAX_BASIS_POINTS - pricePerBin * totalYBin;\n      return pricePerBin;\n    });\n\n    return relativeIds.map((x, i) => ({\n      relativeBinId: x,\n      distributionX: distributionX[i],\n      distributionY: distributionY[i],\n    }));\n  }\n\n  if (shape === LiquidityShape.Curve) {\n    return getCurveDistributionFromBinRange(binRange);\n  }\n\n  if (shape === LiquidityShape.BidAsk) {\n    //MAX_BASIS_POINTS = 10000\n    //binRange = [min, max]\n    //activeid = 0\n\n    const activeBin = 0;\n\n    let _distributionY: number[] = [];\n\n    let _distributionX: number[] = [];\n\n    let deltaIds: number[] = [];\n\n    if (maxBin < activeBin) {\n      const negDelta = maxBin - minBin + 1;\n      const negativeDeltaIds = Array.from(Array(activeBin - minBin).keys())\n        .reverse()\n        .slice(0, negDelta)\n        .map((el) => -1 * (el + 1));\n\n      deltaIds = [...negativeDeltaIds];\n\n      _distributionX = [...Array(deltaIds.length).fill(0)];\n\n      // dist = 2/R^2 * r\n      const rSquare = Math.pow(deltaIds[0], 2);\n      _distributionY = deltaIds.map((i) => ((i - 1) * -2) / rSquare);\n    } else if (activeBin < minBin) {\n      const posDelta = binRange[1] - binRange[0] + 1;\n      const positiveDeltaIds = Array.from(Array(binRange[1] - activeBin).keys())\n        .reverse()\n        .slice(0, posDelta)\n        .reverse()\n        .map((el) => el + 1);\n\n      deltaIds = [...positiveDeltaIds];\n      // dist = 2/R^2 * i\n      const rSquare = Math.pow(deltaIds[deltaIds.length - 1], 2);\n      _distributionX = deltaIds.map((i) => ((i + 1) * 2) / rSquare);\n      _distributionY = [...Array(deltaIds.length).fill(0)];\n    } else {\n      const negDelta = activeBin - binRange[0];\n      const posDelta = binRange[1] - activeBin;\n\n      const negativeDeltaIds = Array.from(Array(negDelta).keys())\n        .reverse()\n        .map((el) => -1 * (el + 1));\n      const positiveDeltaIds = Array.from(Array(posDelta).keys()).map(\n        (el) => el + 1\n      );\n\n      deltaIds = [...negativeDeltaIds, 0, ...positiveDeltaIds];\n\n      // dist = 1/R^2 * i\n      const rSquareX =\n        positiveDeltaIds.length === 0\n          ? 1\n          : positiveDeltaIds.length === 1 && positiveDeltaIds[0] === 1\n          ? 3\n          : Math.pow(positiveDeltaIds[positiveDeltaIds.length - 1], 2);\n      _distributionX = [\n        ...Array(negDelta).fill(0),\n        1 / rSquareX,\n        ...positiveDeltaIds.map((i) => (i + 1) / rSquareX),\n      ];\n\n      // dist = 1/R^2 * i\n      const rSquareY =\n        negativeDeltaIds.length === 0\n          ? 1\n          : negativeDeltaIds[0] === -1\n          ? 3\n          : Math.pow(negativeDeltaIds[0], 2);\n      _distributionY = [\n        ...negativeDeltaIds.map((i) => (-1 * (i - 1)) / rSquareY),\n        1 / rSquareY,\n        ...Array(posDelta).fill(0),\n      ];\n    }\n\n    let liquidityDistributionX = _distributionX.map((i) => {\n      return Math.floor(i * MAX_BASIS_POINTS);\n    });\n\n    let liquidityDistributionY = _distributionY.map((i) => {\n      return Math.floor(i * MAX_BASIS_POINTS);\n    });\n\n    // check totalX and totalY with MAX_BASIS_POINTS\n    const totalX = liquidityDistributionX.reduce((acc, val) => acc + val, 0);\n\n    const totalY = liquidityDistributionY.reduce((acc, val) => acc + val, 0);\n\n    if (totalX > 0 && totalX !== MAX_BASIS_POINTS) {\n      const isOverflow = totalX > MAX_BASIS_POINTS;\n      const overPoint = Math.abs(totalX - MAX_BASIS_POINTS);\n      const numberBins = liquidityDistributionX.filter((i) => i > 0).length;\n      const [quotient, remainder] = divRem(overPoint, numberBins);\n\n      liquidityDistributionX = liquidityDistributionX.map((i) => {\n        if (i === 0) return i;\n        return isOverflow ? i - Math.floor(quotient) : i + Math.floor(quotient);\n      });\n      let remainderLeft = remainder;\n      if (remainder > 0) {\n        if (!isOverflow) {\n          liquidityDistributionX = liquidityDistributionX.map((i) => {\n            if (i === 0) return i;\n            if (remainderLeft > 0) {\n              remainderLeft--;\n              return i + 1;\n            }\n            return i;\n          });\n        } else {\n          const reverseLiquid = liquidityDistributionX.reverse().map((i) => {\n            if (i === 0) return i;\n            if (remainderLeft > 0) {\n              remainderLeft--;\n              return i - 1;\n            }\n            return i;\n          });\n          liquidityDistributionX = reverseLiquid.reverse();\n        }\n      }\n    }\n\n    if (totalY > 0 && totalY !== MAX_BASIS_POINTS) {\n      const isOverflow = totalY > MAX_BASIS_POINTS;\n      const overPoint = Math.abs(totalY - MAX_BASIS_POINTS);\n      const numberBins = liquidityDistributionY.filter((i) => i > 0).length;\n      const [quotient, remainder] = divRem(overPoint, numberBins);\n\n      liquidityDistributionY = liquidityDistributionY.map((i, idx) => {\n        if (i === 0) return i;\n        if (remainder > 0 && idx === 0) {\n          return isOverflow\n            ? i - Math.floor(quotient) - remainder\n            : i + Math.floor(quotient) + remainder;\n        }\n        return isOverflow ? i - Math.floor(quotient) : i + Math.floor(quotient);\n      });\n    }\n\n    const liquidityDistribution = deltaIds.map((i, idx) => {\n      return {\n        relativeBinId: i,\n        distributionX: liquidityDistributionX[idx],\n        distributionY: liquidityDistributionY[idx],\n      };\n    });\n\n    return liquidityDistribution;\n  }\n\n  throw new Error(`Unsupported liquidity shape: ${shape}`);\n}\n\nexport const getMaxPosition = (range: [number, number], activeId: number) => {\n  const leftRangeIndex = Math.floor(activeId / 16);\n  const rangeFromIndex = [\n    Math.floor((activeId + range[0]) / 16),\n    Math.floor((activeId + range[1]) / 16),\n  ];\n\n  const positions = Array.from(\n    { length: rangeFromIndex[1] - rangeFromIndex[0] + 1 },\n    (_, index) => {\n      return rangeFromIndex[0] + index - leftRangeIndex;\n    }\n  );\n\n  return positions;\n};\n\nexport const getMaxBinArray = (range: [number, number], activeId: number) => {\n  const arrayIndex = [activeId + range[0], activeId + range[1]];\n\n  const binIndex = [\n    Math.floor(arrayIndex[0] / BIN_ARRAY_SIZE),\n    Math.floor(arrayIndex[1] / BIN_ARRAY_SIZE),\n  ];\n\n  // check if binArrayLower, binArrayUpper is the same\n  if (binIndex[1] === binIndex[0]) {\n    binIndex[1] += 1;\n  }\n\n  const binArrayIndexLen = binIndex[1] - binIndex[0] - 1;\n  const binArrayList = Array.from({ length: binArrayIndexLen + 1 }, (_, i) => {\n    const index = binIndex[0] + i * 2;\n    return {\n      binArrayLowerIndex: index,\n      binArrayUpperIndex: index + 1,\n    };\n  });\n\n  return binArrayList;\n};\n\nexport const getBinRange = (index: number, activeId: number) => {\n  const firstBinId = Math.floor(activeId % 16);\n\n  const firstArray = [-firstBinId, -firstBinId + 16 - 1];\n  const range = [\n    firstArray[0] + index * FIXED_LENGTH,\n    firstArray[1] + index * FIXED_LENGTH,\n  ];\n  return {\n    range,\n    binLower: activeId + range[0],\n    binUpper: activeId + range[1] - 1,\n  };\n};\n\nexport const findPosition =\n  (index: number, activeBin = ACTIVE_ID) =>\n  (position: PositionInfo) => {\n    const { binLower, binUpper } = getBinRange(index, activeBin);\n\n    return position.lowerBinId <= binLower && position.upperBinId >= binUpper;\n  };\n\nexport const getGasPrice = async (connection: Connection): Promise<number> => {\n  const buffNum = 100;\n  try {\n    return await new Promise(async (resolve) => {\n      const timeout = setTimeout(() => {\n        resolve(UNIT_PRICE_DEFAULT * buffNum);\n      }, 2000);\n      const getPriority = await connection.getRecentPrioritizationFees();\n      const currentFee = getPriority\n        .filter((fee) => fee?.prioritizationFee > 0)\n        .map((fee) => fee?.prioritizationFee);\n      clearTimeout(timeout);\n      const unitPrice =\n        currentFee.length > 0\n          ? Math.max(...currentFee, UNIT_PRICE_DEFAULT)\n          : UNIT_PRICE_DEFAULT;\n      resolve(unitPrice * buffNum);\n    });\n  } catch {\n    return UNIT_PRICE_DEFAULT * buffNum;\n  }\n};","import {\n  ComputeBudgetProgram,\n  PublicKey,\n  SystemProgram,\n  Transaction,\n  TransactionMessage,\n} from \"@solana/web3.js\";\nimport { ILiquidityBookConfig, PoolMetadata } from \"../types\";\nimport {\n  BIN_ARRAY_INDEX,\n  BIN_ARRAY_SIZE,\n  CCU_LIMIT,\n  FIXED_LENGTH,\n  MAX_BASIS_POINTS,\n  PRECISION,\n  SCALE_OFFSET,\n  UNIT_PRICE_DEFAULT,\n  WRAP_SOL_ADDRESS,\n} from \"../constants/config\";\nimport { BN, utils } from \"@coral-xyz/anchor\";\nimport * as spl from \"@solana/spl-token\";\nimport { LiquidityBookAbstract } from \"../interface/liquidityBookAbstract\";\nimport { getProgram } from \"./getProgram\";\nimport { Buffer } from \"buffer\";\nimport cloneDeep from \"lodash/cloneDeep\";\nimport {\n  AddLiquidityIntoPositionParams,\n  CreatePairWithConfigParams,\n  CreatePositionParams,\n  GetBinArrayParams,\n  GetBinsArrayInfoParams,\n  GetBinsReserveParams,\n  GetBinsReserveResponse,\n  GetTokenOutputParams,\n  GetTokenOutputResponse,\n  GetUserVaultInfoParams,\n  Pair,\n  RemoveMultipleLiquidityParams,\n  RemoveMultipleLiquidityResponse,\n  ReserveParams,\n  SwapParams,\n  UserPositionsParams,\n} from \"../types/services\";\nimport { LBSwapService } from \"./swap\";\nimport bigDecimal from \"js-big-decimal\";\nimport { getIdFromPrice, getPriceFromId } from \"../utils/price\";\nimport { mulDiv, mulShr, shlDiv } from \"../utils/math\";\nimport LiquidityBookIDL from \"../constants/idl/liquidity_book.json\";\nimport { bs58 } from \"@coral-xyz/anchor/dist/cjs/utils/bytes\";\nimport { getGasPrice } from \"../utils\";\n\nexport class LiquidityBookServices extends LiquidityBookAbstract {\n  bufferGas?: number;\n  constructor(config: ILiquidityBookConfig) {\n    super(config);\n  }\n\n  get lbConfig() {\n    return new PublicKey(\"BqPmjcPbAwE7mH23BY8q8VUEN4LSjhLUv41W87GsXVn8\");\n  }\n\n  get hooksConfig() {\n    return new PublicKey(\"DgW5ARD9sU3W6SJqtyJSH3QPivxWt7EMvjER9hfFKWXF\");\n  }\n\n  public async getPairAccount(pair: PublicKey) {\n    //@ts-ignore\n    return await this.lbProgram.account.pair.fetch(pair);\n  }\n\n  public async getPositionAccount(position: PublicKey) {\n    //@ts-ignore\n    return await this.lbProgram.account.position.fetch(position);\n  }\n\n  async getBinArray(params: GetBinArrayParams) {\n    const { binArrayIndex, pair, payer, transaction } = params;\n\n    const binArray = PublicKey.findProgramAddressSync(\n      [\n        Buffer.from(utils.bytes.utf8.encode(\"bin_array\")),\n        pair.toBuffer(),\n        new BN(binArrayIndex).toArrayLike(Buffer, \"le\", 4),\n      ],\n      this.lbProgram.programId\n    )[0];\n\n    if (transaction && payer) {\n      const binArrayInfo = await this.connection.getAccountInfo(binArray);\n\n      if (!binArrayInfo) {\n        const initializebinArrayConfigTx = await this.lbProgram.methods\n          .initializeBinArray(binArrayIndex)\n          .accountsPartial({ pair: pair, binArray: binArray, user: payer })\n          .instruction();\n        transaction.add(initializebinArrayConfigTx);\n      }\n    }\n\n    return binArray;\n  }\n\n  public async getBinArrayInfo(params: GetBinsArrayInfoParams) {\n    const { binArrayIndex, pair, payer } = params;\n    let resultIndex = binArrayIndex;\n    let result = [];\n\n    const binArray = await this.getBinArray({\n      binArrayIndex,\n      pair,\n      payer,\n    });\n    //@ts-ignore\n    const { bins } = await this.lbProgram.account.binArray.fetch(binArray);\n    try {\n      const binArrayOther = await this.getBinArray({\n        binArrayIndex: binArrayIndex + 1,\n        pair,\n        payer,\n      });\n      //@ts-ignore\n      const res = await this.lbProgram.account.binArray.fetch(binArrayOther);\n\n      result = [...bins, ...res.bins];\n    } catch {\n      const binArrayOther = await this.getBinArray({\n        binArrayIndex: binArrayIndex - 1,\n        pair,\n        payer,\n      });\n      //@ts-ignore\n      const res = await this.lbProgram.account.binArray.fetch(binArrayOther);\n      result = [...res.bins, ...bins];\n      resultIndex -= 1;\n    }\n\n    return { bins: result, resultIndex };\n  }\n\n  public async getBinsReserveInformation(\n    params: GetBinsReserveParams\n  ): Promise<GetBinsReserveResponse[]> {\n    const { position, pair, payer } = params;\n    const positionInfo = await this.getPositionAccount(position);\n    const firstBinId = positionInfo.lowerBinId;\n    const binArrayIndex = Math.floor(firstBinId / BIN_ARRAY_SIZE);\n\n    const { bins, resultIndex } = await this.getBinArrayInfo({\n      binArrayIndex,\n      pair,\n      payer,\n    });\n\n    const firstBinIndex = resultIndex * BIN_ARRAY_SIZE;\n    const binIds = Array.from(\n      { length: positionInfo.upperBinId - firstBinId + 1 },\n      (_, i) => firstBinId - firstBinIndex + i\n    );\n\n    const reserveXY = binIds.map((binId: number, index: number) => {\n      const liquidityShare = positionInfo.liquidityShares[index].toString();\n      const activeBin = bins[binId];\n\n      if (activeBin) {\n        const totalReserveX = +BigInt(activeBin.reserveX).toString();\n\n        const totalReserveY = +BigInt(activeBin.reserveY).toString();\n\n        const totalSupply = +BigInt(activeBin.totalSupply).toString();\n\n        const reserveX =\n          Number(totalReserveX) > 0\n            ? mulDiv(\n                Number(liquidityShare),\n                Number(totalReserveX),\n                Number(totalSupply),\n                \"down\"\n              )\n            : 0;\n\n        const reserveY =\n          Number(totalReserveY) > 0\n            ? mulDiv(\n                Number(liquidityShare),\n                Number(totalReserveY),\n                Number(totalSupply),\n                \"down\"\n              )\n            : 0;\n\n        return {\n          reserveX: reserveX || 0,\n          reserveY: reserveY || 0,\n          totalSupply: +BigInt(activeBin.totalSupply).toString(),\n          binId: firstBinId + index,\n          binPosistion: binId,\n          liquidityShare: positionInfo.liquidityShares[index],\n        };\n      }\n      return {\n        reserveX: 0,\n        reserveY: 0,\n        totalSupply: \"0\",\n        binId: firstBinId + index,\n        binPosistion: binId,\n        liquidityShare: liquidityShare,\n      };\n    });\n\n    return reserveXY;\n  }\n\n  public async createPairWithConfig(params: CreatePairWithConfigParams) {\n    const { tokenBase, tokenQuote, binStep, ratePrice, payer } = params;\n\n    const tokenX = new PublicKey(tokenBase.mintAddress);\n    const tokenY = new PublicKey(tokenQuote.mintAddress);\n\n    const id = getIdFromPrice(\n      ratePrice || 1,\n      binStep,\n      tokenBase.decimal,\n      tokenQuote.decimal\n    );\n\n    let binArrayIndex = id / BIN_ARRAY_SIZE;\n\n    if (id % BIN_ARRAY_SIZE < BIN_ARRAY_SIZE / 2) {\n      binArrayIndex -= 1;\n    }\n\n    const tx = new Transaction();\n\n    const binStepConfig = PublicKey.findProgramAddressSync(\n      [\n        Buffer.from(utils.bytes.utf8.encode(\"bin_step_config\")),\n        this.lbConfig!.toBuffer(),\n        new Uint8Array([binStep]),\n      ],\n      this.lbProgram.programId\n    )[0];\n\n    const quoteAssetBadge = PublicKey.findProgramAddressSync(\n      [\n        Buffer.from(utils.bytes.utf8.encode(\"quote_asset_badge\")),\n        this.lbConfig!.toBuffer(),\n        tokenY.toBuffer(),\n      ],\n      this.lbProgram.programId\n    )[0];\n\n    const pair = PublicKey.findProgramAddressSync(\n      [\n        Buffer.from(utils.bytes.utf8.encode(\"pair\")),\n        this.lbConfig!.toBuffer(),\n        tokenX.toBuffer(),\n        tokenY.toBuffer(),\n        new Uint8Array([binStep]),\n      ],\n      this.lbProgram.programId\n    )[0];\n\n    const initializePairConfigTx = await this.lbProgram.methods\n      .initializePair(id)\n      .accountsPartial({\n        liquidityBookConfig: this.lbConfig!,\n        binStepConfig: binStepConfig,\n        quoteAssetBadge: quoteAssetBadge,\n        pair: pair,\n        tokenMintX: tokenX,\n        tokenMintY: tokenY,\n        user: payer,\n      })\n      .instruction();\n\n    tx.add(initializePairConfigTx);\n\n    const binArrayLower = PublicKey.findProgramAddressSync(\n      [\n        Buffer.from(utils.bytes.utf8.encode(\"bin_array\")),\n        pair.toBuffer(),\n        new BN(binArrayIndex).toArrayLike(Buffer, \"le\", 4),\n      ],\n      this.lbProgram.programId\n    )[0];\n\n    const binArrayUpper = PublicKey.findProgramAddressSync(\n      [\n        Buffer.from(utils.bytes.utf8.encode(\"bin_array\")),\n        pair.toBuffer(),\n        new BN(Number(binArrayIndex) + 1).toArrayLike(Buffer, \"le\", 4),\n      ],\n      this.lbProgram.programId\n    )[0];\n\n    const initializeBinArrayLowerConfigTx = await this.lbProgram.methods\n      .initializeBinArray(binArrayIndex)\n      .accountsPartial({ pair: pair, binArray: binArrayLower, user: payer })\n      .instruction();\n\n    tx.add(initializeBinArrayLowerConfigTx);\n\n    const initializeBinArrayUpperConfigTx = await this.lbProgram.methods\n      .initializeBinArray(new BN(binArrayIndex + 1))\n      .accountsPartial({ pair: pair, binArray: binArrayUpper, user: payer })\n      .instruction();\n\n    tx.add(initializeBinArrayUpperConfigTx);\n\n    return {\n      tx,\n      pair: pair.toString(),\n      binArrayLower: binArrayLower.toString(),\n      binArrayUpper: binArrayUpper.toString(),\n      hooksConfig: this.hooksConfig.toString(),\n      activeBin: Number(id),\n    };\n  }\n\n  async createPosition(params: CreatePositionParams) {\n    const {\n      payer,\n      relativeBinIdLeft,\n      relativeBinIdRight,\n      pair,\n      binArrayIndex,\n      positionMint,\n      transaction,\n    } = params;\n\n    const position = PublicKey.findProgramAddressSync(\n      [\n        Buffer.from(utils.bytes.utf8.encode(\"position\")),\n        positionMint.toBuffer(),\n      ],\n      this.lbProgram.programId\n    )[0];\n\n    const positionVault = spl.getAssociatedTokenAddressSync(\n      positionMint,\n      payer,\n      true,\n      spl.TOKEN_2022_PROGRAM_ID\n    );\n\n    await this.getBinArray({\n      binArrayIndex,\n      pair,\n      payer,\n    });\n\n    await this.getBinArray({\n      binArrayIndex: binArrayIndex + 1,\n      pair,\n      payer,\n    });\n\n    const initializePositionTx = await this.lbProgram.methods\n      .createPosition(new BN(relativeBinIdLeft), new BN(relativeBinIdRight))\n      .accountsPartial({\n        pair,\n        position: position,\n        positionMint: positionMint,\n        positionTokenAccount: positionVault,\n        tokenProgram: spl.TOKEN_2022_PROGRAM_ID,\n        user: payer,\n      })\n      .instruction();\n\n    transaction.add(initializePositionTx);\n\n    return { position: position.toString() };\n  }\n\n  async addLiquidityIntoPosition(params: AddLiquidityIntoPositionParams) {\n    const {\n      positionMint,\n      payer,\n      pair,\n      binArrayLower,\n      binArrayUpper,\n      transaction,\n      liquidityDistribution,\n      amountX,\n      amountY,\n    } = params;\n\n    const pairInfo = await this.getPairAccount(pair);\n\n    const tokenProgramX = await getProgram(\n      pairInfo.tokenMintX,\n      this.connection\n    );\n    const tokenProgramY = await getProgram(\n      pairInfo.tokenMintY,\n      this.connection\n    );\n\n    const associatedPairVaultX = await this.getPairVaultInfo({\n      tokenAddress: pairInfo.tokenMintX,\n      pair,\n    });\n\n    const associatedPairVaultY = await this.getPairVaultInfo({\n      tokenAddress: pairInfo.tokenMintY,\n      pair,\n    });\n\n    const associatedUserVaultX = await this.getUserVaultInfo({\n      tokenAddress: pairInfo.tokenMintX,\n      payer,\n    });\n\n    const associatedUserVaultY = await this.getUserVaultInfo({\n      tokenAddress: pairInfo.tokenMintY,\n      payer,\n    });\n\n    if (\n      pairInfo.tokenMintY.toString() === WRAP_SOL_ADDRESS ||\n      pairInfo.tokenMintX.toString() === WRAP_SOL_ADDRESS\n    ) {\n      const isNativeY = pairInfo.tokenMintY.toString() === WRAP_SOL_ADDRESS;\n\n      const totalAmount = isNativeY ? amountY : amountX;\n      const totalLiquid = liquidityDistribution.reduce((prev, curr) => {\n        const currAmount = isNativeY ? curr.distributionY : curr.distributionX;\n        return prev + currAmount;\n      }, 0);\n\n      if (totalLiquid) {\n        const amount = (totalLiquid * totalAmount) / MAX_BASIS_POINTS;\n\n        const associatedUserVault = isNativeY\n          ? associatedUserVaultY\n          : associatedUserVaultX;\n\n        transaction.add(\n          SystemProgram.transfer({\n            fromPubkey: payer,\n            toPubkey: associatedUserVault,\n            lamports: amount,\n          })\n        );\n        transaction.add(spl.createSyncNativeInstruction(associatedUserVault));\n      }\n    }\n\n    const unitSPrice = await getGasPrice(this.connection).catch(\n      () => undefined\n    );\n\n    const unitPrice = Math.max(\n      Number(unitSPrice) ?? 0,\n      UNIT_PRICE_DEFAULT * (this.bufferGas ?? 1)\n    );\n\n    const hook = PublicKey.findProgramAddressSync(\n      [\n        Buffer.from(utils.bytes.utf8.encode(\"hook\")),\n        this.hooksConfig.toBuffer(),\n        pair.toBuffer(),\n      ],\n      this.hooksProgram.programId\n    )[0];\n\n    const position = PublicKey.findProgramAddressSync(\n      [\n        Buffer.from(utils.bytes.utf8.encode(\"position\")),\n        positionMint.toBuffer(),\n      ],\n      this.lbProgram.programId\n    )[0];\n\n    const positionVault = spl.getAssociatedTokenAddressSync(\n      positionMint,\n      payer,\n      true,\n      spl.TOKEN_2022_PROGRAM_ID\n    );\n\n    const addLiquidityInstructions = await this.lbProgram.methods\n      .increasePosition(new BN(amountX), new BN(amountY), liquidityDistribution)\n      .accountsPartial({\n        pair: pair,\n        position: position,\n        binArrayLower: binArrayLower,\n        binArrayUpper: binArrayUpper,\n        tokenVaultX: associatedPairVaultX,\n        tokenVaultY: associatedPairVaultY,\n        userVaultX: associatedUserVaultX,\n        userVaultY: associatedUserVaultY,\n        positionTokenAccount: positionVault,\n        tokenMintX: pairInfo.tokenMintX,\n        tokenMintY: pairInfo.tokenMintY,\n        tokenProgramX,\n        tokenProgramY,\n        positionTokenProgram: spl.TOKEN_2022_PROGRAM_ID,\n        hook: hook,\n        hooksProgram: this.hooksProgram.programId,\n        user: payer,\n        positionMint,\n      })\n      .remainingAccounts([\n        { pubkey: pair, isWritable: false, isSigner: false },\n        { pubkey: binArrayLower, isWritable: false, isSigner: false },\n        { pubkey: binArrayUpper, isWritable: false, isSigner: false },\n      ])\n      .instruction();\n\n    transaction.add(\n      ComputeBudgetProgram.setComputeUnitLimit({\n        units: CCU_LIMIT,\n      })\n    );\n    transaction.add(\n      ComputeBudgetProgram.setComputeUnitPrice({\n        microLamports: unitPrice,\n      })\n    );\n\n    transaction.add(addLiquidityInstructions);\n  }\n\n  public async removeMultipleLiquidity(\n    params: RemoveMultipleLiquidityParams\n  ): Promise<RemoveMultipleLiquidityResponse> {\n    const { maxPositionList, payer, type, pair, tokenMintX, tokenMintY } =\n      params;\n\n    const tokenProgramX = await getProgram(tokenMintX, this.connection);\n    const tokenProgramY = await getProgram(tokenMintY, this.connection);\n\n    const txCreateAccount = new Transaction();\n\n    const associatedPairVaultX = await this.getPairVaultInfo({\n      tokenAddress: tokenMintX,\n      pair,\n      payer,\n      transaction: txCreateAccount,\n    });\n\n    const associatedPairVaultY = await this.getPairVaultInfo({\n      tokenAddress: tokenMintY,\n      pair,\n      payer,\n      transaction: txCreateAccount,\n    });\n\n    const associatedUserVaultX = await this.getUserVaultInfo({\n      tokenAddress: tokenMintX,\n      payer,\n      transaction: txCreateAccount,\n    });\n\n    const associatedUserVaultY = await this.getUserVaultInfo({\n      tokenAddress: tokenMintY,\n      payer,\n      transaction: txCreateAccount,\n    });\n\n    const hook = PublicKey.findProgramAddressSync(\n      [\n        Buffer.from(utils.bytes.utf8.encode(\"hook\")),\n        this.hooksConfig!.toBuffer(),\n        pair.toBuffer(),\n      ],\n      this.hooksProgram.programId\n    )[0];\n\n    const associatedHookTokenY = spl.getAssociatedTokenAddressSync(\n      tokenMintY,\n      hook,\n      true,\n      tokenProgramY\n    );\n    const infoHookTokenY = await this.connection.getAccountInfo(\n      associatedHookTokenY\n    );\n\n    if (!infoHookTokenY) {\n      const hookTokenYInstructions =\n        spl.createAssociatedTokenAccountInstruction(\n          payer,\n          associatedHookTokenY,\n          hook,\n          tokenMintY,\n          tokenProgramY\n        );\n\n      txCreateAccount.add(hookTokenYInstructions);\n    }\n\n    const unitSPrice = await getGasPrice(this.connection).catch(\n      () => undefined\n    );\n\n    const unitPrice = Math.max(\n      Number(unitSPrice) ?? 0,\n      UNIT_PRICE_DEFAULT * (this.bufferGas ?? 1)\n    );\n\n    const positionClosed: Record<string, string>[] = [];\n    const txs = await Promise.all(\n      maxPositionList.map(async ({ position, start, end, positionMint }) => {\n        const binArrayIndex = Math.floor(start / BIN_ARRAY_SIZE);\n\n        const { resultIndex } = await this.getBinArrayInfo({\n          binArrayIndex,\n          pair,\n          payer,\n        });\n\n        const binArrayLower = await this.getBinArray({\n          binArrayIndex: resultIndex,\n          pair,\n          payer,\n        });\n\n        const binArrayUpper = await this.getBinArray({\n          binArrayIndex: resultIndex + 1,\n          pair,\n          payer,\n        });\n\n        const tx = new Transaction();\n        tx.add(\n          ComputeBudgetProgram.setComputeUnitLimit({\n            units: CCU_LIMIT,\n          })\n        );\n        tx.add(\n          ComputeBudgetProgram.setComputeUnitPrice({\n            microLamports: unitPrice,\n          })\n        );\n\n        const positionVault = spl.getAssociatedTokenAddressSync(\n          new PublicKey(positionMint),\n          payer,\n          true,\n          spl.TOKEN_2022_PROGRAM_ID\n        );\n\n        const reserveXY = cloneDeep(\n          await this.getBinsReserveInformation({\n            position: new PublicKey(position),\n            pair,\n            payer,\n          })\n        );\n\n        const hookBinArrayLower = PublicKey.findProgramAddressSync(\n          [\n            Buffer.from(utils.bytes.utf8.encode(\"bin_array\")),\n            hook.toBuffer(),\n            new BN(BIN_ARRAY_INDEX).toArrayLike(Buffer, \"le\", 4),\n          ],\n          this.hooksProgram.programId\n        )[0];\n\n        const hookBinArrayUpper = PublicKey.findProgramAddressSync(\n          [\n            Buffer.from(utils.bytes.utf8.encode(\"bin_array\")),\n            hook.toBuffer(),\n            new BN(BIN_ARRAY_INDEX + 1).toArrayLike(Buffer, \"le\", 4),\n          ],\n          this.hooksProgram.programId\n        )[0];\n\n        const hookPosition = PublicKey.findProgramAddressSync(\n          [\n            Buffer.from(utils.bytes.utf8.encode(\"position\")),\n            hook.toBuffer(),\n            new PublicKey(position).toBuffer(),\n          ],\n          this.hooksProgram.programId\n        )[0];\n\n        let removedShares: BN[] = [];\n\n        if (type === \"removeBoth\") {\n          removedShares = reserveXY.map((reserve: ReserveParams) => {\n            const binId = reserve.binId;\n            if (binId >= Number(start) && binId <= Number(end)) {\n              return reserve.liquidityShare;\n            }\n\n            return new BN(0);\n          });\n        }\n\n        if (type === \"removeBaseToken\") {\n          removedShares = reserveXY.map((reserve: ReserveParams) => {\n            if (reserve.reserveX && reserve.reserveY === 0) {\n              return reserve.liquidityShare;\n            }\n\n            return new BN(0);\n          });\n        }\n\n        if (type === \"removeQuoteToken\") {\n          removedShares = reserveXY.map((reserve: ReserveParams) => {\n            if (reserve.reserveY && reserve.reserveX === 0) {\n              return reserve.liquidityShare;\n            }\n\n            return new BN(0);\n          });\n        }\n\n        const availableShares = reserveXY.filter((item: ReserveParams) =>\n          type === \"removeBoth\"\n            ? !new BN(item.liquidityShare).eq(new BN(0))\n            : type === \"removeQuoteToken\"\n            ? !item.reserveX\n            : !item.reserveY\n        );\n\n        const isClosePosition =\n          (type === \"removeBoth\" &&\n            end - start + 1 >= availableShares.length) ||\n          (end - start + 1 === FIXED_LENGTH &&\n            availableShares.length === FIXED_LENGTH);\n        if (isClosePosition) {\n          const instructions = await this.lbProgram.methods\n            .closePosition()\n            .accountsPartial({\n              pair,\n              position,\n              binArrayLower: binArrayLower,\n              binArrayUpper: binArrayUpper,\n              tokenVaultX: associatedPairVaultX,\n              tokenVaultY: associatedPairVaultY,\n              userVaultX: associatedUserVaultX,\n              userVaultY: associatedUserVaultY,\n              positionTokenAccount: positionVault,\n              tokenMintX,\n              tokenMintY,\n              tokenProgramX,\n              tokenProgramY,\n              positionTokenProgram: spl.TOKEN_2022_PROGRAM_ID,\n              hook,\n              hooksProgram: this.hooksProgram.programId,\n              user: payer,\n              positionMint,\n            })\n            .instruction();\n\n          positionClosed.push({ position });\n          tx.add(instructions);\n        } else {\n          const instructions = await this.lbProgram.methods\n            .decreasePosition(removedShares)\n            .accountsPartial({\n              pair: pair,\n              position,\n              binArrayLower: binArrayLower,\n              binArrayUpper: binArrayUpper,\n              tokenVaultX: associatedPairVaultX,\n              tokenVaultY: associatedPairVaultY,\n              userVaultX: associatedUserVaultX,\n              userVaultY: associatedUserVaultY,\n              positionTokenAccount: positionVault,\n              tokenMintX: tokenMintX,\n              tokenMintY: tokenMintY,\n              tokenProgramX,\n              tokenProgramY,\n              positionTokenProgram: spl.TOKEN_2022_PROGRAM_ID,\n              hook: hook,\n              hooksProgram: this.hooksProgram.programId,\n              user: payer,\n              positionMint,\n            })\n            ?.remainingAccounts([\n              { pubkey: pair, isWritable: false, isSigner: false },\n              { pubkey: binArrayLower, isWritable: false, isSigner: false },\n              { pubkey: binArrayUpper, isWritable: false, isSigner: false },\n              { pubkey: hookBinArrayLower, isWritable: true, isSigner: false },\n              { pubkey: hookBinArrayUpper, isWritable: true, isSigner: false },\n              { pubkey: hookPosition, isWritable: true, isSigner: false },\n            ])\n            .instruction();\n\n          tx.add(instructions);\n        }\n\n        return tx;\n      })\n    );\n\n    const txCloseAccount = new Transaction();\n\n    if (\n      tokenMintY.toString() === WRAP_SOL_ADDRESS ||\n      tokenMintX.toString() === WRAP_SOL_ADDRESS\n    ) {\n      const isNativeY = tokenMintY.toString() === WRAP_SOL_ADDRESS;\n\n      const associatedUserVault = isNativeY\n        ? associatedUserVaultY\n        : associatedUserVaultX;\n\n      txCloseAccount.add(\n        spl.createCloseAccountInstruction(associatedUserVault, payer, payer)\n      );\n    }\n\n    return {\n      txs,\n      txCreateAccount: txCreateAccount.instructions.length\n        ? txCreateAccount\n        : undefined,\n      txCloseAccount: txCloseAccount.instructions.length\n        ? txCloseAccount\n        : undefined,\n      positionClosed,\n    };\n  }\n\n  public async swap(params: SwapParams): Promise<Transaction> {\n    const {\n      tokenMintX,\n      tokenMintY,\n      amount,\n      otherAmountOffset,\n      swapForY,\n      isExactInput,\n      pair,\n      hook,\n      payer,\n    } = params;\n\n    const pairInfo = await this.getPairAccount(pair);\n    if (!pairInfo) throw new Error(\"Pair not found\");\n\n    let binArrayIndex = pairInfo.activeId / BIN_ARRAY_SIZE;\n    if (pairInfo.activeId % BIN_ARRAY_SIZE < BIN_ARRAY_SIZE / 2) {\n      binArrayIndex -= 1;\n    }\n\n    const binArrayLower = await this.getBinArray({\n      binArrayIndex,\n      pair,\n      payer,\n    });\n\n    const binArrayUpper = await this.getBinArray({\n      binArrayIndex: binArrayIndex + 1,\n      pair,\n      payer,\n    });\n\n    const [tokenProgramX, tokenProgramY] = await Promise.all([\n      getProgram(tokenMintX, this.connection),\n      getProgram(tokenMintY, this.connection),\n    ]);\n\n    const latestBlockHash = await this.connection.getLatestBlockhash();\n    const tx = new Transaction({\n      feePayer: payer,\n      blockhash: latestBlockHash.blockhash,\n      lastValidBlockHeight: latestBlockHash.lastValidBlockHeight,\n    });\n\n    const associatedPairVaultX = spl.getAssociatedTokenAddressSync(\n      tokenMintX,\n      pair,\n      true,\n      tokenProgramX\n    );\n\n    const associatedPairVaultY = spl.getAssociatedTokenAddressSync(\n      tokenMintY,\n      pair,\n      true,\n      tokenProgramY\n    );\n\n    const associatedUserVaultX = spl.getAssociatedTokenAddressSync(\n      tokenMintX,\n      payer,\n      true,\n      tokenProgramX\n    );\n\n    const associatedUserVaultY = spl.getAssociatedTokenAddressSync(\n      tokenMintY,\n      payer,\n      true,\n      tokenProgramY\n    );\n\n    const infoUserVaultX = await this.connection.getAccountInfo(\n      associatedUserVaultX\n    );\n\n    if (!infoUserVaultX) {\n      const userVaultXInstructions =\n        spl.createAssociatedTokenAccountInstruction(\n          payer,\n          associatedUserVaultX,\n          payer,\n          tokenMintX,\n          tokenProgramX\n        );\n\n      tx.add(userVaultXInstructions);\n    }\n\n    const infoUserVaultY = await this.connection.getAccountInfo(\n      associatedUserVaultY\n    );\n\n    if (!infoUserVaultY) {\n      const userVaultYInstructions =\n        spl.createAssociatedTokenAccountInstruction(\n          payer,\n          associatedUserVaultY,\n          payer,\n          tokenMintY,\n          tokenProgramY\n        );\n\n      tx.add(userVaultYInstructions);\n    }\n\n    const hookBinArrayLower = PublicKey.findProgramAddressSync(\n      [\n        Buffer.from(utils.bytes.utf8.encode(\"bin_array\")),\n        hook.toBuffer(),\n        new BN(BIN_ARRAY_INDEX).toArrayLike(Buffer, \"le\", 4),\n      ],\n      this.hooksProgram.programId\n    )[0];\n\n    const hookBinArrayUpper = PublicKey.findProgramAddressSync(\n      [\n        Buffer.from(utils.bytes.utf8.encode(\"bin_array\")),\n        hook.toBuffer(),\n        new BN(BIN_ARRAY_INDEX + 1).toArrayLike(Buffer, \"le\", 4),\n      ],\n      this.hooksProgram.programId\n    )[0];\n\n    if (\n      tokenMintY.toString() === WRAP_SOL_ADDRESS ||\n      tokenMintX.toString() === WRAP_SOL_ADDRESS\n    ) {\n      const isNativeY = tokenMintY.toString() === WRAP_SOL_ADDRESS;\n\n      const associatedUserVault = isNativeY\n        ? associatedUserVaultY\n        : associatedUserVaultX;\n\n      if (isNativeY && !swapForY) {\n        tx.add(\n          SystemProgram.transfer({\n            fromPubkey: payer,\n            toPubkey: associatedUserVault,\n            lamports: amount,\n          })\n        );\n        tx.add(spl.createSyncNativeInstruction(associatedUserVault));\n      }\n\n      if (!isNativeY && swapForY) {\n        tx.add(\n          SystemProgram.transfer({\n            fromPubkey: payer,\n            toPubkey: associatedUserVault,\n            lamports: amount,\n          })\n        );\n        tx.add(spl.createSyncNativeInstruction(associatedUserVault));\n      }\n    }\n\n    const swapInstructions = await this.lbProgram.methods\n      .swap(\n        new BN(amount.toString()),\n        new BN(otherAmountOffset.toString()),\n        swapForY,\n        isExactInput ? { exactInput: {} } : { exactOutput: {} }\n      )\n      .accountsPartial({\n        pair: pair,\n        binArrayLower: binArrayLower,\n        binArrayUpper: binArrayUpper,\n        tokenVaultX: associatedPairVaultX,\n        tokenVaultY: associatedPairVaultY,\n        userVaultX: associatedUserVaultX,\n        userVaultY: associatedUserVaultY,\n        tokenMintX: tokenMintX,\n        tokenMintY: tokenMintY,\n        tokenProgramX,\n        tokenProgramY,\n        user: payer,\n      })\n      .remainingAccounts([\n        { pubkey: pair, isWritable: false, isSigner: false },\n        { pubkey: binArrayLower, isWritable: false, isSigner: false },\n        { pubkey: binArrayUpper, isWritable: false, isSigner: false },\n        { pubkey: hookBinArrayLower, isWritable: true, isSigner: false },\n        { pubkey: hookBinArrayUpper, isWritable: true, isSigner: false },\n      ])\n      .instruction();\n\n    tx.add(swapInstructions);\n\n    if (\n      tokenMintY.toString() === WRAP_SOL_ADDRESS ||\n      tokenMintX.toString() === WRAP_SOL_ADDRESS\n    ) {\n      const isNativeY = tokenMintY.toString() === WRAP_SOL_ADDRESS;\n\n      const associatedUserVault = isNativeY\n        ? associatedUserVaultY\n        : associatedUserVaultX;\n      if ((isNativeY && swapForY) || (!isNativeY && !swapForY)) {\n        tx.add(\n          spl.createCloseAccountInstruction(associatedUserVault, payer, payer)\n        );\n      }\n    }\n\n    return tx;\n  }\n\n  public async getQuote(\n    params: GetTokenOutputParams\n  ): Promise<GetTokenOutputResponse> {\n    try {\n      const data = await LBSwapService.fromLbConfig(\n        this.lbProgram,\n        this.connection\n      ).calculateInOutAmount(params);\n      const { amountIn, amountOut } = data;\n\n      const slippageFraction = params.slippage / 100;\n      const slippageScaled = Math.round(slippageFraction * PRECISION);\n      let maxAmountIn = amountIn;\n      let minAmountOut = amountOut;\n      if (params.isExactInput) {\n        minAmountOut =\n          (amountOut * BigInt(PRECISION - slippageScaled)) / BigInt(PRECISION);\n      } else {\n        // max mount in should div for slippage\n        maxAmountIn =\n          (amountIn * BigInt(PRECISION)) / BigInt(PRECISION - slippageScaled);\n      }\n\n      const { maxAmountOut } = await this.getMaxAmountOutWithFee(\n        params.pair,\n        Number(amountIn.toString()),\n        params.swapForY,\n        params.tokenBaseDecimal,\n        params.tokenQuoteDecimal\n      );\n\n      const priceImpact = new bigDecimal(amountOut)\n        .subtract(new bigDecimal(maxAmountOut))\n        .divide(new bigDecimal(maxAmountOut))\n        .multiply(new bigDecimal(100))\n        .getValue();\n\n      return {\n        amountIn: amountIn,\n        amountOut: amountOut,\n        amount: params.isExactInput ? maxAmountIn : minAmountOut,\n        otherAmountOffset: params.isExactInput ? minAmountOut : maxAmountIn,\n        priceImpact: Number(priceImpact),\n      };\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  public async getMaxAmountOutWithFee(\n    pairAddress: PublicKey,\n    amount: number,\n    swapForY: boolean = false,\n    decimalBase: number = 9,\n    decimalQuote: number = 9\n  ) {\n    try {\n      let amountIn = BigInt(amount);\n      const pair = await this.getPairAccount(pairAddress);\n      const activeId = pair?.activeId;\n      const binStep = pair?.binStep;\n      const swapService = LBSwapService.fromLbConfig(\n        this.lbProgram,\n        this.connection\n      );\n      const feePrice = swapService.getTotalFee(pair);\n      const activePrice = getPriceFromId(binStep, activeId, 9, 9);\n      const price = getPriceFromId(\n        binStep,\n        activeId,\n        decimalBase,\n        decimalQuote\n      );\n\n      const feeAmount = swapService.getFeeAmount(amountIn, feePrice);\n      amountIn = BigInt(amountIn) - BigInt(feeAmount); // new BN(amountIn).subtract(new BN(feeAmount));\n      const maxAmountOut = swapForY\n        ? mulShr(Number(amountIn.toString()), activePrice, SCALE_OFFSET, \"down\")\n        : shlDiv(\n            Number(amountIn.toString()),\n            activePrice,\n            SCALE_OFFSET,\n            \"down\"\n          );\n\n      return { maxAmountOut, price };\n    } catch {}\n\n    return { maxAmountOut: 0, price: 0 };\n  }\n\n  public getDexName() {\n    return \"Saros DLMM\";\n  }\n\n  public getDexProgramId() {\n    return this.lbProgram.programId;\n  }\n\n  public async fetchPoolAddresses() {\n    const programId = this.getDexProgramId();\n    const connection = this.connection;\n    const pairAccount = LiquidityBookIDL.accounts.find(\n      (acc) => acc.name === \"Pair\"\n    );\n    const pairAccountDiscriminator = pairAccount\n      ? pairAccount.discriminator\n      : undefined;\n\n    if (!pairAccountDiscriminator) {\n      throw new Error(\"Pair account not found\");\n    }\n\n    const accounts = await connection.getProgramAccounts(\n      new PublicKey(programId),\n      {\n        filters: [\n          {\n            memcmp: { offset: 0, bytes: bs58.encode(pairAccountDiscriminator) },\n          },\n        ],\n      }\n    );\n    if (accounts.length === 0) {\n      throw new Error(\"Pair not found\");\n    }\n    const poolAdresses = accounts.reduce((addresses: string[], account) => {\n      if (account.account.owner.toString() !== programId.toString()) {\n        return addresses;\n      }\n      if (account.account.data.length < 8) {\n        return addresses;\n      }\n      addresses.push(account.pubkey.toString());\n      return addresses;\n    }, []);\n\n    return poolAdresses;\n  }\n\n  public async getUserPositions({ payer, pair }: UserPositionsParams) {\n    const connection = this.connection;\n    const tokenAccounts = await connection.getParsedTokenAccountsByOwner(\n      payer,\n      {\n        programId: spl.TOKEN_2022_PROGRAM_ID,\n      }\n    );\n\n    const positionMints = tokenAccounts.value\n      .filter((acc) => {\n        const amount = acc.account.data.parsed.info.tokenAmount.uiAmount;\n        // Only interested in NFTs or position tokens with amount > 0\n        return amount && amount > 0;\n      })\n      .map((acc) => new PublicKey(acc.account.data.parsed.info.mint));\n\n    const positions = await Promise.all(\n      positionMints.map(async (mint) => {\n        // Derive PDA for Position account\n        const [positionPda] = await PublicKey.findProgramAddressSync(\n          [Buffer.from(utils.bytes.utf8.encode(\"position\")), mint.toBuffer()],\n          this.lbProgram.programId\n        );\n        // Fetch and decode the Position account\n        try {\n          const accountInfo = await connection.getAccountInfo(positionPda);\n          if (!accountInfo) return null;\n          //@ts-ignore\n          const position = await this.lbProgram.account.position.fetch(\n            positionPda\n          );\n          if (position.pair.toString() !== pair.toString()) return null;\n          return { ...position, position: positionPda.toString() };\n        } catch {\n          return null;\n        }\n      })\n    );\n    return positions.filter(Boolean);\n  }\n\n  public async quote(params: {\n    amount: number;\n    metadata: PoolMetadata;\n    optional: {\n      isExactInput: boolean;\n      swapForY: boolean;\n      slippage: number;\n    };\n  }) {\n    const { amount, metadata, optional } = params;\n\n    return await this.getQuote({\n      amount: BigInt(amount),\n      isExactInput: optional.isExactInput,\n      pair: new PublicKey(metadata.poolAddress),\n      slippage: optional.slippage,\n      swapForY: optional.swapForY,\n      tokenBase: new PublicKey(metadata.baseMint),\n      tokenBaseDecimal: metadata.extra.tokenBaseDecimal,\n      tokenQuote: new PublicKey(metadata.quoteMint),\n      tokenQuoteDecimal: metadata.extra.tokenQuoteDecimal,\n    });\n  }\n\n  public async fetchPoolMetadata(pair: string): Promise<PoolMetadata> {\n    const connection = this.connection;\n    //@ts-ignore\n    const pairInfo: Pair = await this.lbProgram.account.pair.fetch(\n      new PublicKey(pair)\n    );\n    if (!pairInfo) {\n      throw new Error(\"Pair not found\");\n    }\n\n    const basePairVault = await this.getPairVaultInfo({\n      tokenAddress: new PublicKey(pairInfo.tokenMintX),\n      pair: new PublicKey(pair),\n    });\n    const quotePairVault = await this.getPairVaultInfo({\n      tokenAddress: new PublicKey(pairInfo.tokenMintY),\n      pair: new PublicKey(pair),\n    });\n\n    const [baseReserve, quoteReserve] = await Promise.all([\n      connection.getTokenAccountBalance(basePairVault).catch(() => ({\n        value: {\n          uiAmount: 0,\n          amount: \"0\",\n          decimals: 0,\n          uiAmountString: \"0\",\n        },\n      })),\n      connection.getTokenAccountBalance(quotePairVault).catch(() => ({\n        value: {\n          uiAmount: 0,\n          amount: \"0\",\n          decimals: 0,\n          uiAmountString: \"0\",\n        },\n      })),\n    ]);\n\n    return {\n      poolAddress: pair,\n      baseMint: pairInfo.tokenMintX.toString(),\n      baseReserve: baseReserve.value.amount,\n      quoteMint: pairInfo.tokenMintY.toString(),\n      quoteReserve: quoteReserve.value.amount,\n      tradeFee:\n        (pairInfo.staticFeeParameters.baseFactor * pairInfo.binStep) / 1e6,\n      extra: {\n        hook: pairInfo.hook?.toString(),\n        tokenQuoteDecimal: baseReserve.value.decimals,\n        tokenBaseDecimal: quoteReserve.value.decimals,\n      },\n    };\n  }\n\n  public async getPairVaultInfo(params: {\n    tokenAddress: PublicKey;\n    pair: PublicKey;\n    payer?: PublicKey;\n    transaction?: Transaction;\n  }) {\n    const { tokenAddress, pair, payer, transaction } = params;\n\n    const tokenMint = new PublicKey(tokenAddress);\n    const tokenProgram = await getProgram(tokenMint, this.connection);\n\n    const associatedPairVault = spl.getAssociatedTokenAddressSync(\n      tokenMint,\n      pair,\n      true,\n      tokenProgram\n    );\n\n    if (transaction && payer) {\n      const infoPairVault = await this.connection.getAccountInfo(\n        associatedPairVault\n      );\n\n      if (!infoPairVault) {\n        const pairVaultYInstructions =\n          spl.createAssociatedTokenAccountInstruction(\n            payer,\n            associatedPairVault,\n            pair,\n            tokenMint,\n            tokenProgram\n          );\n        transaction.add(pairVaultYInstructions);\n      }\n    }\n\n    return associatedPairVault;\n  }\n\n  public async getUserVaultInfo(params: GetUserVaultInfoParams) {\n    const { tokenAddress, payer, transaction } = params;\n    const tokenProgram = await getProgram(tokenAddress, this.connection);\n    const associatedUserVault = spl.getAssociatedTokenAddressSync(\n      tokenAddress,\n      payer,\n      true,\n      tokenProgram\n    );\n\n    if (transaction) {\n      const infoUserVault = await this.connection.getAccountInfo(\n        associatedUserVault\n      );\n\n      if (!infoUserVault) {\n        const userVaultYInstructions =\n          spl.createAssociatedTokenAccountInstruction(\n            payer,\n            associatedUserVault,\n            payer,\n            tokenAddress,\n            tokenProgram\n          );\n        transaction.add(userVaultYInstructions);\n      }\n    }\n    return associatedUserVault;\n  }\n\n  public async listenNewPoolAddress(\n    postTxFunction: (address: string) => Promise<void>\n  ) {\n    const LB_PROGRAM_ID = this.getDexProgramId();\n    this.connection.onLogs(\n      LB_PROGRAM_ID,\n      (logInfo) => {\n        if (!logInfo.err) {\n          const logs = logInfo.logs || [];\n          for (const log of logs) {\n            if (log.includes(\"Instruction: InitializePair\")) {\n              const signature = logInfo.signature;\n\n              this.getPairAddressFromLogs(signature).then((address) => {\n                postTxFunction(address);\n              });\n            }\n          }\n        }\n      },\n      \"finalized\"\n    );\n  }\n\n  private async getPairAddressFromLogs(signature: string) {\n    const parsedTransaction = await this.connection.getTransaction(signature, {\n      maxSupportedTransactionVersion: 0,\n    });\n    if (!parsedTransaction) {\n      throw new Error(\"Transaction not found\");\n    }\n\n    const compiledMessage = parsedTransaction.transaction.message;\n    const message = TransactionMessage.decompile(compiledMessage);\n    const instructions = message.instructions;\n    const initializePairStruct = LiquidityBookIDL.instructions.find(\n      (item) => item.name === \"initialize_pair\"\n    )!;\n\n    const initializePairDescrimator = Buffer.from(\n      initializePairStruct!.discriminator\n    );\n\n    let pairAddress = \"\";\n\n    for (const instruction of instructions) {\n      const descimatorInstruction = instruction.data.subarray(0, 8);\n      if (!descimatorInstruction.equals(initializePairDescrimator)) continue;\n      //@ts-ignore\n      const accounts = initializePairStruct.accounts.map((item, index) => {\n        return {\n          name: item.name,\n          address: instruction.keys[index].pubkey.toString(),\n        };\n      });\n      pairAddress =\n        accounts.find(\n          (item: { name: string; address: string }) => item.name === \"pair\"\n        )?.address || \"\";\n    }\n    return pairAddress;\n  }\n}\n"],"names":["MODE","CONFIG","_CONFIG","TESTNET","rpc","DEVNET","MAINNET","REWARDS_PER_SECOND","Math","floor","WRAP_SOL_ADDRESS","LiquidityBookAbstract","config","this","connection","Connection","_config$options","options","rpcUrl","mode","commitment","httpHeaders","development","provider","AnchorProvider","window","solana","defaultOptions","lbProgram","Program","LiquidityBookIDL","hooksProgram","MdmaIDL","getProgram","_ref","_asyncToGenerator","_regenerator","m","_callee","address","_account$value","owner","program","w","_context","n","getParsedAccountInfo","v","value","toBase58","TOKEN_PROGRAM_ID","TOKEN_2022_PROGRAM_ID","a","_x","_x2","apply","arguments","getPriceFromId","bin_step","bin_id","baseTokenDecimal","quoteTokenDecimal","quotient","base","exponent","decimalPow","pow","getIdFromPrice","price","binStep","Error","log","round","LBError","_Error","message","_this","call","name","_inheritsLoose","_wrapNativeSuper","LiquidityShape","RemoveLiquidityType","BinArrayRange","binArrayPrevious","binArrayCurrent","binArrayNext","index","BinArrayIndexMismatch","bins","addBins","binArray","forEach","bin","_this2","_proto","prototype","getBinMut","binId","getAllBins","Object","values","LBSwapService","volatilityAccumulator","volatilityReference","referenceId","timeLastUpdated","fromLbConfig","_proto2","getBinArray","params","binArrayIndex","pair","PublicKey","findProgramAddressSync","Buffer","from","utils","bytes","utf8","encode","toBuffer","BN","toArrayLike","programId","calculateInOutAmount","_calculateInOutAmount","amount","swapForY","isExactInput","pairInfo","currentBinArrayIndex","binArrayIndexes","binArrayAddresses","binArrays","binRange","amountAfterTransferFee","_this3","p","account","fetch","activeId","map","idx","Promise","all","i","error","reduce","acc","cur","add","totalSupply","isZero","amountIn","BigInt","amountOut","calculateAmountOut","calculateAmountIn","_calculateAmountIn","_callee2","amountOutLeft","activeBin","fee","_this$swapExactOutput","_context2","updateReferences","updateVolatilityAccumulator","getTotalFee","swapExactOutput","protocolShare","staticFeeParameters","reserveX","reserveY","amountInWithFees","moveActiveId","_x3","_x4","_x5","_calculateAmountOut","_callee3","amountInLeft","_this$swapExactInput","_context3","swapExactInput","_x6","_x7","_x8","_x9","protocolShareBigInt","binReserveOut","feeAmount","protocolFeeAmount","binReserveOutBigInt","toString","priceScaled","Number","amountInWithoutFee","calcAmountInByPrice","getFeeForAmount","getProtocolFee","maxAmountIn","maxFeeAmount","getFeeAmount","calcAmountOutByPrice","_updateReferences","_callee4","slot","blockTimeStamp","timeDelta","_context4","dynamicFeeParameters","idReference","toNumber","getSlot","getBlockTime","filterPeriod","decayPeriod","updateVolatilityReference","_x0","_x1","reductionFactor","abs","maxVolatilityAccumulator","getVariableFee","variableFeeControl","prod","getBaseFee","baseFactor","denominator","pairId","scaleOffset","rounding","mulDiv","x","y","numerator","divRem","shlDiv","offset","getGasPrice","buffNum","_ref2","resolve","timeout","currentFee","unitPrice","setTimeout","getRecentPrioritizationFees","filter","prioritizationFee","clearTimeout","length","max","concat","LiquidityBookServices","_LiquidityBookAbstrac","getPairAccount","_getPairAccount","getPositionAccount","_getPositionAccount","position","_getBinArray","payer","transaction","getAccountInfo","methods","initializeBinArray","accountsPartial","user","instruction","getBinArrayInfo","_getBinArrayInfo","resultIndex","result","binArrayOther","_binArrayOther","getBinsReserveInformation","_getBinsReserveInformation","_callee5","positionInfo","firstBinId","_yield$this$getBinArr","firstBinIndex","binIds","reserveXY","_context5","lowerBinId","Array","upperBinId","_","liquidityShare","liquidityShares","totalReserveX","totalReserveY","binPosistion","createPairWithConfig","_createPairWithConfig","_callee6","tokenBase","tokenQuote","ratePrice","tokenX","tokenY","id","tx","binStepConfig","quoteAssetBadge","binArrayLower","binArrayUpper","_context6","mintAddress","decimal","BIN_ARRAY_SIZE","Transaction","lbConfig","Uint8Array","initializePair","liquidityBookConfig","tokenMintX","tokenMintY","hooksConfig","createPosition","_createPosition","_callee7","relativeBinIdLeft","relativeBinIdRight","positionMint","positionVault","_context7","spl","positionTokenAccount","tokenProgram","addLiquidityIntoPosition","_addLiquidityIntoPosition","_callee8","_Number","_this$bufferGas","liquidityDistribution","amountX","amountY","tokenProgramX","tokenProgramY","associatedPairVaultX","associatedPairVaultY","associatedUserVaultX","associatedUserVaultY","isNativeY","totalAmount","totalLiquid","associatedUserVault","hook","addLiquidityInstructions","_context8","getPairVaultInfo","tokenAddress","getUserVaultInfo","prev","curr","distributionY","distributionX","SystemProgram","transfer","fromPubkey","toPubkey","lamports","bufferGas","increasePosition","tokenVaultX","tokenVaultY","userVaultX","userVaultY","positionTokenProgram","remainingAccounts","pubkey","isWritable","isSigner","ComputeBudgetProgram","setComputeUnitLimit","units","setComputeUnitPrice","microLamports","removeMultipleLiquidity","_removeMultipleLiquidity","_callee0","_Number2","_this$bufferGas2","maxPositionList","type","txCreateAccount","associatedHookTokenY","hookTokenYInstructions","positionClosed","txs","txCloseAccount","_context0","_callee9","start","end","hookBinArrayLower","hookBinArrayUpper","hookPosition","removedShares","availableShares","instructions","_this$lbProgram$metho","_t2","_context9","cloneDeep","ACTIVE_ID","BIN_ARRAY_INDEX","reserve","item","eq","closePosition","push","decreasePosition","undefined","swap","_swap","_callee1","otherAmountOffset","_yield$Promise$all","latestBlockHash","userVaultXInstructions","userVaultYInstructions","_isNativeY","_associatedUserVault","_context1","getLatestBlockhash","feePayer","blockhash","lastValidBlockHeight","exactInput","exactOutput","getQuote","_getQuote","_callee10","data","slippageScaled","minAmountOut","maxAmountOut","priceImpact","_context10","slippage","getMaxAmountOutWithFee","tokenBaseDecimal","tokenQuoteDecimal","bigDecimal","subtract","divide","multiply","getValue","_x10","_getMaxAmountOutWithFee","_callee11","pairAddress","decimalBase","decimalQuote","_context11","swapService","feePrice","activePrice","_x11","_x12","_x13","_x14","_x15","getDexName","getDexProgramId","fetchPoolAddresses","_fetchPoolAddresses","_callee12","pairAccount","pairAccountDiscriminator","accounts","poolAdresses","_context12","find","discriminator","getProgramAccounts","filters","memcmp","bs58","addresses","getUserPositions","_getUserPositions","_callee14","_ref3","positionMints","_context14","getParsedTokenAccountsByOwner","parsed","info","tokenAmount","uiAmount","mint","_ref4","_callee13","positionPda","_context13","_extends","_x17","Boolean","_x16","quote","_quote","_callee15","metadata","optional","_context15","poolAddress","baseMint","extra","quoteMint","_x18","fetchPoolMetadata","_fetchPoolMetadata","_callee16","_pairInfo$hook","basePairVault","quotePairVault","_yield$Promise$all2","baseReserve","quoteReserve","_context16","getTokenAccountBalance","decimals","uiAmountString","tradeFee","_x19","_getPairVaultInfo","_callee17","tokenMint","associatedPairVault","pairVaultYInstructions","_context17","_x20","_getUserVaultInfo","_callee18","_context18","_x21","listenNewPoolAddress","_listenNewPoolAddress","_callee19","postTxFunction","LB_PROGRAM_ID","_context19","onLogs","logInfo","err","_step","_iterator","_createForOfIteratorHelperLoose","logs","done","includes","getPairAddressFromLogs","signature","then","_x22","_getPairAddressFromLogs","_callee20","parsedTransaction","initializePairStruct","initializePairDescrimator","_loop","_iterator2","_step2","_context21","getTransaction","maxSupportedTransactionVersion","TransactionMessage","decompile","_accounts$find","_context20","subarray","equals","keys","d","_regeneratorValues","_x23","key","get","feeParameters","space"],"mappings":"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"}