{"version":3,"file":"dlmm-sdk.cjs.production.min.js","sources":["../types/config.ts","../types/services.ts","../constants/config.ts","../interface/liquidityBookAbstract.ts","../services/getProgram.ts","../utils/price.ts","../services/swap.ts","../utils/math.ts","../utils/index.ts","../services/core.ts","../utils/typeConverters.ts"],"sourcesContent":["import { Commitment, ConnectionConfig, PublicKey } from \"@solana/web3.js\";\nimport { BN } from \"@coral-xyz/anchor\";\n\nexport enum MODE {\n  TESTNET = \"testnet\",\n  DEVNET = \"devnet\",\n  MAINNET = \"mainnet\",\n}\n\nexport type LiquidityBookConfig = {\n  baseFactor: number;\n  binStep: number;\n  activeId: number;\n  binArraySize: number;\n  binArrayIndex: number;\n  maxBasisPoints: number;\n  filterPeriod: number;\n  decayPeriod: number;\n  reductionFactor: number;\n  variableFeeControl: number;\n  maxVolatilityAccumulator: number;\n  protocolShare: number;\n  startTime: number;\n  rewardsDuration: number;\n  rewardsPerSecond: number;\n};\n\nexport type ILiquidityBookConfig =\n  | {\n      mode: MODE;\n      options?: {\n        rpcUrl?: string;\n        commitmentOrConfig?: Commitment | ConnectionConfig;\n      };\n    }\n  | {\n      mode?: never;\n      options: {\n        rpcUrl: string;\n        commitmentOrConfig?: Commitment | ConnectionConfig;\n      };\n    };\n\nexport type Bin = {\n  reserveX: number;\n  reserveY: number;\n  totalSupply: number;\n};\nexport type BinArray = {\n  bins: Bin[];\n  index: number;\n};\n\nexport type StaticFeeParameters = {\n  baseFactor: number;\n  filterPeriod: number;\n  decayPeriod: number;\n  reductionFactor: number;\n  variableFeeControl: number;\n  maxVolatilityAccumulator: number;\n  protocolShare: number;\n  space: Uint8Array;\n};\n\nexport type DynamicFeeParameters = {\n  timeLastUpdated: bigint;\n  volatilityAccumulator: number;\n  volatilityReference: number;\n  idReference: number;\n  space: Uint8Array;\n};\n\nexport type PairInfo = {\n  bump: Uint8Array;\n  liquidityBookConfig: PublicKey;\n  binStep: number;\n  binStepSeed: Uint8Array;\n  tokenMintX: PublicKey;\n  tokenMintY: PublicKey;\n  staticFeeParameters: StaticFeeParameters;\n  activeId: number;\n  dynamicFeeParameters: DynamicFeeParameters;\n  protocolFeesX: BN;\n  protocolFeesY: BN;\n  hook: PublicKey | null;\n};\n\nexport interface PoolMetadata {\n  poolAddress: string;\n  baseMint: string;\n  baseReserve: string;\n  quoteMint: string;\n  quoteReserve: string;\n  tradeFee: number;\n  extra: {\n    hook?: string;\n    tokenQuoteDecimal: number;\n    tokenBaseDecimal: number;\n  };\n}\n\nexport interface PairAccount {\n  bump: number[];                    \n  liquidityBookConfig: PublicKey;\n  binStep: number;                   \n  binStepSeed: number[];            \n  tokenMintX: PublicKey;\n  tokenMintY: PublicKey;\n  staticFeeParameters: StaticFeeParameters;\n  activeId: number;                  \n  dynamicFeeParameters: DynamicFeeParameters;\n  protocolFeesX: BN;                 \n  protocolFeesY: BN;                \n  hook: PublicKey | null;\n}\n","import { PublicKey, Transaction } from \"@solana/web3.js\";\nimport { BN } from \"@coral-xyz/anchor\";\n\nexport enum LiquidityShape {\n  Spot = \"Spot\",\n  Curve = \"Curve\",\n  BidAsk = \"BidAsk\",\n}\n\nexport enum RemoveLiquidityType {\n  Both = \"removeBoth\",\n  BaseToken = \"removeBaseToken\",\n  QuoteToken = \"removeQuoteToken\",\n}\n\nexport interface PositionInfo {\n  pair: string;\n  positionMint: string;\n  position: string;\n\n  liquidityShares: string[];\n  lowerBinId: number;\n  upperBinId: number;\n  space: number[];\n}\n\nexport interface GetBinArrayParams {\n  binArrayIndex: number;\n  pair: PublicKey;\n  payer?: PublicKey;\n  transaction?: Transaction;\n}\nexport interface SwapParams {\n  tokenMintX: PublicKey;\n  tokenMintY: PublicKey;\n  amount: bigint;\n  otherAmountOffset: bigint;\n  swapForY: boolean;\n  isExactInput: boolean;\n  pair: PublicKey;\n  hook: PublicKey;\n  payer: PublicKey;\n}\n\nexport interface GetTokenOutputParams {\n  pair: PublicKey;\n  tokenBase: PublicKey;\n  tokenQuote: PublicKey;\n  amount: bigint;\n  swapForY: boolean;\n  isExactInput: boolean;\n  tokenBaseDecimal: number;\n  tokenQuoteDecimal: number;\n  slippage: number;\n}\n\nexport interface GetTokenOutputResponse {\n  amountIn: bigint;\n  amountOut: bigint;\n  priceImpact: number;\n  amount: bigint;\n  otherAmountOffset: bigint;\n}\n\nexport interface Pair {\n  bump: number[];\n  liquidityBookConfig: string; // PublicKey as string\n  binStep: number;\n  binStepSeed: number[];\n  tokenMintX: string; // PublicKey as string\n  tokenMintY: string; // PublicKey as string\n  staticFeeParameters: {\n    baseFactor: number;\n    filterPeriod: number;\n    decayPeriod: number;\n    reductionFactor: number;\n    variableFeeControl: number;\n    maxVolatilityAccumulator: number;\n    protocolShare: number;\n    space: [number, number];\n  };\n  activeId: number;\n  dynamicFeeParameters: {\n    timeLastUpdated: BN; // hex string, likely timestamp\n    volatilityAccumulator: number;\n    volatilityReference: number;\n    idReference: number;\n    space: [number, number, number, number];\n  };\n  protocolFeesX: string; // likely bytes/hex\n  protocolFeesY: string; // likely bytes/hex\n  hook: null | string; // hook could be nullable\n}\n\ninterface Bin {\n  totalSupply: string;\n  reserveX: string;\n  reserveY: string;\n}\n\nexport interface CreatePairWithConfigParams {\n  tokenBase: {\n    decimal: number;\n    mintAddress: string;\n  };\n  tokenQuote: {\n    decimal: number;\n    mintAddress: string;\n  };\n  binStep: number;\n  ratePrice: number;\n  payer: PublicKey;\n}\n\nexport interface CreatePositionParams {\n  payer: PublicKey;\n  relativeBinIdLeft: number;\n  relativeBinIdRight: number;\n  pair: PublicKey;\n  binArrayIndex: number;\n  positionMint: PublicKey;\n  transaction: Transaction;\n}\n\nexport interface GetUserVaultInfoParams {\n  tokenAddress: PublicKey;\n  payer: PublicKey;\n  transaction?: Transaction;\n}\n\nexport interface Distribution {\n  relativeBinId: number;\n  distributionX: number;\n  distributionY: number;\n}\n\nexport interface AddLiquidityIntoPositionParams {\n  positionMint: PublicKey;\n  payer: PublicKey;\n  pair: PublicKey;\n  transaction: Transaction;\n  liquidityDistribution: Distribution[];\n  amountY: number;\n  amountX: number;\n  binArrayLower: PublicKey;\n  binArrayUpper: PublicKey;\n}\n\nexport interface AddLiquidityParams {\n  tokenX: {\n    address?: string;\n    decimals: number;\n    amount: number;\n    mintAddress: string;\n  };\n  tokenY: {\n    address?: string;\n    decimals: number;\n    amount: number;\n    mintAddress: string;\n  };\n\n  pair: string;\n  binRange: [number, number];\n  positions: PositionInfo[];\n  shape: LiquidityShape;\n  activeBin: number;\n  refId: number;\n  payer: PublicKey;\n}\n\nexport interface RemoveMultipleLiquidityParams {\n  maxPositionList: {\n    position: string;\n    start: number;\n    end: number;\n    positionMint: string;\n  }[];\n  payer: PublicKey;\n  type: \"removeBoth\" | \"removeBaseToken\" | \"removeQuoteToken\";\n  pair: PublicKey;\n  tokenMintX: PublicKey;\n  tokenMintY: PublicKey;\n  activeId: number;\n}\n\nexport interface RemoveMultipleLiquidityResponse {\n  txs: Transaction[];\n  txCreateAccount?: Transaction;\n  txCloseAccount?: Transaction;\n  positionClosed?: Record<string, string>[];\n}\n\nexport interface GetBinsArrayInfoParams {\n  binArrayIndex: number;\n  pair: PublicKey;\n  payer: PublicKey;\n}\n\nexport interface GetBinsReserveParams {\n  position: PublicKey;\n  pair: PublicKey;\n  payer: PublicKey;\n}\n\nexport interface GetBinsReserveResponse {\n  reserveX: string | number;\n  reserveY: string | number;\n  totalSupply: string | number;\n  liquidityShare: BN;\n  binId: number;\n  binPosistion: number;\n}\n\nexport interface ReserveParams {\n  binId: number;\n  reserveX: string | number;\n  reserveY: string | number;\n  liquidityShare: string | number;\n}\n\nexport interface UserPositionsParams {\n  payer: PublicKey;\n  pair: PublicKey;\n}\n","import { MODE } from \"../types\";\n\nexport const CONFIG = {\n  [MODE.TESTNET]: {\n    rpc: \"https://api.testnet.solana.com\",\n  },\n  [MODE.DEVNET]: {\n    rpc: \"https://api.devnet.solana.com\",\n  },\n  [MODE.MAINNET]: {\n    rpc: \"https://api.mainnet-beta.solana.com\",\n  },\n};\n\nexport const BASE_FACTOR = 8_000;\nexport const BIN_STEP = 1;\nexport const ACTIVE_ID = 8388608;\nexport const BIN_ARRAY_SIZE = 256;\nexport const BIN_ARRAY_INDEX = ACTIVE_ID / BIN_ARRAY_SIZE - 1;\nexport const MAX_BASIS_POINTS = 10_000;\nexport const FILTER_PERIOD = 30;\nexport const DECAY_PERIOD = 600;\nexport const REDUCTION_FACTOR = 5_000;\nexport const VARIABLE_FEE_CONTROL = 40_000;\nexport const MAX_VOLATILITY_ACCUMULATOR = 350_000;\nexport const PROTOCOL_SHARE = 2000;\nexport const START_TIME = 1000;\nexport const REWARDS_DURATION = 24 * 3600;\nexport const REWARDS_PER_SECOND = Math.floor(100e9 / REWARDS_DURATION);\nexport const VARIABLE_FEE_PRECISION = 100_000_000_000;\nexport const SCALE_OFFSET = 64;\nexport const BASIS_POINT_MAX = 10_000;\nexport const ONE = 1 << SCALE_OFFSET;\nexport const PRECISION = 1_000_000_000;\n\nexport const UNIT_PRICE_DEFAULT = 1_000_000;\nexport const CCU_LIMIT = 400_000;\nexport const WRAP_SOL_ADDRESS = \"So11111111111111111111111111111111111111112\";\nexport const FIXED_LENGTH = 16;\n\nexport const BIN_STEP_CONFIGS = [\n  {\n    binStep: 1,\n    feeParameters: {\n      baseFactor: 10000,\n      filterPeriod: 10,\n      decayPeriod: 120,\n      reductionFactor: 5000,\n      variableFeeControl: 2000000,\n      maxVolatilityAccumulator: 100000,\n      protocolShare: 2000,\n      space: [0, 0],\n    },\n  },\n  {\n    binStep: 2,\n    feeParameters: {\n      baseFactor: 10000,\n      filterPeriod: 10,\n      decayPeriod: 120,\n      reductionFactor: 5000,\n      variableFeeControl: 500000,\n      maxVolatilityAccumulator: 250000,\n      protocolShare: 2000,\n      space: [0, 0],\n    },\n  },\n  {\n    binStep: 5,\n    feeParameters: {\n      baseFactor: 10000,\n      filterPeriod: 30,\n      decayPeriod: 600,\n      reductionFactor: 5000,\n      variableFeeControl: 120000,\n      maxVolatilityAccumulator: 300000,\n      protocolShare: 2000,\n      space: [0, 0],\n    },\n  },\n  {\n    binStep: 10,\n    feeParameters: {\n      baseFactor: 10000,\n      filterPeriod: 30,\n      decayPeriod: 600,\n      reductionFactor: 5000,\n      variableFeeControl: 40000,\n      maxVolatilityAccumulator: 350000,\n      protocolShare: 2000,\n      space: [0, 0],\n    },\n  },\n  {\n    binStep: 20,\n    feeParameters: {\n      baseFactor: 10000,\n      filterPeriod: 30,\n      decayPeriod: 600,\n      reductionFactor: 5000,\n      variableFeeControl: 20000,\n      maxVolatilityAccumulator: 350000,\n      protocolShare: 2000,\n      space: [0, 0],\n    },\n  },\n  {\n    binStep: 50,\n    feeParameters: {\n      baseFactor: 10000,\n      filterPeriod: 120,\n      decayPeriod: 1200,\n      reductionFactor: 5000,\n      variableFeeControl: 10000,\n      maxVolatilityAccumulator: 250000,\n      protocolShare: 2000,\n      space: [0, 0],\n    },\n  },\n  {\n    binStep: 100,\n    feeParameters: {\n      baseFactor: 10000,\n      filterPeriod: 300,\n      decayPeriod: 1200,\n      reductionFactor: 5000,\n      variableFeeControl: 7500,\n      maxVolatilityAccumulator: 150000,\n      protocolShare: 2000,\n      space: [0, 0],\n    },\n  },\n  {\n    binStep: 200,\n    feeParameters: {\n      baseFactor: 10000,\n      filterPeriod: 300,\n      decayPeriod: 1200,\n      reductionFactor: 5000,\n      variableFeeControl: 7500,\n      maxVolatilityAccumulator: 150000,\n      protocolShare: 2000,\n      space: [0, 0],\n    },\n  },\n  {\n    binStep: 250,\n    feeParameters: {\n      baseFactor: 20000,\n      filterPeriod: 300,\n      decayPeriod: 1200,\n      reductionFactor: 5000,\n      variableFeeControl: 7500,\n      maxVolatilityAccumulator: 150000,\n      protocolShare: 2000,\n      space: [0, 0],\n    },\n  },\n];\n","import { Connection } from \"@solana/web3.js\";\nimport { AnchorProvider, Idl, Program, Wallet } from \"@coral-xyz/anchor\";\nimport { ILiquidityBookConfig } from \"../types\";\nimport { CONFIG } from \"../constants/config\";\nimport LiquidityBookIDL from \"../constants/idl/liquidity_book.json\";\nimport MdmaIDL from \"../constants/idl/mdma_hook.json\";\n\nexport abstract class LiquidityBookAbstract {\n  connection: Connection;\n\n  lbProgram!: Program<Idl>;\n  hooksProgram!: Program<Idl>;\n\n  constructor(config: ILiquidityBookConfig) {\n    const rpcUrl = config.options?.rpcUrl || CONFIG[config.mode!].rpc;\n    \n    // Initialize the services here\n    this.connection = new Connection(\n      rpcUrl,\n      config.options?.commitmentOrConfig || \"confirmed\"\n    );\n\n    const provider = new AnchorProvider(\n      this.connection,\n      {} as Wallet,\n      AnchorProvider.defaultOptions()\n    );\n\n    this.lbProgram = new Program(LiquidityBookIDL as Idl, provider);\n    this.hooksProgram = new Program(MdmaIDL as Idl, provider);\n  }\n}\n","import { TOKEN_2022_PROGRAM_ID, TOKEN_PROGRAM_ID } from \"@solana/spl-token\";\nimport { Connection, PublicKey } from \"@solana/web3.js\";\n\nexport const getProgram = async (\n  address: PublicKey,\n  connection: Connection\n) => {\n  const account = await connection.getParsedAccountInfo(address);\n\n  const owner = account.value?.owner.toBase58();\n\n  const program =\n    owner === TOKEN_PROGRAM_ID.toBase58()\n      ? TOKEN_PROGRAM_ID\n      : TOKEN_2022_PROGRAM_ID;\n\n  return program;\n};\n","import { BASIS_POINT_MAX, ONE, SCALE_OFFSET } from '../constants/config'\n\nconst getBase = (binStep: number) => {\n  const quotient = binStep << SCALE_OFFSET\n  if (quotient < 0) return null\n\n  const basisPointMaxBigInt = BASIS_POINT_MAX\n\n  //@ts-ignore\n  if (basisPointMaxBigInt === 0) return null\n  const fraction = quotient / basisPointMaxBigInt\n\n  const oneBigInt = ONE\n  const result = oneBigInt + fraction\n\n  return result\n}\n\nexport const getPriceFromId = (\n  bin_step: number,\n  bin_id: number,\n  baseTokenDecimal: number,\n  quoteTokenDecimal: number\n) => {\n  const base = getBase(bin_step) as number\n  const exponent = bin_id - 8_388_608\n  const decimalPow = Math.pow(10, baseTokenDecimal - quoteTokenDecimal)\n\n  return Math.pow(base, exponent) * decimalPow\n}\n\nexport const getIdFromPrice = (\n  price: number,\n  binStep: number,\n  baseTokenDecimal: number,\n  quoteTokenDecimal: number\n): number => {\n  if (price <= 0) throw new Error('Giá phải lớn hơn 0')\n  if (binStep <= 0 || binStep > BASIS_POINT_MAX)\n    throw new Error('Bin step invalid')\n\n  const decimalPow = Math.pow(10, quoteTokenDecimal - baseTokenDecimal)\n\n  const base = 1 + binStep / BASIS_POINT_MAX\n  const exponent = Math.log(price * decimalPow) / Math.log(base)\n  const binId = Math.round(exponent + 8_388_608)\n\n  return binId\n}\n","import { BN, Idl, Program, utils } from \"@coral-xyz/anchor\";\nimport { Bin, BinArray } from \"../types\";\n\nimport { Connection, PublicKey } from \"@solana/web3.js\";\nimport {\n  BASIS_POINT_MAX,\n  BIN_ARRAY_SIZE,\n  PRECISION,\n  SCALE_OFFSET,\n  VARIABLE_FEE_PRECISION,\n} from \"../constants/config\";\nimport { getPriceFromId } from \"../utils/price\";\nimport {\n  GetBinArrayParams,\n  GetTokenOutputParams,\n  Pair,\n} from \"../types/services\";\n\nclass LBError extends Error {\n  static BinNotFound = new LBError(\"Bin not found\");\n  static BinArrayIndexMismatch = new LBError(\"Bin array index mismatch\");\n\n  constructor(message: string) {\n    super(message);\n    this.name = \"LBError\";\n  }\n}\n\nclass BinArrayRange {\n  private readonly bins: { [binId: number]: Bin };\n  constructor(\n    binArrayPrevious: BinArray,\n    binArrayCurrent: BinArray,\n    binArrayNext: BinArray\n  ) {\n    if (\n      binArrayCurrent.index !== binArrayPrevious.index + 1 ||\n      binArrayNext.index !== binArrayCurrent.index + 1\n    ) {\n      throw LBError.BinArrayIndexMismatch;\n    }\n\n    this.bins = {};\n\n    const addBins = (binArray: BinArray) => {\n      binArray.bins.forEach((bin, index) => {\n        const binId = binArray.index * BIN_ARRAY_SIZE + index;\n        this.bins[binId] = bin;\n      });\n    };\n\n    addBins(binArrayPrevious);\n    addBins(binArrayCurrent);\n    addBins(binArrayNext);\n  }\n\n  getBinMut(binId: number) {\n    const bin = this.bins[binId];\n    return bin;\n  }\n\n  getAllBins() {\n    return Object.values(this.bins);\n  }\n}\n\nexport class LBSwapService {\n  lbProgram!: Program<Idl>;\n  volatilityAccumulator: number;\n  volatilityReference: number;\n  timeLastUpdated: number;\n  referenceId: number;\n  connection: Connection;\n\n  constructor(lbProgram: Program<Idl>, connection: Connection) {\n    this.lbProgram = lbProgram;\n    this.connection = connection;\n    this.volatilityAccumulator = 0;\n    this.volatilityReference = 0;\n    this.referenceId = 0;\n    this.timeLastUpdated = 0;\n  }\n\n  static fromLbConfig(lbProgram: Program<Idl>, connection: Connection) {\n    return new LBSwapService(lbProgram, connection);\n  }\n\n  getBinArray(params: GetBinArrayParams) {\n    const { binArrayIndex, pair } = params;\n\n    const binArray = PublicKey.findProgramAddressSync(\n      [\n        Buffer.from(utils.bytes.utf8.encode(\"bin_array\")),\n        pair.toBuffer(),\n        new BN(binArrayIndex).toArrayLike(Buffer, \"le\", 4),\n      ],\n      this.lbProgram.programId\n    )[0];\n\n    return binArray;\n  }\n\n  public async calculateInOutAmount(params: GetTokenOutputParams) {\n    const { amount, swapForY, pair, isExactInput } = params;\n    try {\n       //@ts-ignore\n      const pairInfo: Pair = await this.lbProgram.account.pair.fetch(pair);\n      if (!pairInfo) throw new Error(\"Pair not found\");\n\n      const currentBinArrayIndex = Math.floor(\n        pairInfo.activeId / BIN_ARRAY_SIZE\n      );\n      const binArrayIndexes = [\n        currentBinArrayIndex - 1,\n        currentBinArrayIndex,\n        currentBinArrayIndex + 1,\n      ];\n      const binArrayAddresses = binArrayIndexes.map((idx) =>\n        this.getBinArray({\n          binArrayIndex: idx,\n          pair,\n        })\n      );\n\n      // Fetch bin arrays in batch, fallback to empty if not found\n      const binArrays: BinArray[] = await Promise.all(\n        binArrayAddresses.map((address, i) =>\n           //@ts-ignore\n          this.lbProgram.account.binArray.fetch(address).catch((error: any) => {\n            return { index: binArrayIndexes[i], bins: [] } as BinArray;\n          })\n        )\n      );\n\n      // Validate bin arrays and build range\n      const binRange = new BinArrayRange(\n        binArrays[0],\n        binArrays[1],\n        binArrays[2]\n      );\n      const totalSupply = binRange\n        .getAllBins()\n        .reduce((acc, cur) => acc.add(cur.totalSupply), new BN(0));\n      if (totalSupply.isZero()) {\n        return {\n          amountIn: BigInt(0),\n          amountOut: BigInt(0),\n        };\n      }\n\n      const amountAfterTransferFee = amount;\n\n      if (isExactInput) {\n        const amountOut = await this.calculateAmountOut(\n          amountAfterTransferFee,\n          binRange,\n          pairInfo,\n          swapForY\n        );\n\n        return {\n          amountIn: amount,\n          amountOut,\n        };\n      } else {\n        const amountIn = await this.calculateAmountIn(\n          amountAfterTransferFee,\n          binRange,\n          pairInfo,\n          swapForY\n        );\n\n        return {\n          amountIn,\n          amountOut: amountAfterTransferFee,\n        };\n      }\n    } catch (error) {\n      throw new Error(error as string);\n    }\n  }\n\n  /**\n   * @description Calculate the input amount for the swap. isExactInput = false\n   */\n  public async calculateAmountIn(\n    amount: bigint,\n    bins: BinArrayRange,\n    pairInfo: Pair,\n    swapForY: boolean\n  ) {\n    try {\n      let amountIn = BigInt(0);\n      let totalProtocolFee = BigInt(0);\n      let amountOutLeft = amount;\n      let activeId = pairInfo.activeId;\n      let totalBinUsed = 0;\n\n      await this.updateReferences(pairInfo, activeId);\n\n      while (amountOutLeft > BigInt(0)) {\n        totalBinUsed++;\n        this.updateVolatilityAccumulator(pairInfo, activeId);\n\n        const activeBin = bins.getBinMut(activeId);\n        if (!activeBin) {\n          break;\n        }\n\n        const fee = this.getTotalFee(pairInfo);\n\n        const {\n          amountInWithFees,\n          amountOut: amountOutOfBin,\n          protocolFeeAmount,\n        } = this.swapExactOutput({\n          binStep: pairInfo.binStep,\n          activeId,\n          amountOutLeft,\n          fee,\n          protocolShare: pairInfo.staticFeeParameters.protocolShare,\n          swapForY,\n          reserveX: activeBin.reserveX,\n          reserveY: activeBin.reserveY,\n        });\n\n        amountIn += amountInWithFees;\n        amountOutLeft -= amountOutOfBin;\n        totalProtocolFee += protocolFeeAmount;\n\n        if (!amountOutLeft) break;\n        activeId = this.moveActiveId(activeId, swapForY);\n      }\n\n      if (totalBinUsed >= 30) {\n        throw \"Swap crosses too many bins – quote aborted.\";\n      }\n\n      return amountIn;\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  /**\n   * @description Calculate the output amount for the swap. isExactInput = true\n   */\n  public async calculateAmountOut(\n    amount: bigint,\n    bins: BinArrayRange,\n    pairInfo: Pair,\n    swapForY: boolean\n  ) {\n    try {\n      let amountOut = BigInt(0);\n      let totalProtocolFee = BigInt(0);\n      let amountInLeft = amount;\n      let activeId = pairInfo.activeId;\n      let totalBinUsed = 0;\n\n      await this.updateReferences(pairInfo, activeId);\n\n      while (amountInLeft > BigInt(0)) {\n        totalBinUsed++;\n        this.updateVolatilityAccumulator(pairInfo, activeId);\n\n        const activeBin = bins.getBinMut(activeId);\n        if (!activeBin) {\n          break;\n        }\n\n        const fee = this.getTotalFee(pairInfo);\n\n        const {\n          amountInWithFees,\n          amountOut: amountOutOfBin,\n          protocolFeeAmount,\n        } = this.swapExactInput({\n          binStep: pairInfo.binStep,\n          activeId,\n          amountInLeft,\n          fee,\n          protocolShare: pairInfo.staticFeeParameters.protocolShare,\n          swapForY,\n          reserveX: activeBin.reserveX,\n          reserveY: activeBin.reserveY,\n        });\n\n        amountOut += amountOutOfBin;\n        amountInLeft -= amountInWithFees;\n        totalProtocolFee += protocolFeeAmount;\n\n        if (!amountInLeft) break;\n        activeId = this.moveActiveId(activeId, swapForY);\n      }\n      if (totalBinUsed >= 30) {\n        throw \"Swap crosses too many bins – quote aborted.\";\n      }\n\n      return amountOut;\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  public swapExactOutput(params: {\n    binStep: number;\n    activeId: number;\n    amountOutLeft: bigint;\n    fee: bigint;\n    protocolShare: number;\n    swapForY: boolean;\n    reserveX: BN;\n    reserveY: BN;\n  }) {\n    const {\n      binStep,\n      activeId,\n      amountOutLeft,\n      protocolShare,\n      swapForY,\n      reserveX,\n      reserveY,\n      fee,\n    } = params;\n    const protocolShareBigInt = BigInt(protocolShare);\n    const binReserveOut = swapForY ? reserveY : reserveX;\n\n    if (binReserveOut.isZero()) {\n      return {\n        amountInWithFees: BigInt(0),\n        amountOut: BigInt(0),\n        feeAmount: BigInt(0),\n        protocolFeeAmount: BigInt(0),\n      };\n    }\n\n    const binReserveOutBigInt = BigInt(binReserveOut.toString());\n    const amountOut =\n      amountOutLeft > binReserveOutBigInt ? binReserveOutBigInt : amountOutLeft;\n\n    /** @notice assume base token and quote token have the same decimals to get the price */\n    const price = getPriceFromId(binStep, activeId, 9, 9);\n    // Encode price as bigint with SCALE_OFFSET\n    const priceScaled = BigInt(\n      Math.round(Number(price) * Math.pow(2, SCALE_OFFSET))\n    );\n\n    const amountInWithoutFee = this.calcAmountInByPrice(\n      amountOut,\n      priceScaled,\n      SCALE_OFFSET,\n      swapForY,\n      \"up\"\n    );\n\n    const feeAmount = this.getFeeForAmount(amountInWithoutFee, fee);\n    const amountIn = amountInWithoutFee + feeAmount;\n    const protocolFeeAmount = this.getProtocolFee(\n      feeAmount,\n      protocolShareBigInt\n    );\n\n    return {\n      amountInWithFees: amountIn,\n      amountOut,\n      feeAmount,\n      protocolFeeAmount,\n    };\n  }\n\n  public swapExactInput(params: {\n    binStep: number;\n    activeId: number;\n    amountInLeft: bigint;\n    fee: bigint;\n    protocolShare: number;\n    swapForY: boolean;\n    reserveX: BN;\n    reserveY: BN;\n  }) {\n    const {\n      binStep,\n      activeId,\n      amountInLeft,\n      protocolShare,\n      swapForY,\n      reserveX,\n      reserveY,\n      fee,\n    } = params;\n    const protocolShareBigInt = BigInt(protocolShare);\n    const binReserveOut = swapForY ? reserveY : reserveX;\n\n    if (binReserveOut.isZero()) {\n      return {\n        amountInWithFees: BigInt(0),\n        amountOut: BigInt(0),\n        feeAmount: BigInt(0),\n        protocolFeeAmount: BigInt(0),\n      };\n    }\n\n    const binReserveOutBigInt = BigInt(binReserveOut.toString());\n\n    /** @notice assume base token and quote token have the same decimals to get the price */\n    const price = getPriceFromId(binStep, activeId, 9, 9);\n    // Encode price as bigint with SCALE_OFFSET\n    const priceScaled = BigInt(\n      Math.round(Number(price) * Math.pow(2, SCALE_OFFSET))\n    );\n\n    // Calculate maxAmountIn (input needed to take all output in bin, before fee)\n    let maxAmountIn = this.calcAmountInByPrice(\n      binReserveOutBigInt,\n      priceScaled,\n      SCALE_OFFSET,\n      swapForY,\n      \"up\"\n    );\n\n    // Add fee to get total input needed (ceil)\n    const maxFeeAmount = this.getFeeForAmount(maxAmountIn, fee);\n    maxAmountIn += maxFeeAmount;\n\n    let amountOut = BigInt(0);\n    let amountIn = BigInt(0);\n    let feeAmount = BigInt(0);\n\n    if (amountInLeft >= maxAmountIn) {\n      feeAmount = maxFeeAmount;\n      amountIn = maxAmountIn - feeAmount;\n      amountOut = binReserveOutBigInt;\n    } else {\n      feeAmount = this.getFeeAmount(amountInLeft, fee);\n      amountIn = amountInLeft - feeAmount;\n      amountOut = this.calcAmountOutByPrice(\n        amountIn,\n        priceScaled,\n        SCALE_OFFSET,\n        swapForY,\n        \"down\"\n      );\n      if (amountOut > binReserveOutBigInt) {\n        amountOut = binReserveOutBigInt;\n      }\n    }\n\n    const protocolFeeAmount =\n      protocolShare > BigInt(0)\n        ? this.getProtocolFee(feeAmount, protocolShareBigInt)\n        : BigInt(0);\n\n    return {\n      amountInWithFees: amountIn + feeAmount,\n      amountOut,\n      feeAmount,\n      protocolFeeAmount,\n    };\n  }\n\n  public async updateReferences(pairInfo: Pair, activeId: number) {\n    this.referenceId = pairInfo.dynamicFeeParameters.idReference;\n    this.timeLastUpdated =\n      pairInfo.dynamicFeeParameters.timeLastUpdated.toNumber();\n    this.volatilityReference =\n      pairInfo.dynamicFeeParameters.volatilityReference;\n\n    const slot = await this.connection.getSlot(); // Lấy slot hiện tại\n    const blockTimeStamp = await this.connection.getBlockTime(slot);\n\n    if (blockTimeStamp) {\n      const timeDelta = blockTimeStamp - this.timeLastUpdated;\n\n      if (timeDelta > pairInfo.staticFeeParameters.filterPeriod) {\n        this.referenceId = activeId;\n\n        if (timeDelta >= pairInfo.staticFeeParameters.decayPeriod) {\n          this.volatilityReference = 0;\n        } else {\n          return this.updateVolatilityReference(pairInfo);\n        }\n      }\n\n      this.timeLastUpdated = blockTimeStamp;\n    }\n\n    return this.updateVolatilityAccumulator(pairInfo, activeId);\n  }\n\n  public updateVolatilityReference(pairInfo: Pair) {\n    this.volatilityReference =\n      (pairInfo.dynamicFeeParameters.volatilityAccumulator *\n        pairInfo.staticFeeParameters.reductionFactor) /\n      10_000;\n  }\n\n  public updateVolatilityAccumulator(pairInfo: Pair, activeId: number) {\n    const deltaId = Math.abs(activeId - this.referenceId);\n    const volatilityAccumulator = deltaId * 10000 + this.volatilityReference;\n\n    const maxVolatilityAccumulator =\n      pairInfo.staticFeeParameters.maxVolatilityAccumulator;\n\n    if (volatilityAccumulator > maxVolatilityAccumulator) {\n      this.volatilityAccumulator = maxVolatilityAccumulator;\n    } else {\n      this.volatilityAccumulator = volatilityAccumulator;\n    }\n  }\n\n  public getVariableFee(pairInfo: Pair): bigint {\n    const variableFeeControl = BigInt(\n      pairInfo.staticFeeParameters.variableFeeControl\n    );\n    if (variableFeeControl > BigInt(0)) {\n      const prod = BigInt(\n        Math.floor(this.volatilityAccumulator * pairInfo.binStep)\n      );\n      const variableFee =\n        (prod * prod * variableFeeControl +\n          BigInt(VARIABLE_FEE_PRECISION) -\n          BigInt(1)) /\n        BigInt(VARIABLE_FEE_PRECISION);\n      return variableFee;\n    }\n    return variableFeeControl;\n  }\n\n  public getBaseFee(binStep: number, baseFactor: number): bigint {\n    return BigInt(binStep) * BigInt(baseFactor) * BigInt(10);\n  }\n\n  public getFeeForAmount(amount: bigint, fee: bigint) {\n    const denominator = BigInt(PRECISION) - fee;\n    const feeForAmount = (amount * fee + denominator - BigInt(1)) / denominator;\n\n    return feeForAmount;\n  }\n\n  public getFeeAmount(amount: bigint, fee: bigint) {\n    const feeAmount =\n      (amount * fee + BigInt(PRECISION) - BigInt(1)) / BigInt(PRECISION);\n\n    return feeAmount;\n  }\n\n  public getProtocolFee(fee: bigint, protocolShare: bigint) {\n    const protocolFee = (fee * protocolShare) / BigInt(BASIS_POINT_MAX);\n\n    return protocolFee;\n  }\n\n  public getTotalFee(pairInfo: Pair) {\n    return (\n      this.getBaseFee(\n        pairInfo.binStep,\n        pairInfo.staticFeeParameters.baseFactor\n      ) + this.getVariableFee(pairInfo)\n    );\n  }\n\n  public moveActiveId(pairId: number, swapForY: boolean) {\n    if (swapForY) {\n      return pairId - 1;\n    } else {\n      return pairId + 1;\n    }\n  }\n\n  /**\n   * Calculates the input amount required for a swap based on the desired output amount and price.\n   *\n   * @param amountOut - The desired output amount as a bigint.\n   * @param priceScaled - The scaled price as a bigint.\n   * @param scaleOffset - The scaling factor used for price adjustments.\n   * @param swapForY - A boolean indicating the direction of the swap\n   * @param rounding - Specifies the rounding mode\n   * @returns The calculated input amount as a bigint.\n   */\n  private calcAmountInByPrice(\n    amountOut: bigint,\n    priceScaled: bigint,\n    scaleOffset: number,\n    swapForY: boolean,\n    rounding: \"up\" | \"down\"\n  ): bigint {\n    if (swapForY) {\n      // amountIn = (amountOut << scaleOffset) / priceScaled\n      return rounding === \"up\"\n        ? ((amountOut << BigInt(scaleOffset)) + priceScaled - BigInt(1)) /\n            priceScaled\n        : (amountOut << BigInt(scaleOffset)) / priceScaled;\n    } else {\n      // amountIn = (amountOut * priceScaled) >> scaleOffset\n      return rounding === \"up\"\n        ? (amountOut * priceScaled +\n            (BigInt(1) << BigInt(scaleOffset)) -\n            BigInt(1)) >>\n            BigInt(scaleOffset)\n        : (amountOut * priceScaled) >> BigInt(scaleOffset);\n    }\n  }\n\n  /**\n   * Calculates the output amount based on the input amount, price, and scaling factors.\n   *\n   * @param amountIn - The input amount as a bigint.\n   * @param priceScaled - The scaled price as a bigint.\n   * @param scaleOffset - The scaling offset as a number, used to adjust the precision.\n   * @param swapForY - A boolean indicating the direction of the swap\n   * @param rounding - The rounding mode to apply when calculating the output amount\n   * @returns The calculated output amount as a bigint.\n   */\n  private calcAmountOutByPrice(\n    amountIn: bigint,\n    priceScaled: bigint,\n    scaleOffset: number,\n    swapForY: boolean,\n    rounding: \"up\" | \"down\"\n  ): bigint {\n    if (swapForY) {\n      // price = (Y / X) & swapForY => amountOut = amountIn * price\n      // amountOut = (amountIn * priceScaled) >> scaleOffset\n      return rounding === \"up\"\n        ? (amountIn * priceScaled +\n            (BigInt(1) << BigInt(scaleOffset)) -\n            BigInt(1)) >>\n            BigInt(scaleOffset)\n        : (amountIn * priceScaled) >> BigInt(scaleOffset);\n    } else {\n      // price = (X / Y) & !swapForY => amountOut = amountIn / price\n      // amountOut = (amountIn << scaleOffset) / priceScaled\n      return rounding === \"up\"\n        ? ((amountIn << BigInt(scaleOffset)) + priceScaled - BigInt(1)) /\n            priceScaled\n        : (amountIn << BigInt(scaleOffset)) / priceScaled;\n    }\n  }\n}\n","export const divRem = (numerator: number, denominator: number) => {\n  if (denominator === 0) {\n    throw new Error('Division by zero') // Xử lý lỗi chia cho 0\n  }\n\n  // Tính thương và phần dư\n  const quotient = numerator / denominator // Thương\n  const remainder = numerator % denominator // Phần dư\n\n  return [quotient, remainder] // Trả về mảng chứa thương và phần dư\n}\n\n/// (x * y) / denominator\nexport const mulDiv = (\n  x: number,\n  y: number,\n  denominator: number,\n  rounding: 'up' | 'down'\n) => {\n  const prod = x * y\n\n  if (rounding === 'up') {\n    return Math.floor((prod + denominator - 1) / denominator)\n  }\n\n  if (rounding === 'down') {\n    const [quotient] = divRem(prod, denominator)\n    return quotient\n  }\n}\n\nexport const mulShr = (\n  x: number,\n  y: number,\n  offset: number,\n  rounding: 'up' | 'down'\n) => {\n  const denominator = 1 << offset\n  return mulDiv(x, y, denominator, rounding)\n}\n\n// (x << offset) / y\nexport const shlDiv = (\n  x: number,\n  y: number,\n  offset: number,\n  rounding: 'up' | 'down'\n) => {\n  const scale = 1 << offset\n  return mulDiv(x, scale, y, rounding)\n}\n","import { Connection } from \"@solana/web3.js\";\nimport {\n  ACTIVE_ID,\n  BIN_ARRAY_SIZE,\n  FIXED_LENGTH,\n  MAX_BASIS_POINTS,\n  UNIT_PRICE_DEFAULT,\n} from \"../constants/config\";\nimport { Distribution, LiquidityShape, PositionInfo } from \"../types/services\";\nimport { divRem } from \"./math\";\n\ninterface CreateLiquidityDistributionParams {\n  shape: LiquidityShape;\n  binRange: [number, number];\n}\n\nconst getCurveDistributionFromBinRange = (binRange: number[]) => {\n  const activeId = 0;\n\n  // init return values\n  let deltaIds: number[] = [],\n    _distributionX: number[] = [],\n    _distributionY: number[] = [];\n\n  // get sigma based on radius R\n  const getSigma = (_R: number) => {\n    const factor =\n      _R >= 20\n        ? 2.0\n        : _R >= 15\n        ? 1.8\n        : _R >= 10\n        ? 1.7\n        : _R >= 8\n        ? 1.6\n        : _R >= 6\n        ? 1.5\n        : _R >= 5\n        ? 1.4\n        : 1.0;\n    return _R / factor;\n  };\n\n  // range only includes B tokens (Y tokens)\n  if (binRange[1] < activeId) {\n    const negDelta = binRange[1] - binRange[0] + 1;\n    const negativeDeltaIds = Array.from(Array(activeId - binRange[0]).keys())\n      .reverse()\n      .slice(0, negDelta)\n      .map((el) => -1 * (el + 1));\n\n    deltaIds = [...negativeDeltaIds];\n    if (activeId === binRange[1]) {\n      deltaIds.push(0);\n    }\n\n    _distributionX = [...Array(deltaIds.length).fill(0)];\n\n    // radius is num of bins\n    const R = deltaIds.length - 1;\n    const sigma = getSigma(R);\n\n    // A = 1 / (sigma  * sqrt(2 * pi))\n    const A = 1 / (Math.sqrt(Math.PI * 2) * sigma);\n\n    // dist = 2 * A * exp(-0.5 * (r /sigma) ^ 2)\n    // r is distance from right-most bin\n    _distributionY = deltaIds.map(\n      (_, ind) => 2 * A * Math.exp(-0.5 * Math.pow((R - ind) / sigma, 2))\n    );\n  }\n\n  // range only includes A tokens (X tokens)\n  else if (activeId < binRange[0]) {\n    const posDelta = binRange[1] - binRange[0] + 1;\n    const positiveDeltaIds = Array.from(Array(binRange[1] - activeId).keys())\n      .reverse()\n      .slice(0, posDelta)\n      .reverse()\n      .map((el) => el + 1);\n\n    deltaIds = [...positiveDeltaIds];\n    if (activeId === binRange[0]) {\n      deltaIds.unshift(0);\n    }\n\n    _distributionY = [...Array(deltaIds.length).fill(0)];\n\n    // radius is num of bins\n    const R = deltaIds.length - 1;\n    const sigma = getSigma(R);\n\n    // A = 1 / (sigma  * sqrt(2 * pi))\n    const A = 1 / (Math.sqrt(Math.PI * 2) * sigma);\n\n    // dist = 2 * A * exp(-0.5 * (r /sigma) ^ 2)\n    // r is distance from left-most bin\n    _distributionX = deltaIds.map(\n      (_, ind) => 2 * A * Math.exp(-0.5 * Math.pow(ind / sigma, 2))\n    );\n  }\n\n  // range includes both X and Y tokens\n  else {\n    const negDelta = activeId - binRange[0];\n    const posDelta = binRange[1] - activeId;\n\n    const negativeDeltaIds = Array.from(Array(negDelta).keys())\n      .reverse()\n      .map((el) => -1 * (el + 1));\n    const positiveDeltaIds = Array.from(Array(posDelta).keys()).map(\n      (el) => el + 1\n    );\n    deltaIds = [...negativeDeltaIds, 0, ...positiveDeltaIds];\n\n    // radius is num of bins\n    const RX = positiveDeltaIds.length;\n    const sigmaX = getSigma(RX);\n\n    // A = 1 / (sigma  * sqrt(2 * pi))\n    const AX = RX === 0 ? 1 : 1 / (Math.sqrt(Math.PI * 2) * sigmaX);\n\n    // dist = 2 * A * exp(-0.5 * (r /sigma) ^ 2)\n    // r is distance from 0\n    _distributionX = [\n      ...Array(negDelta).fill(0),\n      AX,\n      ...positiveDeltaIds.map(\n        (_, ind) => 2 * AX * Math.exp(-0.5 * Math.pow((ind + 1) / sigmaX, 2))\n      ),\n    ];\n\n    // radius is num of bins\n    const RY = negativeDeltaIds.length;\n    const sigmaY = getSigma(RY);\n\n    // A = 1 / (sigma  * sqrt(2 * pi))\n    const AY = RY === 0 ? 1 : 1 / (Math.sqrt(Math.PI * 2) * sigmaY);\n\n    // dist = 2 * A * exp(-0.5 * (r /sigma) ^ 2)\n    // r is distance from 0\n    _distributionY = [\n      ...negativeDeltaIds.map(\n        (_, ind) => 2 * AY * Math.exp(-0.5 * Math.pow((RY - ind) / sigmaY, 2))\n      ),\n      AY,\n      ...Array(posDelta).fill(0),\n    ];\n  }\n\n  let liquidityDistributionX = _distributionX.map((i) =>\n    Math.floor(i * MAX_BASIS_POINTS)\n  );\n\n  let liquidityDistributionY = _distributionY.map((i) =>\n    Math.floor(i * MAX_BASIS_POINTS)\n  );\n\n  // check totalX and totalY with MAX_BASIS_POINTS\n  const totalX = liquidityDistributionX.reduce((acc, val) => acc + val, 0);\n\n  const totalY = liquidityDistributionY.reduce((acc, val) => acc + val, 0);\n\n  if (totalX > 0 && totalX !== MAX_BASIS_POINTS) {\n    const isOverflow = totalX > MAX_BASIS_POINTS;\n    const overPoint = Math.abs(totalX - MAX_BASIS_POINTS);\n    const numberBins = liquidityDistributionX.filter((i) => i > 0).length;\n    const [quotient, remainder] = divRem(overPoint, numberBins);\n\n    liquidityDistributionX = liquidityDistributionX.map((i) => {\n      if (i === 0) return i;\n      return isOverflow ? i - Math.floor(quotient) : i + Math.floor(quotient);\n    });\n    let remainderLeft = remainder;\n    if (remainder > 0) {\n      if (!isOverflow) {\n        liquidityDistributionX = liquidityDistributionX.map((i) => {\n          if (i === 0) return i;\n          if (remainderLeft > 0) {\n            remainderLeft--;\n            return i + 1;\n          }\n          return i;\n        });\n      } else {\n        const reverseLiquid = liquidityDistributionX.reverse().map((i) => {\n          if (i === 0) return i;\n          if (remainderLeft > 0) {\n            remainderLeft--;\n            return i - 1;\n          }\n          return i;\n        });\n        liquidityDistributionX = reverseLiquid.reverse();\n      }\n    }\n  }\n\n  if (totalY > 0 && totalY !== MAX_BASIS_POINTS) {\n    const isOverflow = totalY > MAX_BASIS_POINTS;\n    const overPoint = Math.abs(totalY - MAX_BASIS_POINTS);\n    const numberBins = liquidityDistributionY.filter((i) => i > 0).length;\n    const [quotient, remainder] = divRem(overPoint, numberBins);\n\n    liquidityDistributionY = liquidityDistributionY.map((i, idx) => {\n      if (i === 0) return i;\n      if (remainder > 0 && idx === numberBins - 1) {\n        return isOverflow\n          ? i - Math.floor(quotient) - remainder\n          : i + Math.floor(quotient) + remainder;\n      }\n      return isOverflow ? i - Math.floor(quotient) : i + Math.floor(quotient);\n    });\n  }\n\n  //return\n  const liquidityDistribution = deltaIds.map((i, idx) => {\n    return {\n      relativeBinId: i,\n      distributionX: liquidityDistributionX[idx],\n      distributionY: liquidityDistributionY[idx],\n    };\n  });\n  return liquidityDistribution;\n};\n\nexport function createUniformDistribution(\n  params: CreateLiquidityDistributionParams\n): Distribution[] {\n  const { shape, binRange } = params;\n\n  const [minBin, maxBin] = binRange;\n\n  if (minBin > maxBin) {\n    throw new Error(\"Invalid binRange: minBin must be <= maxBin\");\n  }\n\n  const relativeIds = Array.from(\n    { length: maxBin - minBin + 1 },\n    (_, i) => i + minBin\n  );\n\n  if (shape === LiquidityShape.Spot) {\n    const totalArrayLength = maxBin - minBin + 1;\n    const findActiveBinIndex = relativeIds.findIndex((item) => item === 0);\n\n    if (findActiveBinIndex === -1) {\n      const isOnlyX = minBin > 0;\n      const isOnlyY = maxBin < 0;\n      const distribution = MAX_BASIS_POINTS / totalArrayLength;\n\n      return relativeIds.map((x) => ({\n        relativeBinId: x,\n        distributionX: isOnlyX ? distribution : 0,\n        distributionY: isOnlyY ? distribution : 0,\n      }));\n    }\n\n    const totalYBin = Math.abs(minBin);\n    const totalXBin = maxBin;\n\n    const distributionX = Array.from({ length: totalArrayLength }, (_, i) => {\n      if (i < findActiveBinIndex) return 0;\n      const pricePerBin = Math.floor(\n        (2 * MAX_BASIS_POINTS) / (totalXBin * 2 + 1)\n      );\n      if (i === findActiveBinIndex)\n        return MAX_BASIS_POINTS - pricePerBin * totalXBin;\n      return pricePerBin;\n    });\n\n    const distributionY = Array.from({ length: totalArrayLength }, (_, i) => {\n      if (i > findActiveBinIndex) return 0;\n      const pricePerBin = Math.floor(\n        (2 * MAX_BASIS_POINTS) / (totalYBin * 2 + 1)\n      );\n      if (i === findActiveBinIndex)\n        return MAX_BASIS_POINTS - pricePerBin * totalYBin;\n      return pricePerBin;\n    });\n\n    return relativeIds.map((x, i) => ({\n      relativeBinId: x,\n      distributionX: distributionX[i],\n      distributionY: distributionY[i],\n    }));\n  }\n\n  if (shape === LiquidityShape.Curve) {\n    return getCurveDistributionFromBinRange(binRange);\n  }\n\n  if (shape === LiquidityShape.BidAsk) {\n    //MAX_BASIS_POINTS = 10000\n    //binRange = [min, max]\n    //activeid = 0\n\n    const activeBin = 0;\n\n    let _distributionY: number[] = [];\n\n    let _distributionX: number[] = [];\n\n    let deltaIds: number[] = [];\n\n    if (maxBin < activeBin) {\n      const negDelta = maxBin - minBin + 1;\n      const negativeDeltaIds = Array.from(Array(activeBin - minBin).keys())\n        .reverse()\n        .slice(0, negDelta)\n        .map((el) => -1 * (el + 1));\n\n      deltaIds = [...negativeDeltaIds];\n\n      _distributionX = [...Array(deltaIds.length).fill(0)];\n\n      // dist = 2/R^2 * r\n      const rSquare = Math.pow(deltaIds[0], 2);\n      _distributionY = deltaIds.map((i) => ((i - 1) * -2) / rSquare);\n    } else if (activeBin < minBin) {\n      const posDelta = binRange[1] - binRange[0] + 1;\n      const positiveDeltaIds = Array.from(Array(binRange[1] - activeBin).keys())\n        .reverse()\n        .slice(0, posDelta)\n        .reverse()\n        .map((el) => el + 1);\n\n      deltaIds = [...positiveDeltaIds];\n      // dist = 2/R^2 * i\n      const rSquare = Math.pow(deltaIds[deltaIds.length - 1], 2);\n      _distributionX = deltaIds.map((i) => ((i + 1) * 2) / rSquare);\n      _distributionY = [...Array(deltaIds.length).fill(0)];\n    } else {\n      const negDelta = activeBin - binRange[0];\n      const posDelta = binRange[1] - activeBin;\n\n      const negativeDeltaIds = Array.from(Array(negDelta).keys())\n        .reverse()\n        .map((el) => -1 * (el + 1));\n      const positiveDeltaIds = Array.from(Array(posDelta).keys()).map(\n        (el) => el + 1\n      );\n\n      deltaIds = [...negativeDeltaIds, 0, ...positiveDeltaIds];\n\n      // dist = 1/R^2 * i\n      const rSquareX =\n        positiveDeltaIds.length === 0\n          ? 1\n          : positiveDeltaIds.length === 1 && positiveDeltaIds[0] === 1\n          ? 3\n          : Math.pow(positiveDeltaIds[positiveDeltaIds.length - 1], 2);\n      _distributionX = [\n        ...Array(negDelta).fill(0),\n        1 / rSquareX,\n        ...positiveDeltaIds.map((i) => (i + 1) / rSquareX),\n      ];\n\n      // dist = 1/R^2 * i\n      const rSquareY =\n        negativeDeltaIds.length === 0\n          ? 1\n          : negativeDeltaIds[0] === -1\n          ? 3\n          : Math.pow(negativeDeltaIds[0], 2);\n      _distributionY = [\n        ...negativeDeltaIds.map((i) => (-1 * (i - 1)) / rSquareY),\n        1 / rSquareY,\n        ...Array(posDelta).fill(0),\n      ];\n    }\n\n    let liquidityDistributionX = _distributionX.map((i) => {\n      return Math.floor(i * MAX_BASIS_POINTS);\n    });\n\n    let liquidityDistributionY = _distributionY.map((i) => {\n      return Math.floor(i * MAX_BASIS_POINTS);\n    });\n\n    // check totalX and totalY with MAX_BASIS_POINTS\n    const totalX = liquidityDistributionX.reduce((acc, val) => acc + val, 0);\n\n    const totalY = liquidityDistributionY.reduce((acc, val) => acc + val, 0);\n\n    if (totalX > 0 && totalX !== MAX_BASIS_POINTS) {\n      const isOverflow = totalX > MAX_BASIS_POINTS;\n      const overPoint = Math.abs(totalX - MAX_BASIS_POINTS);\n      const numberBins = liquidityDistributionX.filter((i) => i > 0).length;\n      const [quotient, remainder] = divRem(overPoint, numberBins);\n\n      liquidityDistributionX = liquidityDistributionX.map((i) => {\n        if (i === 0) return i;\n        return isOverflow ? i - Math.floor(quotient) : i + Math.floor(quotient);\n      });\n      let remainderLeft = remainder;\n      if (remainder > 0) {\n        if (!isOverflow) {\n          liquidityDistributionX = liquidityDistributionX.map((i) => {\n            if (i === 0) return i;\n            if (remainderLeft > 0) {\n              remainderLeft--;\n              return i + 1;\n            }\n            return i;\n          });\n        } else {\n          const reverseLiquid = liquidityDistributionX.reverse().map((i) => {\n            if (i === 0) return i;\n            if (remainderLeft > 0) {\n              remainderLeft--;\n              return i - 1;\n            }\n            return i;\n          });\n          liquidityDistributionX = reverseLiquid.reverse();\n        }\n      }\n    }\n\n    if (totalY > 0 && totalY !== MAX_BASIS_POINTS) {\n      const isOverflow = totalY > MAX_BASIS_POINTS;\n      const overPoint = Math.abs(totalY - MAX_BASIS_POINTS);\n      const numberBins = liquidityDistributionY.filter((i) => i > 0).length;\n      const [quotient, remainder] = divRem(overPoint, numberBins);\n\n      liquidityDistributionY = liquidityDistributionY.map((i, idx) => {\n        if (i === 0) return i;\n        if (remainder > 0 && idx === 0) {\n          return isOverflow\n            ? i - Math.floor(quotient) - remainder\n            : i + Math.floor(quotient) + remainder;\n        }\n        return isOverflow ? i - Math.floor(quotient) : i + Math.floor(quotient);\n      });\n    }\n\n    const liquidityDistribution = deltaIds.map((i, idx) => {\n      return {\n        relativeBinId: i,\n        distributionX: liquidityDistributionX[idx],\n        distributionY: liquidityDistributionY[idx],\n      };\n    });\n\n    return liquidityDistribution;\n  }\n\n  throw new Error(`Unsupported liquidity shape: ${shape}`);\n}\n\nexport const getMaxPosition = (range: [number, number], activeId: number) => {\n  const leftRangeIndex = Math.floor(activeId / 16);\n  const rangeFromIndex = [\n    Math.floor((activeId + range[0]) / 16),\n    Math.floor((activeId + range[1]) / 16),\n  ];\n\n  const positions = Array.from(\n    { length: rangeFromIndex[1] - rangeFromIndex[0] + 1 },\n    (_, index) => {\n      return rangeFromIndex[0] + index - leftRangeIndex;\n    }\n  );\n\n  return positions;\n};\n\nexport const getMaxBinArray = (range: [number, number], activeId: number) => {\n  const arrayIndex = [activeId + range[0], activeId + range[1]];\n\n  const binIndex = [\n    Math.floor(arrayIndex[0] / BIN_ARRAY_SIZE),\n    Math.floor(arrayIndex[1] / BIN_ARRAY_SIZE),\n  ];\n\n  // check if binArrayLower, binArrayUpper is the same\n  if (binIndex[1] === binIndex[0]) {\n    binIndex[1] += 1;\n  }\n\n  const binArrayIndexLen = binIndex[1] - binIndex[0] - 1;\n  const binArrayList = Array.from({ length: binArrayIndexLen + 1 }, (_, i) => {\n    const index = binIndex[0] + i * 2;\n    return {\n      binArrayLowerIndex: index,\n      binArrayUpperIndex: index + 1,\n    };\n  });\n\n  return binArrayList;\n};\n\nexport const getBinRange = (index: number, activeId: number) => {\n  const firstBinId = Math.floor(activeId % 16);\n\n  const firstArray = [-firstBinId, -firstBinId + 16 - 1];\n  const range = [\n    firstArray[0] + index * FIXED_LENGTH,\n    firstArray[1] + index * FIXED_LENGTH,\n  ];\n  return {\n    range,\n    binLower: activeId + range[0],\n    binUpper: activeId + range[1] - 1,\n  };\n};\n\nexport const findPosition = (index: number, activeBin = ACTIVE_ID) => (\n  position: PositionInfo\n) => {\n  const { binLower, binUpper } = getBinRange(index, activeBin);\n\n  return position.lowerBinId <= binLower && position.upperBinId >= binUpper;\n};\n\nexport const getGasPrice = async (connection: Connection): Promise<number> => {\n  const buffNum = 100;\n  try {\n    return await new Promise(async (resolve) => {\n      const timeout = setTimeout(() => {\n        resolve(UNIT_PRICE_DEFAULT * buffNum);\n      }, 2000);\n      const getPriority = await connection.getRecentPrioritizationFees();\n      const currentFee = getPriority\n        .filter((fee) => fee?.prioritizationFee > 0)\n        .map((fee) => fee?.prioritizationFee);\n      clearTimeout(timeout);\n      const unitPrice =\n        currentFee.length > 0\n          ? Math.max(...currentFee, UNIT_PRICE_DEFAULT)\n          : UNIT_PRICE_DEFAULT;\n      resolve(unitPrice * buffNum);\n    });\n  } catch {\n    return UNIT_PRICE_DEFAULT * buffNum;\n  }\n};","import {\n  ComputeBudgetProgram,\n  PublicKey,\n  SystemProgram,\n  Transaction,\n  TransactionMessage,\n} from \"@solana/web3.js\";\nimport { ILiquidityBookConfig, PairAccount, PoolMetadata } from \"../types\";\nimport {\n  BIN_ARRAY_INDEX,\n  BIN_ARRAY_SIZE,\n  CCU_LIMIT,\n  FIXED_LENGTH,\n  MAX_BASIS_POINTS,\n  PRECISION,\n  SCALE_OFFSET,\n  UNIT_PRICE_DEFAULT,\n  WRAP_SOL_ADDRESS,\n} from \"../constants/config\";\nimport { BN, utils } from \"@coral-xyz/anchor\";\nimport * as spl from \"@solana/spl-token\";\nimport { LiquidityBookAbstract } from \"../interface/liquidityBookAbstract\";\nimport { getProgram } from \"./getProgram\";\nimport { Buffer } from \"buffer\";\nimport cloneDeep from \"lodash/cloneDeep\";\nimport {\n  AddLiquidityIntoPositionParams,\n  CreatePairWithConfigParams,\n  CreatePositionParams,\n  GetBinArrayParams,\n  GetBinsArrayInfoParams,\n  GetBinsReserveParams,\n  GetBinsReserveResponse,\n  GetTokenOutputParams,\n  GetTokenOutputResponse,\n  GetUserVaultInfoParams,\n  Pair,\n  RemoveMultipleLiquidityParams,\n  RemoveMultipleLiquidityResponse,\n  ReserveParams,\n  SwapParams,\n  UserPositionsParams,\n} from \"../types/services\";\nimport { LBSwapService } from \"./swap\";\nimport bigDecimal from \"js-big-decimal\";\nimport { getIdFromPrice, getPriceFromId } from \"../utils/price\";\nimport { mulDiv, mulShr, shlDiv } from \"../utils/math\";\nimport LiquidityBookIDL from \"../constants/idl/liquidity_book.json\";\nimport { bs58 } from \"@coral-xyz/anchor/dist/cjs/utils/bytes\";\nimport { getGasPrice } from \"../utils\";\nimport { pairAccountToPair } from \"../utils/typeConverters\";\n\nexport class LiquidityBookServices extends LiquidityBookAbstract {\n  bufferGas?: number;\n  constructor(config: ILiquidityBookConfig) {\n    super(config);\n  }\n\n  get lbConfig() {\n    return new PublicKey(\"BqPmjcPbAwE7mH23BY8q8VUEN4LSjhLUv41W87GsXVn8\");\n  }\n\n  get hooksConfig() {\n    return new PublicKey(\"DgW5ARD9sU3W6SJqtyJSH3QPivxWt7EMvjER9hfFKWXF\");\n  }\n\n  public async getPairAccount(pair: PublicKey) {\n    //@ts-ignore\n    return await this.lbProgram.account.pair.fetch(pair) as PairAccount;\n  }\n\n  public async getPositionAccount(position: PublicKey) {\n    //@ts-ignore\n    return await this.lbProgram.account.position.fetch(position);\n  }\n\n  async getBinArray(params: GetBinArrayParams) {\n    const { binArrayIndex, pair, payer, transaction } = params;\n\n    const binArray = PublicKey.findProgramAddressSync(\n      [\n        Buffer.from(utils.bytes.utf8.encode(\"bin_array\")),\n        pair.toBuffer(),\n        new BN(binArrayIndex).toArrayLike(Buffer, \"le\", 4),\n      ],\n      this.lbProgram.programId\n    )[0];\n\n    if (transaction && payer) {\n      const binArrayInfo = await this.connection.getAccountInfo(binArray);\n\n      if (!binArrayInfo) {\n        const initializebinArrayConfigTx = await this.lbProgram.methods\n          .initializeBinArray(binArrayIndex)\n          .accountsPartial({ pair: pair, binArray: binArray, user: payer })\n          .instruction();\n        transaction.add(initializebinArrayConfigTx);\n      }\n    }\n\n    return binArray;\n  }\n\n  public async getBinArrayInfo(params: GetBinsArrayInfoParams) {\n    const { binArrayIndex, pair, payer } = params;\n    let resultIndex = binArrayIndex;\n    let result = [];\n\n    const binArray = await this.getBinArray({\n      binArrayIndex,\n      pair,\n      payer,\n    });\n    //@ts-ignore\n    const { bins } = await this.lbProgram.account.binArray.fetch(binArray);\n    try {\n      const binArrayOther = await this.getBinArray({\n        binArrayIndex: binArrayIndex + 1,\n        pair,\n        payer,\n      });\n      //@ts-ignore\n      const res = await this.lbProgram.account.binArray.fetch(binArrayOther);\n\n      result = [...bins, ...res.bins];\n    } catch {\n      const binArrayOther = await this.getBinArray({\n        binArrayIndex: binArrayIndex - 1,\n        pair,\n        payer,\n      });\n      //@ts-ignore\n      const res = await this.lbProgram.account.binArray.fetch(binArrayOther);\n      result = [...res.bins, ...bins];\n      resultIndex -= 1;\n    }\n\n    return { bins: result, resultIndex };\n  }\n\n  public async getBinsReserveInformation(\n    params: GetBinsReserveParams\n  ): Promise<GetBinsReserveResponse[]> {\n    const { position, pair, payer } = params;\n    const positionInfo = await this.getPositionAccount(position);\n    const firstBinId = positionInfo.lowerBinId;\n    const binArrayIndex = Math.floor(firstBinId / BIN_ARRAY_SIZE);\n\n    const { bins, resultIndex } = await this.getBinArrayInfo({\n      binArrayIndex,\n      pair,\n      payer,\n    });\n\n    const firstBinIndex = resultIndex * BIN_ARRAY_SIZE;\n    const binIds = Array.from(\n      { length: positionInfo.upperBinId - firstBinId + 1 },\n      (_, i) => firstBinId - firstBinIndex + i\n    );\n\n    const reserveXY = binIds.map((binId: number, index: number) => {\n      const liquidityShare = positionInfo.liquidityShares[index].toString();\n      const activeBin = bins[binId];\n\n      if (activeBin) {\n        const totalReserveX = +BigInt(activeBin.reserveX).toString();\n\n        const totalReserveY = +BigInt(activeBin.reserveY).toString();\n\n        const totalSupply = +BigInt(activeBin.totalSupply).toString();\n\n        const reserveX =\n          Number(totalReserveX) > 0\n            ? mulDiv(\n                Number(liquidityShare),\n                Number(totalReserveX),\n                Number(totalSupply),\n                \"down\"\n              )\n            : 0;\n\n        const reserveY =\n          Number(totalReserveY) > 0\n            ? mulDiv(\n                Number(liquidityShare),\n                Number(totalReserveY),\n                Number(totalSupply),\n                \"down\"\n              )\n            : 0;\n\n        return {\n          reserveX: reserveX || 0,\n          reserveY: reserveY || 0,\n          totalSupply: +BigInt(activeBin.totalSupply).toString(),\n          binId: firstBinId + index,\n          binPosistion: binId,\n          liquidityShare: positionInfo.liquidityShares[index],\n        };\n      }\n      return {\n        reserveX: 0,\n        reserveY: 0,\n        totalSupply: \"0\",\n        binId: firstBinId + index,\n        binPosistion: binId,\n        liquidityShare: liquidityShare,\n      };\n    });\n\n    return reserveXY;\n  }\n\n  public async createPairWithConfig(params: CreatePairWithConfigParams) {\n    const { tokenBase, tokenQuote, binStep, ratePrice, payer } = params;\n\n    const tokenX = new PublicKey(tokenBase.mintAddress);\n    const tokenY = new PublicKey(tokenQuote.mintAddress);\n\n    const id = getIdFromPrice(\n      ratePrice || 1,\n      binStep,\n      tokenBase.decimal,\n      tokenQuote.decimal\n    );\n\n    let binArrayIndex = id / BIN_ARRAY_SIZE;\n\n    if (id % BIN_ARRAY_SIZE < BIN_ARRAY_SIZE / 2) {\n      binArrayIndex -= 1;\n    }\n\n    const tx = new Transaction();\n\n    const binStepConfig = PublicKey.findProgramAddressSync(\n      [\n        Buffer.from(utils.bytes.utf8.encode(\"bin_step_config\")),\n        this.lbConfig!.toBuffer(),\n        new Uint8Array([binStep]),\n      ],\n      this.lbProgram.programId\n    )[0];\n\n    const quoteAssetBadge = PublicKey.findProgramAddressSync(\n      [\n        Buffer.from(utils.bytes.utf8.encode(\"quote_asset_badge\")),\n        this.lbConfig!.toBuffer(),\n        tokenY.toBuffer(),\n      ],\n      this.lbProgram.programId\n    )[0];\n\n    const pair = PublicKey.findProgramAddressSync(\n      [\n        Buffer.from(utils.bytes.utf8.encode(\"pair\")),\n        this.lbConfig!.toBuffer(),\n        tokenX.toBuffer(),\n        tokenY.toBuffer(),\n        new Uint8Array([binStep]),\n      ],\n      this.lbProgram.programId\n    )[0];\n\n    const initializePairConfigTx = await this.lbProgram.methods\n      .initializePair(id)\n      .accountsPartial({\n        liquidityBookConfig: this.lbConfig!,\n        binStepConfig: binStepConfig,\n        quoteAssetBadge: quoteAssetBadge,\n        pair: pair,\n        tokenMintX: tokenX,\n        tokenMintY: tokenY,\n        user: payer,\n      })\n      .instruction();\n\n    tx.add(initializePairConfigTx);\n\n    const binArrayLower = PublicKey.findProgramAddressSync(\n      [\n        Buffer.from(utils.bytes.utf8.encode(\"bin_array\")),\n        pair.toBuffer(),\n        new BN(binArrayIndex).toArrayLike(Buffer, \"le\", 4),\n      ],\n      this.lbProgram.programId\n    )[0];\n\n    const binArrayUpper = PublicKey.findProgramAddressSync(\n      [\n        Buffer.from(utils.bytes.utf8.encode(\"bin_array\")),\n        pair.toBuffer(),\n        new BN(Number(binArrayIndex) + 1).toArrayLike(Buffer, \"le\", 4),\n      ],\n      this.lbProgram.programId\n    )[0];\n\n    const initializeBinArrayLowerConfigTx = await this.lbProgram.methods\n      .initializeBinArray(binArrayIndex)\n      .accountsPartial({ pair: pair, binArray: binArrayLower, user: payer })\n      .instruction();\n\n    tx.add(initializeBinArrayLowerConfigTx);\n\n    const initializeBinArrayUpperConfigTx = await this.lbProgram.methods\n      .initializeBinArray(new BN(binArrayIndex + 1))\n      .accountsPartial({ pair: pair, binArray: binArrayUpper, user: payer })\n      .instruction();\n\n    tx.add(initializeBinArrayUpperConfigTx);\n\n    return {\n      tx,\n      pair: pair.toString(),\n      binArrayLower: binArrayLower.toString(),\n      binArrayUpper: binArrayUpper.toString(),\n      hooksConfig: this.hooksConfig.toString(),\n      activeBin: Number(id),\n    };\n  }\n\n  async createPosition(params: CreatePositionParams) {\n    const {\n      payer,\n      relativeBinIdLeft,\n      relativeBinIdRight,\n      pair,\n      binArrayIndex,\n      positionMint,\n      transaction,\n    } = params;\n\n    const position = PublicKey.findProgramAddressSync(\n      [\n        Buffer.from(utils.bytes.utf8.encode(\"position\")),\n        positionMint.toBuffer(),\n      ],\n      this.lbProgram.programId\n    )[0];\n\n    const positionVault = spl.getAssociatedTokenAddressSync(\n      positionMint,\n      payer,\n      true,\n      spl.TOKEN_2022_PROGRAM_ID\n    );\n\n    await this.getBinArray({\n      binArrayIndex,\n      pair,\n      payer,\n    });\n\n    await this.getBinArray({\n      binArrayIndex: binArrayIndex + 1,\n      pair,\n      payer,\n    });\n\n    const initializePositionTx = await this.lbProgram.methods\n      .createPosition(new BN(relativeBinIdLeft), new BN(relativeBinIdRight))\n      .accountsPartial({\n        pair,\n        position: position,\n        positionMint: positionMint,\n        positionTokenAccount: positionVault,\n        tokenProgram: spl.TOKEN_2022_PROGRAM_ID,\n        user: payer,\n      })\n      .instruction();\n\n    transaction.add(initializePositionTx);\n\n    return { position: position.toString() };\n  }\n\n  async addLiquidityIntoPosition(params: AddLiquidityIntoPositionParams) {\n    const {\n      positionMint,\n      payer,\n      pair,\n      binArrayLower,\n      binArrayUpper,\n      transaction,\n      liquidityDistribution,\n      amountX,\n      amountY,\n    } = params;\n\n    const pairInfo = await this.getPairAccount(pair);\n\n    const tokenProgramX = await getProgram(\n      pairInfo.tokenMintX,\n      this.connection\n    );\n    const tokenProgramY = await getProgram(\n      pairInfo.tokenMintY,\n      this.connection\n    );\n\n    const associatedPairVaultX = await this.getPairVaultInfo({\n      tokenAddress: pairInfo.tokenMintX,\n      pair,\n    });\n\n    const associatedPairVaultY = await this.getPairVaultInfo({\n      tokenAddress: pairInfo.tokenMintY,\n      pair,\n    });\n\n    const associatedUserVaultX = await this.getUserVaultInfo({\n      tokenAddress: pairInfo.tokenMintX,\n      payer,\n    });\n\n    const associatedUserVaultY = await this.getUserVaultInfo({\n      tokenAddress: pairInfo.tokenMintY,\n      payer,\n    });\n\n    if (\n      pairInfo.tokenMintY.toString() === WRAP_SOL_ADDRESS ||\n      pairInfo.tokenMintX.toString() === WRAP_SOL_ADDRESS\n    ) {\n      const isNativeY = pairInfo.tokenMintY.toString() === WRAP_SOL_ADDRESS;\n\n      const totalAmount = isNativeY ? amountY : amountX;\n      const totalLiquid = liquidityDistribution.reduce((prev, curr) => {\n        const currAmount = isNativeY ? curr.distributionY : curr.distributionX;\n        return prev + currAmount;\n      }, 0);\n\n      if (totalLiquid) {\n        const amount = (totalLiquid * totalAmount) / MAX_BASIS_POINTS;\n\n        const associatedUserVault = isNativeY\n          ? associatedUserVaultY\n          : associatedUserVaultX;\n\n        transaction.add(\n          SystemProgram.transfer({\n            fromPubkey: payer,\n            toPubkey: associatedUserVault,\n            lamports: amount,\n          })\n        );\n        transaction.add(spl.createSyncNativeInstruction(associatedUserVault));\n      }\n    }\n\n    const unitSPrice = await getGasPrice(this.connection).catch(\n      () => undefined\n    );\n\n    const unitPrice = Math.max(\n      Number(unitSPrice) ?? 0,\n      UNIT_PRICE_DEFAULT * (this.bufferGas ?? 1)\n    );\n\n    const hook = PublicKey.findProgramAddressSync(\n      [\n        Buffer.from(utils.bytes.utf8.encode(\"hook\")),\n        this.hooksConfig.toBuffer(),\n        pair.toBuffer(),\n      ],\n      this.hooksProgram.programId\n    )[0];\n\n    const position = PublicKey.findProgramAddressSync(\n      [\n        Buffer.from(utils.bytes.utf8.encode(\"position\")),\n        positionMint.toBuffer(),\n      ],\n      this.lbProgram.programId\n    )[0];\n\n    const positionVault = spl.getAssociatedTokenAddressSync(\n      positionMint,\n      payer,\n      true,\n      spl.TOKEN_2022_PROGRAM_ID\n    );\n\n    const addLiquidityInstructions = await this.lbProgram.methods\n      .increasePosition(new BN(amountX), new BN(amountY), liquidityDistribution)\n      .accountsPartial({\n        pair: pair,\n        position: position,\n        binArrayLower: binArrayLower,\n        binArrayUpper: binArrayUpper,\n        tokenVaultX: associatedPairVaultX,\n        tokenVaultY: associatedPairVaultY,\n        userVaultX: associatedUserVaultX,\n        userVaultY: associatedUserVaultY,\n        positionTokenAccount: positionVault,\n        tokenMintX: pairInfo.tokenMintX,\n        tokenMintY: pairInfo.tokenMintY,\n        tokenProgramX,\n        tokenProgramY,\n        positionTokenProgram: spl.TOKEN_2022_PROGRAM_ID,\n        hook: hook,\n        hooksProgram: this.hooksProgram.programId,\n        user: payer,\n        positionMint,\n      })\n      .remainingAccounts([\n        { pubkey: pair, isWritable: false, isSigner: false },\n        { pubkey: binArrayLower, isWritable: false, isSigner: false },\n        { pubkey: binArrayUpper, isWritable: false, isSigner: false },\n      ])\n      .instruction();\n\n    transaction.add(\n      ComputeBudgetProgram.setComputeUnitLimit({\n        units: CCU_LIMIT,\n      })\n    );\n    transaction.add(\n      ComputeBudgetProgram.setComputeUnitPrice({\n        microLamports: unitPrice,\n      })\n    );\n\n    transaction.add(addLiquidityInstructions);\n  }\n\n  public async removeMultipleLiquidity(\n    params: RemoveMultipleLiquidityParams\n  ): Promise<RemoveMultipleLiquidityResponse> {\n    const { maxPositionList, payer, type, pair, tokenMintX, tokenMintY } =\n      params;\n\n    const tokenProgramX = await getProgram(tokenMintX, this.connection);\n    const tokenProgramY = await getProgram(tokenMintY, this.connection);\n\n    const txCreateAccount = new Transaction();\n\n    const associatedPairVaultX = await this.getPairVaultInfo({\n      tokenAddress: tokenMintX,\n      pair,\n      payer,\n      transaction: txCreateAccount,\n    });\n\n    const associatedPairVaultY = await this.getPairVaultInfo({\n      tokenAddress: tokenMintY,\n      pair,\n      payer,\n      transaction: txCreateAccount,\n    });\n\n    const associatedUserVaultX = await this.getUserVaultInfo({\n      tokenAddress: tokenMintX,\n      payer,\n      transaction: txCreateAccount,\n    });\n\n    const associatedUserVaultY = await this.getUserVaultInfo({\n      tokenAddress: tokenMintY,\n      payer,\n      transaction: txCreateAccount,\n    });\n\n    const hook = PublicKey.findProgramAddressSync(\n      [\n        Buffer.from(utils.bytes.utf8.encode(\"hook\")),\n        this.hooksConfig!.toBuffer(),\n        pair.toBuffer(),\n      ],\n      this.hooksProgram.programId\n    )[0];\n\n    const associatedHookTokenY = spl.getAssociatedTokenAddressSync(\n      tokenMintY,\n      hook,\n      true,\n      tokenProgramY\n    );\n    const infoHookTokenY = await this.connection.getAccountInfo(\n      associatedHookTokenY\n    );\n\n    if (!infoHookTokenY) {\n      const hookTokenYInstructions =\n        spl.createAssociatedTokenAccountInstruction(\n          payer,\n          associatedHookTokenY,\n          hook,\n          tokenMintY,\n          tokenProgramY\n        );\n\n      txCreateAccount.add(hookTokenYInstructions);\n    }\n\n    const unitSPrice = await getGasPrice(this.connection).catch(\n      () => undefined\n    );\n\n    const unitPrice = Math.max(\n      Number(unitSPrice) ?? 0,\n      UNIT_PRICE_DEFAULT * (this.bufferGas ?? 1)\n    );\n\n    const positionClosed: Record<string, string>[] = [];\n    const txs = await Promise.all(\n      maxPositionList.map(async ({ position, start, end, positionMint }) => {\n        const binArrayIndex = Math.floor(start / BIN_ARRAY_SIZE);\n\n        const { resultIndex } = await this.getBinArrayInfo({\n          binArrayIndex,\n          pair,\n          payer,\n        });\n\n        const binArrayLower = await this.getBinArray({\n          binArrayIndex: resultIndex,\n          pair,\n          payer,\n        });\n\n        const binArrayUpper = await this.getBinArray({\n          binArrayIndex: resultIndex + 1,\n          pair,\n          payer,\n        });\n\n        const tx = new Transaction();\n        tx.add(\n          ComputeBudgetProgram.setComputeUnitLimit({\n            units: CCU_LIMIT,\n          })\n        );\n        tx.add(\n          ComputeBudgetProgram.setComputeUnitPrice({\n            microLamports: unitPrice,\n          })\n        );\n\n        const positionVault = spl.getAssociatedTokenAddressSync(\n          new PublicKey(positionMint),\n          payer,\n          true,\n          spl.TOKEN_2022_PROGRAM_ID\n        );\n\n        const reserveXY = cloneDeep(\n          await this.getBinsReserveInformation({\n            position: new PublicKey(position),\n            pair,\n            payer,\n          })\n        );\n\n        const hookBinArrayLower = PublicKey.findProgramAddressSync(\n          [\n            Buffer.from(utils.bytes.utf8.encode(\"bin_array\")),\n            hook.toBuffer(),\n            new BN(BIN_ARRAY_INDEX).toArrayLike(Buffer, \"le\", 4),\n          ],\n          this.hooksProgram.programId\n        )[0];\n\n        const hookBinArrayUpper = PublicKey.findProgramAddressSync(\n          [\n            Buffer.from(utils.bytes.utf8.encode(\"bin_array\")),\n            hook.toBuffer(),\n            new BN(BIN_ARRAY_INDEX + 1).toArrayLike(Buffer, \"le\", 4),\n          ],\n          this.hooksProgram.programId\n        )[0];\n\n        const hookPosition = PublicKey.findProgramAddressSync(\n          [\n            Buffer.from(utils.bytes.utf8.encode(\"position\")),\n            hook.toBuffer(),\n            new PublicKey(position).toBuffer(),\n          ],\n          this.hooksProgram.programId\n        )[0];\n\n        let removedShares: BN[] = [];\n\n        if (type === \"removeBoth\") {\n          removedShares = reserveXY.map((reserve: ReserveParams) => {\n            const binId = reserve.binId;\n            if (binId >= Number(start) && binId <= Number(end)) {\n              return reserve.liquidityShare;\n            }\n\n            return new BN(0);\n          });\n        }\n\n        if (type === \"removeBaseToken\") {\n          removedShares = reserveXY.map((reserve: ReserveParams) => {\n            if (reserve.reserveX && reserve.reserveY === 0) {\n              return reserve.liquidityShare;\n            }\n\n            return new BN(0);\n          });\n        }\n\n        if (type === \"removeQuoteToken\") {\n          removedShares = reserveXY.map((reserve: ReserveParams) => {\n            if (reserve.reserveY && reserve.reserveX === 0) {\n              return reserve.liquidityShare;\n            }\n\n            return new BN(0);\n          });\n        }\n\n        const availableShares = reserveXY.filter((item: ReserveParams) =>\n          type === \"removeBoth\"\n            ? !new BN(item.liquidityShare).eq(new BN(0))\n            : type === \"removeQuoteToken\"\n            ? !item.reserveX\n            : !item.reserveY\n        );\n\n        const isClosePosition =\n          (type === \"removeBoth\" &&\n            end - start + 1 >= availableShares.length) ||\n          (end - start + 1 === FIXED_LENGTH &&\n            availableShares.length === FIXED_LENGTH);\n        if (isClosePosition) {\n          const instructions = await this.lbProgram.methods\n            .closePosition()\n            .accountsPartial({\n              pair,\n              position,\n              binArrayLower: binArrayLower,\n              binArrayUpper: binArrayUpper,\n              tokenVaultX: associatedPairVaultX,\n              tokenVaultY: associatedPairVaultY,\n              userVaultX: associatedUserVaultX,\n              userVaultY: associatedUserVaultY,\n              positionTokenAccount: positionVault,\n              tokenMintX,\n              tokenMintY,\n              tokenProgramX,\n              tokenProgramY,\n              positionTokenProgram: spl.TOKEN_2022_PROGRAM_ID,\n              hook,\n              hooksProgram: this.hooksProgram.programId,\n              user: payer,\n              positionMint,\n            })\n            .instruction();\n\n          positionClosed.push({ position });\n          tx.add(instructions);\n        } else {\n          const instructions = await this.lbProgram.methods\n            .decreasePosition(removedShares)\n            .accountsPartial({\n              pair: pair,\n              position,\n              binArrayLower: binArrayLower,\n              binArrayUpper: binArrayUpper,\n              tokenVaultX: associatedPairVaultX,\n              tokenVaultY: associatedPairVaultY,\n              userVaultX: associatedUserVaultX,\n              userVaultY: associatedUserVaultY,\n              positionTokenAccount: positionVault,\n              tokenMintX: tokenMintX,\n              tokenMintY: tokenMintY,\n              tokenProgramX,\n              tokenProgramY,\n              positionTokenProgram: spl.TOKEN_2022_PROGRAM_ID,\n              hook: hook,\n              hooksProgram: this.hooksProgram.programId,\n              user: payer,\n              positionMint,\n            })\n            ?.remainingAccounts([\n              { pubkey: pair, isWritable: false, isSigner: false },\n              { pubkey: binArrayLower, isWritable: false, isSigner: false },\n              { pubkey: binArrayUpper, isWritable: false, isSigner: false },\n              { pubkey: hookBinArrayLower, isWritable: true, isSigner: false },\n              { pubkey: hookBinArrayUpper, isWritable: true, isSigner: false },\n              { pubkey: hookPosition, isWritable: true, isSigner: false },\n            ])\n            .instruction();\n\n          tx.add(instructions);\n        }\n\n        return tx;\n      })\n    );\n\n    const txCloseAccount = new Transaction();\n\n    if (\n      tokenMintY.toString() === WRAP_SOL_ADDRESS ||\n      tokenMintX.toString() === WRAP_SOL_ADDRESS\n    ) {\n      const isNativeY = tokenMintY.toString() === WRAP_SOL_ADDRESS;\n\n      const associatedUserVault = isNativeY\n        ? associatedUserVaultY\n        : associatedUserVaultX;\n\n      txCloseAccount.add(\n        spl.createCloseAccountInstruction(associatedUserVault, payer, payer)\n      );\n    }\n\n    return {\n      txs,\n      txCreateAccount: txCreateAccount.instructions.length\n        ? txCreateAccount\n        : undefined,\n      txCloseAccount: txCloseAccount.instructions.length\n        ? txCloseAccount\n        : undefined,\n      positionClosed,\n    };\n  }\n\n  public async swap(params: SwapParams): Promise<Transaction> {\n    const {\n      tokenMintX,\n      tokenMintY,\n      amount,\n      otherAmountOffset,\n      swapForY,\n      isExactInput,\n      pair,\n      hook,\n      payer,\n    } = params;\n\n    const pairInfo = await this.getPairAccount(pair);\n    if (!pairInfo) throw new Error(\"Pair not found\");\n\n    const currentBinArrayIndex = Math.floor(pairInfo.activeId / BIN_ARRAY_SIZE);\n\n    const surroundingIndexes = [\n      currentBinArrayIndex - 1,\n      currentBinArrayIndex,\n      currentBinArrayIndex + 1,\n    ];\n\n    const binArrayAddresses = await Promise.all(\n      surroundingIndexes.map(\n        async (idx) =>\n          await this.getBinArray({\n            binArrayIndex: idx,\n            pair,\n            payer,\n          })\n      )\n    );\n    \n    const binArrayAccountsInfo = await this.connection.getMultipleAccountsInfo(\n      binArrayAddresses\n    );\n\n    const validIndexes = surroundingIndexes.filter(\n      (_, i) => binArrayAccountsInfo[i]\n    );\n\n    if (validIndexes.length < 2) {\n      throw new Error(\"No valid bin arrays found for the pair\");\n    }\n\n    let binArrayLowerIndex: number;\n    let binArrayUpperIndex: number;\n    if (validIndexes.length === 2) {\n      [binArrayLowerIndex, binArrayUpperIndex] = validIndexes;\n    } else {\n      const activeOffset = pairInfo.activeId % BIN_ARRAY_SIZE;\n      const [first, second, third] = validIndexes;\n      [binArrayLowerIndex, binArrayUpperIndex] =\n        activeOffset < BIN_ARRAY_SIZE / 2 ? [first, second] : [second, third];\n    }\n\n    const binArrayLower = await this.getBinArray({\n      pair,\n      binArrayIndex: binArrayLowerIndex,\n      payer,\n    });\n\n    const binArrayUpper = await this.getBinArray({\n      pair,\n      binArrayIndex: binArrayUpperIndex,\n      payer,\n    });\n\n    const [tokenProgramX, tokenProgramY] = await Promise.all([\n      getProgram(tokenMintX, this.connection),\n      getProgram(tokenMintY, this.connection),\n    ]);\n\n    const latestBlockHash = await this.connection.getLatestBlockhash();\n    const tx = new Transaction({\n      feePayer: payer,\n      blockhash: latestBlockHash.blockhash,\n      lastValidBlockHeight: latestBlockHash.lastValidBlockHeight,\n    });\n\n    const associatedPairVaultX = spl.getAssociatedTokenAddressSync(\n      tokenMintX,\n      pair,\n      true,\n      tokenProgramX\n    );\n\n    const associatedPairVaultY = spl.getAssociatedTokenAddressSync(\n      tokenMintY,\n      pair,\n      true,\n      tokenProgramY\n    );\n\n    const associatedUserVaultX = spl.getAssociatedTokenAddressSync(\n      tokenMintX,\n      payer,\n      true,\n      tokenProgramX\n    );\n\n    const associatedUserVaultY = spl.getAssociatedTokenAddressSync(\n      tokenMintY,\n      payer,\n      true,\n      tokenProgramY\n    );\n\n    const infoUserVaultX = await this.connection.getAccountInfo(\n      associatedUserVaultX\n    );\n\n    if (!infoUserVaultX) {\n      const userVaultXInstructions =\n        spl.createAssociatedTokenAccountInstruction(\n          payer,\n          associatedUserVaultX,\n          payer,\n          tokenMintX,\n          tokenProgramX\n        );\n\n      tx.add(userVaultXInstructions);\n    }\n\n    const infoUserVaultY = await this.connection.getAccountInfo(\n      associatedUserVaultY\n    );\n\n    if (!infoUserVaultY) {\n      const userVaultYInstructions =\n        spl.createAssociatedTokenAccountInstruction(\n          payer,\n          associatedUserVaultY,\n          payer,\n          tokenMintY,\n          tokenProgramY\n        );\n\n      tx.add(userVaultYInstructions);\n    }\n\n    const hookBinArrayLower = PublicKey.findProgramAddressSync(\n      [\n        Buffer.from(utils.bytes.utf8.encode(\"bin_array\")),\n        hook.toBuffer(),\n        new BN(BIN_ARRAY_INDEX).toArrayLike(Buffer, \"le\", 4),\n      ],\n      this.hooksProgram.programId\n    )[0];\n\n    const hookBinArrayUpper = PublicKey.findProgramAddressSync(\n      [\n        Buffer.from(utils.bytes.utf8.encode(\"bin_array\")),\n        hook.toBuffer(),\n        new BN(BIN_ARRAY_INDEX + 1).toArrayLike(Buffer, \"le\", 4),\n      ],\n      this.hooksProgram.programId\n    )[0];\n\n    if (\n      tokenMintY.toString() === WRAP_SOL_ADDRESS ||\n      tokenMintX.toString() === WRAP_SOL_ADDRESS\n    ) {\n      const isNativeY = tokenMintY.toString() === WRAP_SOL_ADDRESS;\n\n      const associatedUserVault = isNativeY\n        ? associatedUserVaultY\n        : associatedUserVaultX;\n\n      if (isNativeY && !swapForY) {\n        tx.add(\n          SystemProgram.transfer({\n            fromPubkey: payer,\n            toPubkey: associatedUserVault,\n            lamports: amount,\n          })\n        );\n        tx.add(spl.createSyncNativeInstruction(associatedUserVault));\n      }\n\n      if (!isNativeY && swapForY) {\n        tx.add(\n          SystemProgram.transfer({\n            fromPubkey: payer,\n            toPubkey: associatedUserVault,\n            lamports: amount,\n          })\n        );\n        tx.add(spl.createSyncNativeInstruction(associatedUserVault));\n      }\n    }\n\n    const swapInstructions = await this.lbProgram.methods\n      .swap(\n        new BN(amount.toString()),\n        new BN(otherAmountOffset.toString()),\n        swapForY,\n        isExactInput ? { exactInput: {} } : { exactOutput: {} }\n      )\n      .accountsPartial({\n        pair: pair,\n        binArrayLower: binArrayLower,\n        binArrayUpper: binArrayUpper,\n        tokenVaultX: associatedPairVaultX,\n        tokenVaultY: associatedPairVaultY,\n        userVaultX: associatedUserVaultX,\n        userVaultY: associatedUserVaultY,\n        tokenMintX: tokenMintX,\n        tokenMintY: tokenMintY,\n        tokenProgramX,\n        tokenProgramY,\n        user: payer,\n      })\n      .remainingAccounts([\n        { pubkey: pair, isWritable: false, isSigner: false },\n        { pubkey: binArrayLower, isWritable: false, isSigner: false },\n        { pubkey: binArrayUpper, isWritable: false, isSigner: false },\n        { pubkey: hookBinArrayLower, isWritable: true, isSigner: false },\n        { pubkey: hookBinArrayUpper, isWritable: true, isSigner: false },\n      ])\n      .instruction();\n\n    tx.add(swapInstructions);\n\n    if (\n      tokenMintY.toString() === WRAP_SOL_ADDRESS ||\n      tokenMintX.toString() === WRAP_SOL_ADDRESS\n    ) {\n      const isNativeY = tokenMintY.toString() === WRAP_SOL_ADDRESS;\n\n      const associatedUserVault = isNativeY\n        ? associatedUserVaultY\n        : associatedUserVaultX;\n      if ((isNativeY && swapForY) || (!isNativeY && !swapForY)) {\n        tx.add(\n          spl.createCloseAccountInstruction(associatedUserVault, payer, payer)\n        );\n      }\n    }\n\n    return tx;\n  }\n\n  public async getQuote(\n    params: GetTokenOutputParams\n  ): Promise<GetTokenOutputResponse> {\n    try {\n      const data = await LBSwapService.fromLbConfig(\n        this.lbProgram,\n        this.connection\n      ).calculateInOutAmount(params);\n      const { amountIn, amountOut } = data;\n\n      const slippageFraction = params.slippage / 100;\n      const slippageScaled = Math.round(slippageFraction * PRECISION);\n      let maxAmountIn = amountIn;\n      let minAmountOut = amountOut;\n      if (params.isExactInput) {\n        minAmountOut =\n          (amountOut * BigInt(PRECISION - slippageScaled)) / BigInt(PRECISION);\n      } else {\n        // max mount in should div for slippage\n        maxAmountIn =\n          (amountIn * BigInt(PRECISION)) / BigInt(PRECISION - slippageScaled);\n      }\n\n      const { maxAmountOut } = await this.getMaxAmountOutWithFee(\n        params.pair,\n        Number(amountIn.toString()),\n        params.swapForY,\n        params.tokenBaseDecimal,\n        params.tokenQuoteDecimal\n      );\n\n      const priceImpact = new bigDecimal(amountOut)\n        .subtract(new bigDecimal(maxAmountOut))\n        .divide(new bigDecimal(maxAmountOut))\n        .multiply(new bigDecimal(100))\n        .getValue();\n\n      return {\n        amountIn: amountIn,\n        amountOut: amountOut,\n        amount: params.isExactInput ? maxAmountIn : minAmountOut,\n        otherAmountOffset: params.isExactInput ? minAmountOut : maxAmountIn,\n        priceImpact: Number(priceImpact),\n      };\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  public async getMaxAmountOutWithFee(\n    pairAddress: PublicKey,\n    amount: number,\n    swapForY: boolean = false,\n    decimalBase: number = 9,\n    decimalQuote: number = 9\n  ) {\n    try {\n      let amountIn = BigInt(amount);\n      const pairAccount = await this.getPairAccount(pairAddress);\n      const pair = pairAccountToPair(pairAccount);\n      const activeId = pair?.activeId;\n      const binStep = pair?.binStep;\n      const swapService = LBSwapService.fromLbConfig(\n        this.lbProgram,\n        this.connection\n      );\n      const feePrice = swapService.getTotalFee(pair);\n      const activePrice = getPriceFromId(binStep, activeId, 9, 9);\n      const price = getPriceFromId(\n        binStep,\n        activeId,\n        decimalBase,\n        decimalQuote\n      );\n\n      const feeAmount = swapService.getFeeAmount(amountIn, feePrice);\n      amountIn = BigInt(amountIn) - BigInt(feeAmount); // new BN(amountIn).subtract(new BN(feeAmount));\n      const maxAmountOut = swapForY\n        ? mulShr(Number(amountIn.toString()), activePrice, SCALE_OFFSET, \"down\")\n        : shlDiv(\n            Number(amountIn.toString()),\n            activePrice,\n            SCALE_OFFSET,\n            \"down\"\n          );\n\n      return { maxAmountOut, price };\n    } catch {}\n\n    return { maxAmountOut: 0, price: 0 };\n  }\n\n  public getDexName() {\n    return \"Saros DLMM\";\n  }\n\n  public getDexProgramId() {\n    return this.lbProgram.programId;\n  }\n\n  public async fetchPoolAddresses() {\n    const programId = this.getDexProgramId();\n    const connection = this.connection;\n    const pairAccount = LiquidityBookIDL.accounts.find(\n      (acc) => acc.name === \"Pair\"\n    );\n    const pairAccountDiscriminator = pairAccount\n      ? pairAccount.discriminator\n      : undefined;\n\n    if (!pairAccountDiscriminator) {\n      throw new Error(\"Pair account not found\");\n    }\n\n    const accounts = await connection.getProgramAccounts(\n      new PublicKey(programId),\n      {\n        filters: [\n          {\n            memcmp: { offset: 0, bytes: bs58.encode(pairAccountDiscriminator) },\n          },\n        ],\n      }\n    );\n    if (accounts.length === 0) {\n      throw new Error(\"Pair not found\");\n    }\n    const poolAdresses = accounts.reduce((addresses: string[], account) => {\n      if (account.account.owner.toString() !== programId.toString()) {\n        return addresses;\n      }\n      if (account.account.data.length < 8) {\n        return addresses;\n      }\n      addresses.push(account.pubkey.toString());\n      return addresses;\n    }, []);\n\n    return poolAdresses;\n  }\n\n  public async getUserPositions({ payer, pair }: UserPositionsParams) {\n    const connection = this.connection;\n    const tokenAccounts = await connection.getParsedTokenAccountsByOwner(\n      payer,\n      {\n        programId: spl.TOKEN_2022_PROGRAM_ID,\n      }\n    );\n\n    const positionMints = tokenAccounts.value\n      .filter((acc) => {\n        const amount = acc.account.data.parsed.info.tokenAmount.uiAmount;\n        // Only interested in NFTs or position tokens with amount > 0\n        return amount && amount > 0;\n      })\n      .map((acc) => new PublicKey(acc.account.data.parsed.info.mint));\n\n    const positions = await Promise.all(\n      positionMints.map(async (mint) => {\n        // Derive PDA for Position account\n        const [positionPda] = await PublicKey.findProgramAddressSync(\n          [Buffer.from(utils.bytes.utf8.encode(\"position\")), mint.toBuffer()],\n          this.lbProgram.programId\n        );\n        // Fetch and decode the Position account\n        try {\n          const accountInfo = await connection.getAccountInfo(positionPda);\n          if (!accountInfo) return null;\n          //@ts-ignore\n          const position = await this.lbProgram.account.position.fetch(\n            positionPda\n          );\n          if (position.pair.toString() !== pair.toString()) return null;\n          return { ...position, position: positionPda.toString() };\n        } catch {\n          return null;\n        }\n      })\n    );\n    return positions.filter(Boolean);\n  }\n\n  public async quote(params: {\n    amount: number;\n    metadata: PoolMetadata;\n    optional: {\n      isExactInput: boolean;\n      swapForY: boolean;\n      slippage: number;\n    };\n  }) {\n    const { amount, metadata, optional } = params;\n\n    return await this.getQuote({\n      amount: BigInt(amount),\n      isExactInput: optional.isExactInput,\n      pair: new PublicKey(metadata.poolAddress),\n      slippage: optional.slippage,\n      swapForY: optional.swapForY,\n      tokenBase: new PublicKey(metadata.baseMint),\n      tokenBaseDecimal: metadata.extra.tokenBaseDecimal,\n      tokenQuote: new PublicKey(metadata.quoteMint),\n      tokenQuoteDecimal: metadata.extra.tokenQuoteDecimal,\n    });\n  }\n\n  public async fetchPoolMetadata(pair: string): Promise<PoolMetadata> {\n    const connection = this.connection;\n    //@ts-ignore\n    const pairInfo: Pair = await this.lbProgram.account.pair.fetch(\n      new PublicKey(pair)\n    );\n    if (!pairInfo) {\n      throw new Error(\"Pair not found\");\n    }\n\n    const basePairVault = await this.getPairVaultInfo({\n      tokenAddress: new PublicKey(pairInfo.tokenMintX),\n      pair: new PublicKey(pair),\n    });\n    const quotePairVault = await this.getPairVaultInfo({\n      tokenAddress: new PublicKey(pairInfo.tokenMintY),\n      pair: new PublicKey(pair),\n    });\n\n    const [baseReserve, quoteReserve] = await Promise.all([\n      connection.getTokenAccountBalance(basePairVault).catch(() => ({\n        value: {\n          uiAmount: 0,\n          amount: \"0\",\n          decimals: 0,\n          uiAmountString: \"0\",\n        },\n      })),\n      connection.getTokenAccountBalance(quotePairVault).catch(() => ({\n        value: {\n          uiAmount: 0,\n          amount: \"0\",\n          decimals: 0,\n          uiAmountString: \"0\",\n        },\n      })),\n    ]);\n\n    return {\n      poolAddress: pair,\n      baseMint: pairInfo.tokenMintX.toString(),\n      baseReserve: baseReserve.value.amount,\n      quoteMint: pairInfo.tokenMintY.toString(),\n      quoteReserve: quoteReserve.value.amount,\n      tradeFee:\n        (pairInfo.staticFeeParameters.baseFactor * pairInfo.binStep) / 1e6,\n      extra: {\n        hook: pairInfo.hook?.toString(),\n        tokenQuoteDecimal: baseReserve.value.decimals,\n        tokenBaseDecimal: quoteReserve.value.decimals,\n      },\n    };\n  }\n\n  public async getPairVaultInfo(params: {\n    tokenAddress: PublicKey;\n    pair: PublicKey;\n    payer?: PublicKey;\n    transaction?: Transaction;\n  }) {\n    const { tokenAddress, pair, payer, transaction } = params;\n\n    const tokenMint = new PublicKey(tokenAddress);\n    const tokenProgram = await getProgram(tokenMint, this.connection);\n\n    const associatedPairVault = spl.getAssociatedTokenAddressSync(\n      tokenMint,\n      pair,\n      true,\n      tokenProgram\n    );\n\n    if (transaction && payer) {\n      const infoPairVault = await this.connection.getAccountInfo(\n        associatedPairVault\n      );\n\n      if (!infoPairVault) {\n        const pairVaultYInstructions =\n          spl.createAssociatedTokenAccountInstruction(\n            payer,\n            associatedPairVault,\n            pair,\n            tokenMint,\n            tokenProgram\n          );\n        transaction.add(pairVaultYInstructions);\n      }\n    }\n\n    return associatedPairVault;\n  }\n\n  public async getUserVaultInfo(params: GetUserVaultInfoParams) {\n    const { tokenAddress, payer, transaction } = params;\n    const tokenProgram = await getProgram(tokenAddress, this.connection);\n    const associatedUserVault = spl.getAssociatedTokenAddressSync(\n      tokenAddress,\n      payer,\n      true,\n      tokenProgram\n    );\n\n    if (transaction) {\n      const infoUserVault = await this.connection.getAccountInfo(\n        associatedUserVault\n      );\n\n      if (!infoUserVault) {\n        const userVaultYInstructions =\n          spl.createAssociatedTokenAccountInstruction(\n            payer,\n            associatedUserVault,\n            payer,\n            tokenAddress,\n            tokenProgram\n          );\n        transaction.add(userVaultYInstructions);\n      }\n    }\n    return associatedUserVault;\n  }\n\n  public async listenNewPoolAddress(\n    postTxFunction: (address: string) => Promise<void>\n  ) {\n    const LB_PROGRAM_ID = this.getDexProgramId();\n    this.connection.onLogs(\n      LB_PROGRAM_ID,\n      (logInfo) => {\n        if (!logInfo.err) {\n          const logs = logInfo.logs || [];\n          for (const log of logs) {\n            if (log.includes(\"Instruction: InitializePair\")) {\n              const signature = logInfo.signature;\n\n              this.getPairAddressFromLogs(signature).then((address) => {\n                postTxFunction(address);\n              });\n            }\n          }\n        }\n      },\n      \"finalized\"\n    );\n  }\n\n  private async getPairAddressFromLogs(signature: string) {\n    const parsedTransaction = await this.connection.getTransaction(signature, {\n      maxSupportedTransactionVersion: 0,\n    });\n    if (!parsedTransaction) {\n      throw new Error(\"Transaction not found\");\n    }\n\n    const compiledMessage = parsedTransaction.transaction.message;\n    const message = TransactionMessage.decompile(compiledMessage);\n    const instructions = message.instructions;\n    const initializePairStruct = LiquidityBookIDL.instructions.find(\n      (item) => item.name === \"initialize_pair\"\n    )!;\n\n    const initializePairDescrimator = Buffer.from(\n      initializePairStruct!.discriminator\n    );\n\n    let pairAddress = \"\";\n\n    for (const instruction of instructions) {\n      const descimatorInstruction = instruction.data.subarray(0, 8);\n      if (!descimatorInstruction.equals(initializePairDescrimator)) continue;\n      //@ts-ignore\n      const accounts = initializePairStruct.accounts.map((item, index) => {\n        return {\n          name: item.name,\n          address: instruction.keys[index].pubkey.toString(),\n        };\n      });\n      pairAddress =\n        accounts.find(\n          (item: { name: string; address: string }) => item.name === \"pair\"\n        )?.address || \"\";\n    }\n    return pairAddress;\n  }\n}\n","import { Pair, PairAccount } from \"../types\";\n\nexport function pairAccountToPair(account: PairAccount): Pair {\n  return {\n    bump: account.bump,\n    liquidityBookConfig: account.liquidityBookConfig.toBase58(),\n    binStep: account.binStep,\n    binStepSeed: account.binStepSeed,\n    tokenMintX: account.tokenMintX.toBase58(),\n    tokenMintY: account.tokenMintY.toBase58(),\n    staticFeeParameters: {\n      baseFactor: account.staticFeeParameters.baseFactor,\n      filterPeriod: account.staticFeeParameters.filterPeriod,\n      decayPeriod: account.staticFeeParameters.decayPeriod,\n      reductionFactor: account.staticFeeParameters.reductionFactor,\n      variableFeeControl: account.staticFeeParameters.variableFeeControl,\n      maxVolatilityAccumulator:\n        account.staticFeeParameters.maxVolatilityAccumulator,\n      protocolShare: account.staticFeeParameters.protocolShare,\n      space: Array.from(account.staticFeeParameters.space).slice(0, 2) as [\n        number,\n        number\n      ],\n    },\n    activeId: account.activeId,\n    dynamicFeeParameters: {\n      timeLastUpdated: account.dynamicFeeParameters.timeLastUpdated,\n      volatilityAccumulator: account.dynamicFeeParameters.volatilityAccumulator,\n      volatilityReference: account.dynamicFeeParameters.volatilityReference,\n      idReference: account.dynamicFeeParameters.idReference,\n      space: Array.from(account.dynamicFeeParameters.space).slice(0, 4) as [\n        number,\n        number,\n        number,\n        number\n      ],\n    },\n    protocolFeesX: account.protocolFeesX.toString(), \n    protocolFeesY: account.protocolFeesY.toString(),\n    hook: account.hook ? account.hook.toBase58() : null,\n  };\n}\n"],"names":["MODE","LiquidityShape","RemoveLiquidityType","CONFIG","_CONFIG","TESTNET","rpc","DEVNET","MAINNET","REWARDS_PER_SECOND","Math","floor","WRAP_SOL_ADDRESS","LiquidityBookAbstract","config","rpcUrl","_config$options","options","mode","this","connection","Connection","_config$options2","commitmentOrConfig","provider","AnchorProvider","defaultOptions","lbProgram","Program","LiquidityBookIDL","hooksProgram","MdmaIDL","getProgram","_ref","_asyncToGenerator","_regenerator","m","_callee","address","_account$value","owner","program","w","_context","n","getParsedAccountInfo","v","value","toBase58","TOKEN_PROGRAM_ID","TOKEN_2022_PROGRAM_ID","a","_x","_x2","apply","arguments","getPriceFromId","bin_step","bin_id","baseTokenDecimal","quoteTokenDecimal","quotient","base","exponent","decimalPow","pow","getIdFromPrice","price","binStep","Error","log","round","LBError","_Error","message","_this","call","name","_inheritsLoose","_wrapNativeSuper","BinArrayRange","binArrayPrevious","binArrayCurrent","binArrayNext","index","BinArrayIndexMismatch","bins","addBins","binArray","forEach","bin","_this2","_proto","prototype","getBinMut","binId","getAllBins","Object","values","LBSwapService","volatilityAccumulator","volatilityReference","referenceId","timeLastUpdated","fromLbConfig","_proto2","getBinArray","params","binArrayIndex","pair","PublicKey","findProgramAddressSync","Buffer","from","utils","bytes","utf8","encode","toBuffer","BN","toArrayLike","programId","calculateInOutAmount","_calculateInOutAmount","amount","swapForY","isExactInput","pairInfo","currentBinArrayIndex","binArrayIndexes","binArrayAddresses","binArrays","binRange","amountAfterTransferFee","_this3","p","account","fetch","activeId","map","idx","Promise","all","i","error","reduce","acc","cur","add","totalSupply","isZero","amountIn","BigInt","amountOut","calculateAmountOut","calculateAmountIn","_calculateAmountIn","_callee2","amountOutLeft","totalBinUsed","activeBin","fee","_this$swapExactOutput","_context2","updateReferences","updateVolatilityAccumulator","getTotalFee","swapExactOutput","protocolShare","staticFeeParameters","reserveX","reserveY","amountInWithFees","moveActiveId","_x3","_x4","_x5","_calculateAmountOut","_callee3","amountInLeft","_this$swapExactInput","_context3","swapExactInput","_x6","_x7","_x8","_x9","protocolShareBigInt","binReserveOut","feeAmount","protocolFeeAmount","binReserveOutBigInt","toString","priceScaled","Number","amountInWithoutFee","calcAmountInByPrice","getFeeForAmount","getProtocolFee","maxAmountIn","maxFeeAmount","getFeeAmount","calcAmountOutByPrice","_updateReferences","_callee4","slot","blockTimeStamp","timeDelta","_context4","dynamicFeeParameters","idReference","toNumber","getSlot","getBlockTime","filterPeriod","decayPeriod","updateVolatilityReference","_x0","_x1","reductionFactor","abs","maxVolatilityAccumulator","getVariableFee","variableFeeControl","prod","getBaseFee","baseFactor","denominator","pairId","scaleOffset","rounding","divRem","numerator","mulDiv","x","y","shlDiv","offset","getBinRange","firstBinId","firstArray","range","binLower","binUpper","getGasPrice","buffNum","_ref2","resolve","timeout","currentFee","unitPrice","setTimeout","getRecentPrioritizationFees","filter","prioritizationFee","clearTimeout","length","max","concat","LiquidityBookServices","_LiquidityBookAbstrac","getPairAccount","_getPairAccount","getPositionAccount","_getPositionAccount","position","_getBinArray","payer","transaction","getAccountInfo","methods","initializeBinArray","accountsPartial","user","instruction","getBinArrayInfo","_getBinArrayInfo","resultIndex","result","binArrayOther","_binArrayOther","getBinsReserveInformation","_getBinsReserveInformation","_callee5","positionInfo","_yield$this$getBinArr","firstBinIndex","binIds","reserveXY","_context5","lowerBinId","Array","upperBinId","_","liquidityShare","liquidityShares","totalReserveX","totalReserveY","binPosistion","createPairWithConfig","_createPairWithConfig","_callee6","tokenBase","tokenQuote","ratePrice","tokenX","tokenY","id","tx","binStepConfig","quoteAssetBadge","binArrayLower","binArrayUpper","_context6","mintAddress","decimal","BIN_ARRAY_SIZE","Transaction","lbConfig","Uint8Array","initializePair","liquidityBookConfig","tokenMintX","tokenMintY","hooksConfig","createPosition","_createPosition","_callee7","relativeBinIdLeft","relativeBinIdRight","positionMint","positionVault","_context7","spl","positionTokenAccount","tokenProgram","addLiquidityIntoPosition","_addLiquidityIntoPosition","_callee8","_Number","_this$bufferGas","liquidityDistribution","amountX","amountY","tokenProgramX","tokenProgramY","associatedPairVaultX","associatedPairVaultY","associatedUserVaultX","associatedUserVaultY","isNativeY","totalAmount","totalLiquid","associatedUserVault","hook","addLiquidityInstructions","_context8","getPairVaultInfo","tokenAddress","getUserVaultInfo","prev","curr","distributionY","distributionX","SystemProgram","transfer","fromPubkey","toPubkey","lamports","bufferGas","increasePosition","tokenVaultX","tokenVaultY","userVaultX","userVaultY","positionTokenProgram","remainingAccounts","pubkey","isWritable","isSigner","ComputeBudgetProgram","setComputeUnitLimit","units","setComputeUnitPrice","microLamports","removeMultipleLiquidity","_removeMultipleLiquidity","_callee0","_Number2","_this$bufferGas2","maxPositionList","type","txCreateAccount","associatedHookTokenY","hookTokenYInstructions","positionClosed","txs","txCloseAccount","_context0","_callee9","start","end","hookBinArrayLower","hookBinArrayUpper","hookPosition","removedShares","availableShares","instructions","_this$lbProgram$metho","_t2","_context9","cloneDeep","ACTIVE_ID","BIN_ARRAY_INDEX","reserve","item","eq","closePosition","push","decreasePosition","undefined","swap","_swap","_callee10","otherAmountOffset","surroundingIndexes","binArrayAccountsInfo","validIndexes","binArrayLowerIndex","binArrayUpperIndex","first","second","third","_ref4","_yield$Promise$all","latestBlockHash","userVaultXInstructions","userVaultYInstructions","_isNativeY","_associatedUserVault","_context10","_ref3","_callee1","_context1","_x10","getMultipleAccountsInfo","getLatestBlockhash","feePayer","blockhash","lastValidBlockHeight","exactInput","exactOutput","getQuote","_getQuote","_callee11","data","slippageScaled","minAmountOut","maxAmountOut","priceImpact","_context11","slippage","getMaxAmountOutWithFee","tokenBaseDecimal","tokenQuoteDecimal","bigDecimal","subtract","divide","multiply","getValue","_x11","_getMaxAmountOutWithFee","_callee12","pairAddress","decimalBase","decimalQuote","_context12","bump","binStepSeed","space","slice","protocolFeesX","protocolFeesY","swapService","feePrice","activePrice","_x12","_x13","_x14","_x15","_x16","getDexName","getDexProgramId","fetchPoolAddresses","_fetchPoolAddresses","_callee13","pairAccount","pairAccountDiscriminator","accounts","poolAdresses","_context13","find","discriminator","getProgramAccounts","filters","memcmp","bs58","addresses","getUserPositions","_getUserPositions","_callee15","_ref5","positionMints","_context15","getParsedTokenAccountsByOwner","parsed","info","tokenAmount","uiAmount","mint","_ref6","_callee14","positionPda","_context14","_extends","_x18","Boolean","_x17","quote","_quote","_callee16","metadata","optional","_context16","poolAddress","baseMint","extra","quoteMint","_x19","fetchPoolMetadata","_fetchPoolMetadata","_callee17","_pairInfo$hook","basePairVault","quotePairVault","_yield$Promise$all2","baseReserve","quoteReserve","_context17","getTokenAccountBalance","decimals","uiAmountString","tradeFee","_x20","_getPairVaultInfo","_callee18","tokenMint","associatedPairVault","pairVaultYInstructions","_context18","_x21","_getUserVaultInfo","_callee19","_context19","_x22","listenNewPoolAddress","_listenNewPoolAddress","_callee20","postTxFunction","LB_PROGRAM_ID","_this4","_context20","onLogs","logInfo","err","_step","_iterator","_createForOfIteratorHelperLoose","logs","done","includes","getPairAddressFromLogs","signature","then","_x23","_getPairAddressFromLogs","_callee21","parsedTransaction","initializePairStruct","initializePairDescrimator","_loop","_iterator2","_step2","_context22","getTransaction","maxSupportedTransactionVersion","TransactionMessage","decompile","_accounts$find","_context21","subarray","equals","keys","d","_regeneratorValues","_x24","key","get","feeParameters","shape","minBin","maxBin","relativeIds","Spot","totalArrayLength","findActiveBinIndex","findIndex","isOnlyX","isOnlyY","distribution","relativeBinId","totalYBin","totalXBin","pricePerBin","Curve","deltaIds","_distributionX","_distributionY","getSigma","_R","negDelta","negativeDeltaIds","reverse","el","fill","R","sigma","A","sqrt","PI","ind","exp","posDelta","positiveDeltaIds","unshift","RX","sigmaX","AX","RY","sigmaY","AY","liquidityDistributionX","liquidityDistributionY","totalX","val","totalY","isOverflow","overPoint","numberBins","_divRem","remainder","remainderLeft","reverseLiquid","_divRem2","getCurveDistributionFromBinRange","BidAsk","rSquare","rSquareX","rSquareY","_divRem3","_divRem4","_getBinRange","arrayIndex","binIndex","leftRangeIndex","rangeFromIndex"],"mappings":"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"}