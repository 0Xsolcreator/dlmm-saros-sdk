{"version":3,"file":"dlmm-sdk.esm.js","sources":["../types/config.ts","../types/services.ts","../constants/config.ts","../interface/liquidityBookAbstract.ts","../services/getProgram.ts","../utils/price.ts","../services/swap.ts","../utils/math.ts","../utils/index.ts","../utils/typeConverters.ts","../services/core.ts"],"sourcesContent":["import { Commitment, ConnectionConfig, PublicKey } from \"@solana/web3.js\";\nimport { BN } from \"@coral-xyz/anchor\";\n\nexport enum MODE {\n  TESTNET = \"testnet\",\n  DEVNET = \"devnet\",\n  MAINNET = \"mainnet\",\n}\n\nexport type LiquidityBookConfig = {\n  baseFactor: number;\n  binStep: number;\n  activeId: number;\n  binArraySize: number;\n  binArrayIndex: number;\n  maxBasisPoints: number;\n  filterPeriod: number;\n  decayPeriod: number;\n  reductionFactor: number;\n  variableFeeControl: number;\n  maxVolatilityAccumulator: number;\n  protocolShare: number;\n  startTime: number;\n  rewardsDuration: number;\n  rewardsPerSecond: number;\n};\n\nexport type ILiquidityBookConfig =\n  | {\n      mode: MODE;\n      options?: {\n        rpcUrl?: string;\n        commitmentOrConfig?: Commitment | ConnectionConfig;\n      };\n    }\n  | {\n      mode?: never;\n      options: {\n        rpcUrl: string;\n        commitmentOrConfig?: Commitment | ConnectionConfig;\n      };\n    };\n\nexport type Bin = {\n  reserveX: number;\n  reserveY: number;\n  totalSupply: number;\n};\nexport type BinArray = {\n  bins: Bin[];\n  index: number;\n};\n\nexport type StaticFeeParameters = {\n  baseFactor: number;\n  filterPeriod: number;\n  decayPeriod: number;\n  reductionFactor: number;\n  variableFeeControl: number;\n  maxVolatilityAccumulator: number;\n  protocolShare: number;\n  space: Uint8Array;\n};\n\nexport type DynamicFeeParameters = {\n  timeLastUpdated: bigint;\n  volatilityAccumulator: number;\n  volatilityReference: number;\n  idReference: number;\n  space: Uint8Array;\n};\n\nexport type PairInfo = {\n  bump: Uint8Array;\n  liquidityBookConfig: PublicKey;\n  binStep: number;\n  binStepSeed: Uint8Array;\n  tokenMintX: PublicKey;\n  tokenMintY: PublicKey;\n  staticFeeParameters: StaticFeeParameters;\n  activeId: number;\n  dynamicFeeParameters: DynamicFeeParameters;\n  protocolFeesX: BN;\n  protocolFeesY: BN;\n  hook: PublicKey | null;\n};\n\nexport interface PoolMetadata {\n  poolAddress: string;\n  baseMint: string;\n  baseReserve: string;\n  quoteMint: string;\n  quoteReserve: string;\n  tradeFee: number;\n  extra: {\n    hook?: string;\n    tokenQuoteDecimal: number;\n    tokenBaseDecimal: number;\n  };\n}\n\nexport interface PairAccount {\n  bump: number[];                    \n  liquidityBookConfig: PublicKey;\n  binStep: number;                   \n  binStepSeed: number[];            \n  tokenMintX: PublicKey;\n  tokenMintY: PublicKey;\n  staticFeeParameters: StaticFeeParameters;\n  activeId: number;                  \n  dynamicFeeParameters: DynamicFeeParameters;\n  protocolFeesX: BN;                 \n  protocolFeesY: BN;                \n  hook: PublicKey | null;\n}\n","import { PublicKey, Transaction } from \"@solana/web3.js\";\nimport { BN } from \"@coral-xyz/anchor\";\n\nexport enum LiquidityShape {\n  Spot = \"Spot\",\n  Curve = \"Curve\",\n  BidAsk = \"BidAsk\",\n}\n\nexport enum RemoveLiquidityType {\n  Both = \"removeBoth\",\n  BaseToken = \"removeBaseToken\",\n  QuoteToken = \"removeQuoteToken\",\n}\n\nexport interface PositionInfo {\n  pair: string;\n  positionMint: string;\n  position: string;\n\n  liquidityShares: string[];\n  lowerBinId: number;\n  upperBinId: number;\n  space: number[];\n}\n\nexport interface GetBinArrayParams {\n  binArrayIndex: number;\n  pair: PublicKey;\n  payer?: PublicKey;\n  transaction?: Transaction;\n}\nexport interface SwapParams {\n  tokenMintX: PublicKey;\n  tokenMintY: PublicKey;\n  amount: bigint;\n  otherAmountOffset: bigint;\n  swapForY: boolean;\n  isExactInput: boolean;\n  pair: PublicKey;\n  hook: PublicKey;\n  payer: PublicKey;\n}\n\nexport interface GetTokenOutputParams {\n  pair: PublicKey;\n  tokenBase: PublicKey;\n  tokenQuote: PublicKey;\n  amount: bigint;\n  swapForY: boolean;\n  isExactInput: boolean;\n  tokenBaseDecimal: number;\n  tokenQuoteDecimal: number;\n  slippage: number;\n}\n\nexport interface GetTokenOutputResponse {\n  amountIn: bigint;\n  amountOut: bigint;\n  priceImpact: number;\n  amount: bigint;\n  otherAmountOffset: bigint;\n}\n\nexport interface Pair {\n  bump: number[];\n  liquidityBookConfig: string; // PublicKey as string\n  binStep: number;\n  binStepSeed: number[];\n  tokenMintX: string; // PublicKey as string\n  tokenMintY: string; // PublicKey as string\n  staticFeeParameters: {\n    baseFactor: number;\n    filterPeriod: number;\n    decayPeriod: number;\n    reductionFactor: number;\n    variableFeeControl: number;\n    maxVolatilityAccumulator: number;\n    protocolShare: number;\n    space: [number, number];\n  };\n  activeId: number;\n  dynamicFeeParameters: {\n    timeLastUpdated: BN; // hex string, likely timestamp\n    volatilityAccumulator: number;\n    volatilityReference: number;\n    idReference: number;\n    space: [number, number, number, number];\n  };\n  protocolFeesX: string; // likely bytes/hex\n  protocolFeesY: string; // likely bytes/hex\n  hook: null | string; // hook could be nullable\n}\n\ninterface Bin {\n  totalSupply: string;\n  reserveX: string;\n  reserveY: string;\n}\n\nexport interface CreatePairWithConfigParams {\n  tokenBase: {\n    decimal: number;\n    mintAddress: string;\n  };\n  tokenQuote: {\n    decimal: number;\n    mintAddress: string;\n  };\n  binStep: number;\n  ratePrice: number;\n  payer: PublicKey;\n}\n\nexport interface CreatePositionParams {\n  payer: PublicKey;\n  relativeBinIdLeft: number;\n  relativeBinIdRight: number;\n  pair: PublicKey;\n  binArrayIndex: number;\n  positionMint: PublicKey;\n  transaction: Transaction;\n}\n\nexport interface GetUserVaultInfoParams {\n  tokenAddress: PublicKey;\n  payer: PublicKey;\n  transaction?: Transaction;\n}\n\nexport interface Distribution {\n  relativeBinId: number;\n  distributionX: number;\n  distributionY: number;\n}\n\nexport interface AddLiquidityIntoPositionParams {\n  positionMint: PublicKey;\n  payer: PublicKey;\n  pair: PublicKey;\n  transaction: Transaction;\n  liquidityDistribution: Distribution[];\n  amountY: number;\n  amountX: number;\n  binArrayLower: PublicKey;\n  binArrayUpper: PublicKey;\n}\n\nexport interface AddLiquidityParams {\n  tokenX: {\n    address?: string;\n    decimals: number;\n    amount: number;\n    mintAddress: string;\n  };\n  tokenY: {\n    address?: string;\n    decimals: number;\n    amount: number;\n    mintAddress: string;\n  };\n\n  pair: string;\n  binRange: [number, number];\n  positions: PositionInfo[];\n  shape: LiquidityShape;\n  activeBin: number;\n  refId: number;\n  payer: PublicKey;\n}\n\nexport interface RemoveMultipleLiquidityParams {\n  maxPositionList: {\n    position: string;\n    start: number;\n    end: number;\n    positionMint: string;\n  }[];\n  payer: PublicKey;\n  type: \"removeBoth\" | \"removeBaseToken\" | \"removeQuoteToken\";\n  pair: PublicKey;\n  tokenMintX: PublicKey;\n  tokenMintY: PublicKey;\n  activeId: number;\n}\n\nexport interface RemoveMultipleLiquidityResponse {\n  txs: Transaction[];\n  txCreateAccount?: Transaction;\n  txCloseAccount?: Transaction;\n  positionClosed?: Record<string, string>[];\n}\n\nexport interface GetBinsArrayInfoParams {\n  binArrayIndex: number;\n  pair: PublicKey;\n  payer: PublicKey;\n}\n\nexport interface GetBinsReserveParams {\n  position: PublicKey;\n  pair: PublicKey;\n  payer: PublicKey;\n}\n\nexport interface GetBinsReserveResponse {\n  reserveX: string | number;\n  reserveY: string | number;\n  totalSupply: string | number;\n  liquidityShare: BN;\n  binId: number;\n  binPosistion: number;\n}\n\nexport interface ReserveParams {\n  binId: number;\n  reserveX: string | number;\n  reserveY: string | number;\n  liquidityShare: string | number;\n}\n\nexport interface UserPositionsParams {\n  payer: PublicKey;\n  pair: PublicKey;\n}\n","import { MODE } from \"../types\";\n\nexport const CONFIG = {\n  [MODE.TESTNET]: {\n    rpc: \"https://api.testnet.solana.com\",\n  },\n  [MODE.DEVNET]: {\n    rpc: \"https://api.devnet.solana.com\",\n  },\n  [MODE.MAINNET]: {\n    rpc: \"https://api.mainnet-beta.solana.com\",\n  },\n};\n\nexport const BASE_FACTOR = 8_000;\nexport const BIN_STEP = 1;\nexport const ACTIVE_ID = 8388608;\nexport const BIN_ARRAY_SIZE = 256;\nexport const BIN_ARRAY_INDEX = ACTIVE_ID / BIN_ARRAY_SIZE - 1;\nexport const MAX_BASIS_POINTS = 10_000;\nexport const FILTER_PERIOD = 30;\nexport const DECAY_PERIOD = 600;\nexport const REDUCTION_FACTOR = 5_000;\nexport const VARIABLE_FEE_CONTROL = 40_000;\nexport const MAX_VOLATILITY_ACCUMULATOR = 350_000;\nexport const PROTOCOL_SHARE = 2000;\nexport const START_TIME = 1000;\nexport const REWARDS_DURATION = 24 * 3600;\nexport const REWARDS_PER_SECOND = Math.floor(100e9 / REWARDS_DURATION);\nexport const VARIABLE_FEE_PRECISION = 100_000_000_000;\nexport const SCALE_OFFSET = 64;\nexport const BASIS_POINT_MAX = 10_000;\nexport const ONE = 1 << SCALE_OFFSET;\nexport const PRECISION = 1_000_000_000;\n\nexport const UNIT_PRICE_DEFAULT = 1_000_000;\nexport const CCU_LIMIT = 400_000;\nexport const WRAP_SOL_ADDRESS = \"So11111111111111111111111111111111111111112\";\nexport const FIXED_LENGTH = 16;\n\nexport const BIN_STEP_CONFIGS = [\n  {\n    binStep: 1,\n    feeParameters: {\n      baseFactor: 10000,\n      filterPeriod: 10,\n      decayPeriod: 120,\n      reductionFactor: 5000,\n      variableFeeControl: 2000000,\n      maxVolatilityAccumulator: 100000,\n      protocolShare: 2000,\n      space: [0, 0],\n    },\n  },\n  {\n    binStep: 2,\n    feeParameters: {\n      baseFactor: 10000,\n      filterPeriod: 10,\n      decayPeriod: 120,\n      reductionFactor: 5000,\n      variableFeeControl: 500000,\n      maxVolatilityAccumulator: 250000,\n      protocolShare: 2000,\n      space: [0, 0],\n    },\n  },\n  {\n    binStep: 5,\n    feeParameters: {\n      baseFactor: 10000,\n      filterPeriod: 30,\n      decayPeriod: 600,\n      reductionFactor: 5000,\n      variableFeeControl: 120000,\n      maxVolatilityAccumulator: 300000,\n      protocolShare: 2000,\n      space: [0, 0],\n    },\n  },\n  {\n    binStep: 10,\n    feeParameters: {\n      baseFactor: 10000,\n      filterPeriod: 30,\n      decayPeriod: 600,\n      reductionFactor: 5000,\n      variableFeeControl: 40000,\n      maxVolatilityAccumulator: 350000,\n      protocolShare: 2000,\n      space: [0, 0],\n    },\n  },\n  {\n    binStep: 20,\n    feeParameters: {\n      baseFactor: 10000,\n      filterPeriod: 30,\n      decayPeriod: 600,\n      reductionFactor: 5000,\n      variableFeeControl: 20000,\n      maxVolatilityAccumulator: 350000,\n      protocolShare: 2000,\n      space: [0, 0],\n    },\n  },\n  {\n    binStep: 50,\n    feeParameters: {\n      baseFactor: 10000,\n      filterPeriod: 120,\n      decayPeriod: 1200,\n      reductionFactor: 5000,\n      variableFeeControl: 10000,\n      maxVolatilityAccumulator: 250000,\n      protocolShare: 2000,\n      space: [0, 0],\n    },\n  },\n  {\n    binStep: 100,\n    feeParameters: {\n      baseFactor: 10000,\n      filterPeriod: 300,\n      decayPeriod: 1200,\n      reductionFactor: 5000,\n      variableFeeControl: 7500,\n      maxVolatilityAccumulator: 150000,\n      protocolShare: 2000,\n      space: [0, 0],\n    },\n  },\n  {\n    binStep: 200,\n    feeParameters: {\n      baseFactor: 10000,\n      filterPeriod: 300,\n      decayPeriod: 1200,\n      reductionFactor: 5000,\n      variableFeeControl: 7500,\n      maxVolatilityAccumulator: 150000,\n      protocolShare: 2000,\n      space: [0, 0],\n    },\n  },\n  {\n    binStep: 250,\n    feeParameters: {\n      baseFactor: 20000,\n      filterPeriod: 300,\n      decayPeriod: 1200,\n      reductionFactor: 5000,\n      variableFeeControl: 7500,\n      maxVolatilityAccumulator: 150000,\n      protocolShare: 2000,\n      space: [0, 0],\n    },\n  },\n];\n","import { Connection } from \"@solana/web3.js\";\nimport { AnchorProvider, Idl, Program, Wallet } from \"@coral-xyz/anchor\";\nimport { ILiquidityBookConfig } from \"../types\";\nimport { CONFIG } from \"../constants/config\";\nimport LiquidityBookIDL from \"../constants/idl/liquidity_book.json\";\nimport MdmaIDL from \"../constants/idl/mdma_hook.json\";\n\nexport abstract class LiquidityBookAbstract {\n  connection: Connection;\n\n  lbProgram!: Program<Idl>;\n  hooksProgram!: Program<Idl>;\n\n  constructor(config: ILiquidityBookConfig) {\n    const rpcUrl = config.options?.rpcUrl || CONFIG[config.mode!].rpc;\n    \n    // Initialize the services here\n    this.connection = new Connection(\n      rpcUrl,\n      config.options?.commitmentOrConfig || \"confirmed\"\n    );\n\n    const provider = new AnchorProvider(\n      this.connection,\n      {} as Wallet,\n      AnchorProvider.defaultOptions()\n    );\n\n    this.lbProgram = new Program(LiquidityBookIDL as Idl, provider);\n    this.hooksProgram = new Program(MdmaIDL as Idl, provider);\n  }\n}\n","import { TOKEN_2022_PROGRAM_ID, TOKEN_PROGRAM_ID } from \"@solana/spl-token\";\nimport { Connection, PublicKey } from \"@solana/web3.js\";\n\nexport const getProgram = async (\n  address: PublicKey,\n  connection: Connection\n) => {\n  const account = await connection.getParsedAccountInfo(address);\n\n  const owner = account.value?.owner.toBase58();\n\n  const program =\n    owner === TOKEN_PROGRAM_ID.toBase58()\n      ? TOKEN_PROGRAM_ID\n      : TOKEN_2022_PROGRAM_ID;\n\n  return program;\n};\n","import { BASIS_POINT_MAX, ONE, SCALE_OFFSET } from '../constants/config'\n\nconst getBase = (binStep: number) => {\n  const quotient = binStep << SCALE_OFFSET\n  if (quotient < 0) return null\n\n  const basisPointMaxBigInt = BASIS_POINT_MAX\n\n  //@ts-ignore\n  if (basisPointMaxBigInt === 0) return null\n  const fraction = quotient / basisPointMaxBigInt\n\n  const oneBigInt = ONE\n  const result = oneBigInt + fraction\n\n  return result\n}\n\nexport const getPriceFromId = (\n  bin_step: number,\n  bin_id: number,\n  baseTokenDecimal: number,\n  quoteTokenDecimal: number\n) => {\n  const base = getBase(bin_step) as number\n  const exponent = bin_id - 8_388_608\n  const decimalPow = Math.pow(10, baseTokenDecimal - quoteTokenDecimal)\n\n  return Math.pow(base, exponent) * decimalPow\n}\n\nexport const getIdFromPrice = (\n  price: number,\n  binStep: number,\n  baseTokenDecimal: number,\n  quoteTokenDecimal: number\n): number => {\n  if (price <= 0) throw new Error('Giá phải lớn hơn 0')\n  if (binStep <= 0 || binStep > BASIS_POINT_MAX)\n    throw new Error('Bin step invalid')\n\n  const decimalPow = Math.pow(10, quoteTokenDecimal - baseTokenDecimal)\n\n  const base = 1 + binStep / BASIS_POINT_MAX\n  const exponent = Math.log(price * decimalPow) / Math.log(base)\n  const binId = Math.round(exponent + 8_388_608)\n\n  return binId\n}\n","import { BN, Idl, Program, utils } from \"@coral-xyz/anchor\";\nimport { Bin, BinArray } from \"../types\";\n\nimport { Connection, PublicKey } from \"@solana/web3.js\";\nimport {\n  BASIS_POINT_MAX,\n  BIN_ARRAY_SIZE,\n  PRECISION,\n  SCALE_OFFSET,\n  VARIABLE_FEE_PRECISION,\n} from \"../constants/config\";\nimport { getPriceFromId } from \"../utils/price\";\nimport {\n  GetBinArrayParams,\n  GetTokenOutputParams,\n  Pair,\n} from \"../types/services\";\n\nclass LBError extends Error {\n  static BinNotFound = new LBError(\"Bin not found\");\n  static BinArrayIndexMismatch = new LBError(\"Bin array index mismatch\");\n\n  constructor(message: string) {\n    super(message);\n    this.name = \"LBError\";\n  }\n}\n\nclass BinArrayRange {\n  private readonly bins: { [binId: number]: Bin };\n  constructor(\n    binArrayPrevious: BinArray,\n    binArrayCurrent: BinArray,\n    binArrayNext: BinArray\n  ) {\n    if (\n      binArrayCurrent.index !== binArrayPrevious.index + 1 ||\n      binArrayNext.index !== binArrayCurrent.index + 1\n    ) {\n      throw LBError.BinArrayIndexMismatch;\n    }\n\n    this.bins = {};\n\n    const addBins = (binArray: BinArray) => {\n      binArray.bins.forEach((bin, index) => {\n        const binId = binArray.index * BIN_ARRAY_SIZE + index;\n        this.bins[binId] = bin;\n      });\n    };\n\n    addBins(binArrayPrevious);\n    addBins(binArrayCurrent);\n    addBins(binArrayNext);\n  }\n\n  getBinMut(binId: number) {\n    const bin = this.bins[binId];\n    return bin;\n  }\n\n  getAllBins() {\n    return Object.values(this.bins);\n  }\n}\n\nexport class LBSwapService {\n  lbProgram!: Program<Idl>;\n  volatilityAccumulator: number;\n  volatilityReference: number;\n  timeLastUpdated: number;\n  referenceId: number;\n  connection: Connection;\n\n  constructor(lbProgram: Program<Idl>, connection: Connection) {\n    this.lbProgram = lbProgram;\n    this.connection = connection;\n    this.volatilityAccumulator = 0;\n    this.volatilityReference = 0;\n    this.referenceId = 0;\n    this.timeLastUpdated = 0;\n  }\n\n  static fromLbConfig(lbProgram: Program<Idl>, connection: Connection) {\n    return new LBSwapService(lbProgram, connection);\n  }\n\n  getBinArray(params: GetBinArrayParams) {\n    const { binArrayIndex, pair } = params;\n\n    const binArray = PublicKey.findProgramAddressSync(\n      [\n        Buffer.from(utils.bytes.utf8.encode(\"bin_array\")),\n        pair.toBuffer(),\n        new BN(binArrayIndex).toArrayLike(Buffer, \"le\", 4),\n      ],\n      this.lbProgram.programId\n    )[0];\n\n    return binArray;\n  }\n\n  public async calculateInOutAmount(params: GetTokenOutputParams) {\n    const { amount, swapForY, pair, isExactInput } = params;\n    try {\n       //@ts-ignore\n      const pairInfo: Pair = await this.lbProgram.account.pair.fetch(pair);\n      if (!pairInfo) throw new Error(\"Pair not found\");\n\n      const currentBinArrayIndex = Math.floor(\n        pairInfo.activeId / BIN_ARRAY_SIZE\n      );\n      const binArrayIndexes = [\n        currentBinArrayIndex - 1,\n        currentBinArrayIndex,\n        currentBinArrayIndex + 1,\n      ];\n      const binArrayAddresses = binArrayIndexes.map((idx) =>\n        this.getBinArray({\n          binArrayIndex: idx,\n          pair,\n        })\n      );\n\n      // Fetch bin arrays in batch, fallback to empty if not found\n      const binArrays: BinArray[] = await Promise.all(\n        binArrayAddresses.map((address, i) =>\n           //@ts-ignore\n          this.lbProgram.account.binArray.fetch(address).catch((error: any) => {\n            return { index: binArrayIndexes[i], bins: [] } as BinArray;\n          })\n        )\n      );\n\n      // Validate bin arrays and build range\n      const binRange = new BinArrayRange(\n        binArrays[0],\n        binArrays[1],\n        binArrays[2]\n      );\n      const totalSupply = binRange\n        .getAllBins()\n        .reduce((acc, cur) => acc.add(cur.totalSupply), new BN(0));\n      if (totalSupply.isZero()) {\n        return {\n          amountIn: BigInt(0),\n          amountOut: BigInt(0),\n        };\n      }\n\n      const amountAfterTransferFee = amount;\n\n      if (isExactInput) {\n        const amountOut = await this.calculateAmountOut(\n          amountAfterTransferFee,\n          binRange,\n          pairInfo,\n          swapForY\n        );\n\n        return {\n          amountIn: amount,\n          amountOut,\n        };\n      } else {\n        const amountIn = await this.calculateAmountIn(\n          amountAfterTransferFee,\n          binRange,\n          pairInfo,\n          swapForY\n        );\n\n        return {\n          amountIn,\n          amountOut: amountAfterTransferFee,\n        };\n      }\n    } catch (error) {\n      throw new Error(error as string);\n    }\n  }\n\n  /**\n   * @description Calculate the input amount for the swap. isExactInput = false\n   */\n  public async calculateAmountIn(\n    amount: bigint,\n    bins: BinArrayRange,\n    pairInfo: Pair,\n    swapForY: boolean\n  ) {\n    try {\n      let amountIn = BigInt(0);\n      let totalProtocolFee = BigInt(0);\n      let amountOutLeft = amount;\n      let activeId = pairInfo.activeId;\n      let totalBinUsed = 0;\n\n      await this.updateReferences(pairInfo, activeId);\n\n      while (amountOutLeft > BigInt(0)) {\n        totalBinUsed++;\n        this.updateVolatilityAccumulator(pairInfo, activeId);\n\n        const activeBin = bins.getBinMut(activeId);\n        if (!activeBin) {\n          break;\n        }\n\n        const fee = this.getTotalFee(pairInfo);\n\n        const {\n          amountInWithFees,\n          amountOut: amountOutOfBin,\n          protocolFeeAmount,\n        } = this.swapExactOutput({\n          binStep: pairInfo.binStep,\n          activeId,\n          amountOutLeft,\n          fee,\n          protocolShare: pairInfo.staticFeeParameters.protocolShare,\n          swapForY,\n          reserveX: activeBin.reserveX,\n          reserveY: activeBin.reserveY,\n        });\n\n        amountIn += amountInWithFees;\n        amountOutLeft -= amountOutOfBin;\n        totalProtocolFee += protocolFeeAmount;\n\n        if (!amountOutLeft) break;\n        activeId = this.moveActiveId(activeId, swapForY);\n      }\n\n      if (totalBinUsed >= 30) {\n        throw \"Swap crosses too many bins – quote aborted.\";\n      }\n\n      return amountIn;\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  /**\n   * @description Calculate the output amount for the swap. isExactInput = true\n   */\n  public async calculateAmountOut(\n    amount: bigint,\n    bins: BinArrayRange,\n    pairInfo: Pair,\n    swapForY: boolean\n  ) {\n    try {\n      let amountOut = BigInt(0);\n      let totalProtocolFee = BigInt(0);\n      let amountInLeft = amount;\n      let activeId = pairInfo.activeId;\n      let totalBinUsed = 0;\n\n      await this.updateReferences(pairInfo, activeId);\n\n      while (amountInLeft > BigInt(0)) {\n        totalBinUsed++;\n        this.updateVolatilityAccumulator(pairInfo, activeId);\n\n        const activeBin = bins.getBinMut(activeId);\n        if (!activeBin) {\n          break;\n        }\n\n        const fee = this.getTotalFee(pairInfo);\n\n        const {\n          amountInWithFees,\n          amountOut: amountOutOfBin,\n          protocolFeeAmount,\n        } = this.swapExactInput({\n          binStep: pairInfo.binStep,\n          activeId,\n          amountInLeft,\n          fee,\n          protocolShare: pairInfo.staticFeeParameters.protocolShare,\n          swapForY,\n          reserveX: activeBin.reserveX,\n          reserveY: activeBin.reserveY,\n        });\n\n        amountOut += amountOutOfBin;\n        amountInLeft -= amountInWithFees;\n        totalProtocolFee += protocolFeeAmount;\n\n        if (!amountInLeft) break;\n        activeId = this.moveActiveId(activeId, swapForY);\n      }\n      if (totalBinUsed >= 30) {\n        throw \"Swap crosses too many bins – quote aborted.\";\n      }\n\n      return amountOut;\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  public swapExactOutput(params: {\n    binStep: number;\n    activeId: number;\n    amountOutLeft: bigint;\n    fee: bigint;\n    protocolShare: number;\n    swapForY: boolean;\n    reserveX: BN;\n    reserveY: BN;\n  }) {\n    const {\n      binStep,\n      activeId,\n      amountOutLeft,\n      protocolShare,\n      swapForY,\n      reserveX,\n      reserveY,\n      fee,\n    } = params;\n    const protocolShareBigInt = BigInt(protocolShare);\n    const binReserveOut = swapForY ? reserveY : reserveX;\n\n    if (binReserveOut.isZero()) {\n      return {\n        amountInWithFees: BigInt(0),\n        amountOut: BigInt(0),\n        feeAmount: BigInt(0),\n        protocolFeeAmount: BigInt(0),\n      };\n    }\n\n    const binReserveOutBigInt = BigInt(binReserveOut.toString());\n    const amountOut =\n      amountOutLeft > binReserveOutBigInt ? binReserveOutBigInt : amountOutLeft;\n\n    /** @notice assume base token and quote token have the same decimals to get the price */\n    const price = getPriceFromId(binStep, activeId, 9, 9);\n    // Encode price as bigint with SCALE_OFFSET\n    const priceScaled = BigInt(\n      Math.round(Number(price) * Math.pow(2, SCALE_OFFSET))\n    );\n\n    const amountInWithoutFee = this.calcAmountInByPrice(\n      amountOut,\n      priceScaled,\n      SCALE_OFFSET,\n      swapForY,\n      \"up\"\n    );\n\n    const feeAmount = this.getFeeForAmount(amountInWithoutFee, fee);\n    const amountIn = amountInWithoutFee + feeAmount;\n    const protocolFeeAmount = this.getProtocolFee(\n      feeAmount,\n      protocolShareBigInt\n    );\n\n    return {\n      amountInWithFees: amountIn,\n      amountOut,\n      feeAmount,\n      protocolFeeAmount,\n    };\n  }\n\n  public swapExactInput(params: {\n    binStep: number;\n    activeId: number;\n    amountInLeft: bigint;\n    fee: bigint;\n    protocolShare: number;\n    swapForY: boolean;\n    reserveX: BN;\n    reserveY: BN;\n  }) {\n    const {\n      binStep,\n      activeId,\n      amountInLeft,\n      protocolShare,\n      swapForY,\n      reserveX,\n      reserveY,\n      fee,\n    } = params;\n    const protocolShareBigInt = BigInt(protocolShare);\n    const binReserveOut = swapForY ? reserveY : reserveX;\n\n    if (binReserveOut.isZero()) {\n      return {\n        amountInWithFees: BigInt(0),\n        amountOut: BigInt(0),\n        feeAmount: BigInt(0),\n        protocolFeeAmount: BigInt(0),\n      };\n    }\n\n    const binReserveOutBigInt = BigInt(binReserveOut.toString());\n\n    /** @notice assume base token and quote token have the same decimals to get the price */\n    const price = getPriceFromId(binStep, activeId, 9, 9);\n    // Encode price as bigint with SCALE_OFFSET\n    const priceScaled = BigInt(\n      Math.round(Number(price) * Math.pow(2, SCALE_OFFSET))\n    );\n\n    // Calculate maxAmountIn (input needed to take all output in bin, before fee)\n    let maxAmountIn = this.calcAmountInByPrice(\n      binReserveOutBigInt,\n      priceScaled,\n      SCALE_OFFSET,\n      swapForY,\n      \"up\"\n    );\n\n    // Add fee to get total input needed (ceil)\n    const maxFeeAmount = this.getFeeForAmount(maxAmountIn, fee);\n    maxAmountIn += maxFeeAmount;\n\n    let amountOut = BigInt(0);\n    let amountIn = BigInt(0);\n    let feeAmount = BigInt(0);\n\n    if (amountInLeft >= maxAmountIn) {\n      feeAmount = maxFeeAmount;\n      amountIn = maxAmountIn - feeAmount;\n      amountOut = binReserveOutBigInt;\n    } else {\n      feeAmount = this.getFeeAmount(amountInLeft, fee);\n      amountIn = amountInLeft - feeAmount;\n      amountOut = this.calcAmountOutByPrice(\n        amountIn,\n        priceScaled,\n        SCALE_OFFSET,\n        swapForY,\n        \"down\"\n      );\n      if (amountOut > binReserveOutBigInt) {\n        amountOut = binReserveOutBigInt;\n      }\n    }\n\n    const protocolFeeAmount =\n      protocolShare > BigInt(0)\n        ? this.getProtocolFee(feeAmount, protocolShareBigInt)\n        : BigInt(0);\n\n    return {\n      amountInWithFees: amountIn + feeAmount,\n      amountOut,\n      feeAmount,\n      protocolFeeAmount,\n    };\n  }\n\n  public async updateReferences(pairInfo: Pair, activeId: number) {\n    this.referenceId = pairInfo.dynamicFeeParameters.idReference;\n    this.timeLastUpdated =\n      pairInfo.dynamicFeeParameters.timeLastUpdated.toNumber();\n    this.volatilityReference =\n      pairInfo.dynamicFeeParameters.volatilityReference;\n\n    const slot = await this.connection.getSlot(); // Lấy slot hiện tại\n    const blockTimeStamp = await this.connection.getBlockTime(slot);\n\n    if (blockTimeStamp) {\n      const timeDelta = blockTimeStamp - this.timeLastUpdated;\n\n      if (timeDelta > pairInfo.staticFeeParameters.filterPeriod) {\n        this.referenceId = activeId;\n\n        if (timeDelta >= pairInfo.staticFeeParameters.decayPeriod) {\n          this.volatilityReference = 0;\n        } else {\n          return this.updateVolatilityReference(pairInfo);\n        }\n      }\n\n      this.timeLastUpdated = blockTimeStamp;\n    }\n\n    return this.updateVolatilityAccumulator(pairInfo, activeId);\n  }\n\n  public updateVolatilityReference(pairInfo: Pair) {\n    this.volatilityReference =\n      (pairInfo.dynamicFeeParameters.volatilityAccumulator *\n        pairInfo.staticFeeParameters.reductionFactor) /\n      10_000;\n  }\n\n  public updateVolatilityAccumulator(pairInfo: Pair, activeId: number) {\n    const deltaId = Math.abs(activeId - this.referenceId);\n    const volatilityAccumulator = deltaId * 10000 + this.volatilityReference;\n\n    const maxVolatilityAccumulator =\n      pairInfo.staticFeeParameters.maxVolatilityAccumulator;\n\n    if (volatilityAccumulator > maxVolatilityAccumulator) {\n      this.volatilityAccumulator = maxVolatilityAccumulator;\n    } else {\n      this.volatilityAccumulator = volatilityAccumulator;\n    }\n  }\n\n  public getVariableFee(pairInfo: Pair): bigint {\n    const variableFeeControl = BigInt(\n      pairInfo.staticFeeParameters.variableFeeControl\n    );\n    if (variableFeeControl > BigInt(0)) {\n      const prod = BigInt(\n        Math.floor(this.volatilityAccumulator * pairInfo.binStep)\n      );\n      const variableFee =\n        (prod * prod * variableFeeControl +\n          BigInt(VARIABLE_FEE_PRECISION) -\n          BigInt(1)) /\n        BigInt(VARIABLE_FEE_PRECISION);\n      return variableFee;\n    }\n    return variableFeeControl;\n  }\n\n  public getBaseFee(binStep: number, baseFactor: number): bigint {\n    return BigInt(binStep) * BigInt(baseFactor) * BigInt(10);\n  }\n\n  public getFeeForAmount(amount: bigint, fee: bigint) {\n    const denominator = BigInt(PRECISION) - fee;\n    const feeForAmount = (amount * fee + denominator - BigInt(1)) / denominator;\n\n    return feeForAmount;\n  }\n\n  public getFeeAmount(amount: bigint, fee: bigint) {\n    const feeAmount =\n      (amount * fee + BigInt(PRECISION) - BigInt(1)) / BigInt(PRECISION);\n\n    return feeAmount;\n  }\n\n  public getProtocolFee(fee: bigint, protocolShare: bigint) {\n    const protocolFee = (fee * protocolShare) / BigInt(BASIS_POINT_MAX);\n\n    return protocolFee;\n  }\n\n  public getTotalFee(pairInfo: Pair) {\n    return (\n      this.getBaseFee(\n        pairInfo.binStep,\n        pairInfo.staticFeeParameters.baseFactor\n      ) + this.getVariableFee(pairInfo)\n    );\n  }\n\n  public moveActiveId(pairId: number, swapForY: boolean) {\n    if (swapForY) {\n      return pairId - 1;\n    } else {\n      return pairId + 1;\n    }\n  }\n\n  /**\n   * Calculates the input amount required for a swap based on the desired output amount and price.\n   *\n   * @param amountOut - The desired output amount as a bigint.\n   * @param priceScaled - The scaled price as a bigint.\n   * @param scaleOffset - The scaling factor used for price adjustments.\n   * @param swapForY - A boolean indicating the direction of the swap\n   * @param rounding - Specifies the rounding mode\n   * @returns The calculated input amount as a bigint.\n   */\n  private calcAmountInByPrice(\n    amountOut: bigint,\n    priceScaled: bigint,\n    scaleOffset: number,\n    swapForY: boolean,\n    rounding: \"up\" | \"down\"\n  ): bigint {\n    if (swapForY) {\n      // amountIn = (amountOut << scaleOffset) / priceScaled\n      return rounding === \"up\"\n        ? ((amountOut << BigInt(scaleOffset)) + priceScaled - BigInt(1)) /\n            priceScaled\n        : (amountOut << BigInt(scaleOffset)) / priceScaled;\n    } else {\n      // amountIn = (amountOut * priceScaled) >> scaleOffset\n      return rounding === \"up\"\n        ? (amountOut * priceScaled +\n            (BigInt(1) << BigInt(scaleOffset)) -\n            BigInt(1)) >>\n            BigInt(scaleOffset)\n        : (amountOut * priceScaled) >> BigInt(scaleOffset);\n    }\n  }\n\n  /**\n   * Calculates the output amount based on the input amount, price, and scaling factors.\n   *\n   * @param amountIn - The input amount as a bigint.\n   * @param priceScaled - The scaled price as a bigint.\n   * @param scaleOffset - The scaling offset as a number, used to adjust the precision.\n   * @param swapForY - A boolean indicating the direction of the swap\n   * @param rounding - The rounding mode to apply when calculating the output amount\n   * @returns The calculated output amount as a bigint.\n   */\n  private calcAmountOutByPrice(\n    amountIn: bigint,\n    priceScaled: bigint,\n    scaleOffset: number,\n    swapForY: boolean,\n    rounding: \"up\" | \"down\"\n  ): bigint {\n    if (swapForY) {\n      // price = (Y / X) & swapForY => amountOut = amountIn * price\n      // amountOut = (amountIn * priceScaled) >> scaleOffset\n      return rounding === \"up\"\n        ? (amountIn * priceScaled +\n            (BigInt(1) << BigInt(scaleOffset)) -\n            BigInt(1)) >>\n            BigInt(scaleOffset)\n        : (amountIn * priceScaled) >> BigInt(scaleOffset);\n    } else {\n      // price = (X / Y) & !swapForY => amountOut = amountIn / price\n      // amountOut = (amountIn << scaleOffset) / priceScaled\n      return rounding === \"up\"\n        ? ((amountIn << BigInt(scaleOffset)) + priceScaled - BigInt(1)) /\n            priceScaled\n        : (amountIn << BigInt(scaleOffset)) / priceScaled;\n    }\n  }\n}\n","export const divRem = (numerator: number, denominator: number) => {\n  if (denominator === 0) {\n    throw new Error('Division by zero') // Xử lý lỗi chia cho 0\n  }\n\n  // Tính thương và phần dư\n  const quotient = numerator / denominator // Thương\n  const remainder = numerator % denominator // Phần dư\n\n  return [quotient, remainder] // Trả về mảng chứa thương và phần dư\n}\n\n/// (x * y) / denominator\nexport const mulDiv = (\n  x: number,\n  y: number,\n  denominator: number,\n  rounding: 'up' | 'down'\n) => {\n  const prod = x * y\n\n  if (rounding === 'up') {\n    return Math.floor((prod + denominator - 1) / denominator)\n  }\n\n  if (rounding === 'down') {\n    const [quotient] = divRem(prod, denominator)\n    return quotient\n  }\n}\n\nexport const mulShr = (\n  x: number,\n  y: number,\n  offset: number,\n  rounding: 'up' | 'down'\n) => {\n  const denominator = 1 << offset\n  return mulDiv(x, y, denominator, rounding)\n}\n\n// (x << offset) / y\nexport const shlDiv = (\n  x: number,\n  y: number,\n  offset: number,\n  rounding: 'up' | 'down'\n) => {\n  const scale = 1 << offset\n  return mulDiv(x, scale, y, rounding)\n}\n","import { Connection } from \"@solana/web3.js\";\nimport {\n  ACTIVE_ID,\n  BIN_ARRAY_SIZE,\n  FIXED_LENGTH,\n  MAX_BASIS_POINTS,\n  UNIT_PRICE_DEFAULT,\n} from \"../constants/config\";\nimport { Distribution, LiquidityShape, PositionInfo } from \"../types/services\";\nimport { divRem } from \"./math\";\n\ninterface CreateLiquidityDistributionParams {\n  shape: LiquidityShape;\n  binRange: [number, number];\n}\n\nconst getCurveDistributionFromBinRange = (binRange: number[]) => {\n  const activeId = 0;\n\n  // init return values\n  let deltaIds: number[] = [],\n    _distributionX: number[] = [],\n    _distributionY: number[] = [];\n\n  // get sigma based on radius R\n  const getSigma = (_R: number) => {\n    const factor =\n      _R >= 20\n        ? 2.0\n        : _R >= 15\n        ? 1.8\n        : _R >= 10\n        ? 1.7\n        : _R >= 8\n        ? 1.6\n        : _R >= 6\n        ? 1.5\n        : _R >= 5\n        ? 1.4\n        : 1.0;\n    return _R / factor;\n  };\n\n  // range only includes B tokens (Y tokens)\n  if (binRange[1] < activeId) {\n    const negDelta = binRange[1] - binRange[0] + 1;\n    const negativeDeltaIds = Array.from(Array(activeId - binRange[0]).keys())\n      .reverse()\n      .slice(0, negDelta)\n      .map((el) => -1 * (el + 1));\n\n    deltaIds = [...negativeDeltaIds];\n    if (activeId === binRange[1]) {\n      deltaIds.push(0);\n    }\n\n    _distributionX = [...Array(deltaIds.length).fill(0)];\n\n    // radius is num of bins\n    const R = deltaIds.length - 1;\n    const sigma = getSigma(R);\n\n    // A = 1 / (sigma  * sqrt(2 * pi))\n    const A = 1 / (Math.sqrt(Math.PI * 2) * sigma);\n\n    // dist = 2 * A * exp(-0.5 * (r /sigma) ^ 2)\n    // r is distance from right-most bin\n    _distributionY = deltaIds.map(\n      (_, ind) => 2 * A * Math.exp(-0.5 * Math.pow((R - ind) / sigma, 2))\n    );\n  }\n\n  // range only includes A tokens (X tokens)\n  else if (activeId < binRange[0]) {\n    const posDelta = binRange[1] - binRange[0] + 1;\n    const positiveDeltaIds = Array.from(Array(binRange[1] - activeId).keys())\n      .reverse()\n      .slice(0, posDelta)\n      .reverse()\n      .map((el) => el + 1);\n\n    deltaIds = [...positiveDeltaIds];\n    if (activeId === binRange[0]) {\n      deltaIds.unshift(0);\n    }\n\n    _distributionY = [...Array(deltaIds.length).fill(0)];\n\n    // radius is num of bins\n    const R = deltaIds.length - 1;\n    const sigma = getSigma(R);\n\n    // A = 1 / (sigma  * sqrt(2 * pi))\n    const A = 1 / (Math.sqrt(Math.PI * 2) * sigma);\n\n    // dist = 2 * A * exp(-0.5 * (r /sigma) ^ 2)\n    // r is distance from left-most bin\n    _distributionX = deltaIds.map(\n      (_, ind) => 2 * A * Math.exp(-0.5 * Math.pow(ind / sigma, 2))\n    );\n  }\n\n  // range includes both X and Y tokens\n  else {\n    const negDelta = activeId - binRange[0];\n    const posDelta = binRange[1] - activeId;\n\n    const negativeDeltaIds = Array.from(Array(negDelta).keys())\n      .reverse()\n      .map((el) => -1 * (el + 1));\n    const positiveDeltaIds = Array.from(Array(posDelta).keys()).map(\n      (el) => el + 1\n    );\n    deltaIds = [...negativeDeltaIds, 0, ...positiveDeltaIds];\n\n    // radius is num of bins\n    const RX = positiveDeltaIds.length;\n    const sigmaX = getSigma(RX);\n\n    // A = 1 / (sigma  * sqrt(2 * pi))\n    const AX = RX === 0 ? 1 : 1 / (Math.sqrt(Math.PI * 2) * sigmaX);\n\n    // dist = 2 * A * exp(-0.5 * (r /sigma) ^ 2)\n    // r is distance from 0\n    _distributionX = [\n      ...Array(negDelta).fill(0),\n      AX,\n      ...positiveDeltaIds.map(\n        (_, ind) => 2 * AX * Math.exp(-0.5 * Math.pow((ind + 1) / sigmaX, 2))\n      ),\n    ];\n\n    // radius is num of bins\n    const RY = negativeDeltaIds.length;\n    const sigmaY = getSigma(RY);\n\n    // A = 1 / (sigma  * sqrt(2 * pi))\n    const AY = RY === 0 ? 1 : 1 / (Math.sqrt(Math.PI * 2) * sigmaY);\n\n    // dist = 2 * A * exp(-0.5 * (r /sigma) ^ 2)\n    // r is distance from 0\n    _distributionY = [\n      ...negativeDeltaIds.map(\n        (_, ind) => 2 * AY * Math.exp(-0.5 * Math.pow((RY - ind) / sigmaY, 2))\n      ),\n      AY,\n      ...Array(posDelta).fill(0),\n    ];\n  }\n\n  let liquidityDistributionX = _distributionX.map((i) =>\n    Math.floor(i * MAX_BASIS_POINTS)\n  );\n\n  let liquidityDistributionY = _distributionY.map((i) =>\n    Math.floor(i * MAX_BASIS_POINTS)\n  );\n\n  // check totalX and totalY with MAX_BASIS_POINTS\n  const totalX = liquidityDistributionX.reduce((acc, val) => acc + val, 0);\n\n  const totalY = liquidityDistributionY.reduce((acc, val) => acc + val, 0);\n\n  if (totalX > 0 && totalX !== MAX_BASIS_POINTS) {\n    const isOverflow = totalX > MAX_BASIS_POINTS;\n    const overPoint = Math.abs(totalX - MAX_BASIS_POINTS);\n    const numberBins = liquidityDistributionX.filter((i) => i > 0).length;\n    const [quotient, remainder] = divRem(overPoint, numberBins);\n\n    liquidityDistributionX = liquidityDistributionX.map((i) => {\n      if (i === 0) return i;\n      return isOverflow ? i - Math.floor(quotient) : i + Math.floor(quotient);\n    });\n    let remainderLeft = remainder;\n    if (remainder > 0) {\n      if (!isOverflow) {\n        liquidityDistributionX = liquidityDistributionX.map((i) => {\n          if (i === 0) return i;\n          if (remainderLeft > 0) {\n            remainderLeft--;\n            return i + 1;\n          }\n          return i;\n        });\n      } else {\n        const reverseLiquid = liquidityDistributionX.reverse().map((i) => {\n          if (i === 0) return i;\n          if (remainderLeft > 0) {\n            remainderLeft--;\n            return i - 1;\n          }\n          return i;\n        });\n        liquidityDistributionX = reverseLiquid.reverse();\n      }\n    }\n  }\n\n  if (totalY > 0 && totalY !== MAX_BASIS_POINTS) {\n    const isOverflow = totalY > MAX_BASIS_POINTS;\n    const overPoint = Math.abs(totalY - MAX_BASIS_POINTS);\n    const numberBins = liquidityDistributionY.filter((i) => i > 0).length;\n    const [quotient, remainder] = divRem(overPoint, numberBins);\n\n    liquidityDistributionY = liquidityDistributionY.map((i, idx) => {\n      if (i === 0) return i;\n      if (remainder > 0 && idx === numberBins - 1) {\n        return isOverflow\n          ? i - Math.floor(quotient) - remainder\n          : i + Math.floor(quotient) + remainder;\n      }\n      return isOverflow ? i - Math.floor(quotient) : i + Math.floor(quotient);\n    });\n  }\n\n  //return\n  const liquidityDistribution = deltaIds.map((i, idx) => {\n    return {\n      relativeBinId: i,\n      distributionX: liquidityDistributionX[idx],\n      distributionY: liquidityDistributionY[idx],\n    };\n  });\n  return liquidityDistribution;\n};\n\nexport function createUniformDistribution(\n  params: CreateLiquidityDistributionParams\n): Distribution[] {\n  const { shape, binRange } = params;\n\n  const [minBin, maxBin] = binRange;\n\n  if (minBin > maxBin) {\n    throw new Error(\"Invalid binRange: minBin must be <= maxBin\");\n  }\n\n  const relativeIds = Array.from(\n    { length: maxBin - minBin + 1 },\n    (_, i) => i + minBin\n  );\n\n  if (shape === LiquidityShape.Spot) {\n    const totalArrayLength = maxBin - minBin + 1;\n    const findActiveBinIndex = relativeIds.findIndex((item) => item === 0);\n\n    if (findActiveBinIndex === -1) {\n      const isOnlyX = minBin > 0;\n      const isOnlyY = maxBin < 0;\n      const distribution = MAX_BASIS_POINTS / totalArrayLength;\n\n      return relativeIds.map((x) => ({\n        relativeBinId: x,\n        distributionX: isOnlyX ? distribution : 0,\n        distributionY: isOnlyY ? distribution : 0,\n      }));\n    }\n\n    const totalYBin = Math.abs(minBin);\n    const totalXBin = maxBin;\n\n    const distributionX = Array.from({ length: totalArrayLength }, (_, i) => {\n      if (i < findActiveBinIndex) return 0;\n      const pricePerBin = Math.floor(\n        (2 * MAX_BASIS_POINTS) / (totalXBin * 2 + 1)\n      );\n      if (i === findActiveBinIndex)\n        return MAX_BASIS_POINTS - pricePerBin * totalXBin;\n      return pricePerBin;\n    });\n\n    const distributionY = Array.from({ length: totalArrayLength }, (_, i) => {\n      if (i > findActiveBinIndex) return 0;\n      const pricePerBin = Math.floor(\n        (2 * MAX_BASIS_POINTS) / (totalYBin * 2 + 1)\n      );\n      if (i === findActiveBinIndex)\n        return MAX_BASIS_POINTS - pricePerBin * totalYBin;\n      return pricePerBin;\n    });\n\n    return relativeIds.map((x, i) => ({\n      relativeBinId: x,\n      distributionX: distributionX[i],\n      distributionY: distributionY[i],\n    }));\n  }\n\n  if (shape === LiquidityShape.Curve) {\n    return getCurveDistributionFromBinRange(binRange);\n  }\n\n  if (shape === LiquidityShape.BidAsk) {\n    //MAX_BASIS_POINTS = 10000\n    //binRange = [min, max]\n    //activeid = 0\n\n    const activeBin = 0;\n\n    let _distributionY: number[] = [];\n\n    let _distributionX: number[] = [];\n\n    let deltaIds: number[] = [];\n\n    if (maxBin < activeBin) {\n      const negDelta = maxBin - minBin + 1;\n      const negativeDeltaIds = Array.from(Array(activeBin - minBin).keys())\n        .reverse()\n        .slice(0, negDelta)\n        .map((el) => -1 * (el + 1));\n\n      deltaIds = [...negativeDeltaIds];\n\n      _distributionX = [...Array(deltaIds.length).fill(0)];\n\n      // dist = 2/R^2 * r\n      const rSquare = Math.pow(deltaIds[0], 2);\n      _distributionY = deltaIds.map((i) => ((i - 1) * -2) / rSquare);\n    } else if (activeBin < minBin) {\n      const posDelta = binRange[1] - binRange[0] + 1;\n      const positiveDeltaIds = Array.from(Array(binRange[1] - activeBin).keys())\n        .reverse()\n        .slice(0, posDelta)\n        .reverse()\n        .map((el) => el + 1);\n\n      deltaIds = [...positiveDeltaIds];\n      // dist = 2/R^2 * i\n      const rSquare = Math.pow(deltaIds[deltaIds.length - 1], 2);\n      _distributionX = deltaIds.map((i) => ((i + 1) * 2) / rSquare);\n      _distributionY = [...Array(deltaIds.length).fill(0)];\n    } else {\n      const negDelta = activeBin - binRange[0];\n      const posDelta = binRange[1] - activeBin;\n\n      const negativeDeltaIds = Array.from(Array(negDelta).keys())\n        .reverse()\n        .map((el) => -1 * (el + 1));\n      const positiveDeltaIds = Array.from(Array(posDelta).keys()).map(\n        (el) => el + 1\n      );\n\n      deltaIds = [...negativeDeltaIds, 0, ...positiveDeltaIds];\n\n      // dist = 1/R^2 * i\n      const rSquareX =\n        positiveDeltaIds.length === 0\n          ? 1\n          : positiveDeltaIds.length === 1 && positiveDeltaIds[0] === 1\n          ? 3\n          : Math.pow(positiveDeltaIds[positiveDeltaIds.length - 1], 2);\n      _distributionX = [\n        ...Array(negDelta).fill(0),\n        1 / rSquareX,\n        ...positiveDeltaIds.map((i) => (i + 1) / rSquareX),\n      ];\n\n      // dist = 1/R^2 * i\n      const rSquareY =\n        negativeDeltaIds.length === 0\n          ? 1\n          : negativeDeltaIds[0] === -1\n          ? 3\n          : Math.pow(negativeDeltaIds[0], 2);\n      _distributionY = [\n        ...negativeDeltaIds.map((i) => (-1 * (i - 1)) / rSquareY),\n        1 / rSquareY,\n        ...Array(posDelta).fill(0),\n      ];\n    }\n\n    let liquidityDistributionX = _distributionX.map((i) => {\n      return Math.floor(i * MAX_BASIS_POINTS);\n    });\n\n    let liquidityDistributionY = _distributionY.map((i) => {\n      return Math.floor(i * MAX_BASIS_POINTS);\n    });\n\n    // check totalX and totalY with MAX_BASIS_POINTS\n    const totalX = liquidityDistributionX.reduce((acc, val) => acc + val, 0);\n\n    const totalY = liquidityDistributionY.reduce((acc, val) => acc + val, 0);\n\n    if (totalX > 0 && totalX !== MAX_BASIS_POINTS) {\n      const isOverflow = totalX > MAX_BASIS_POINTS;\n      const overPoint = Math.abs(totalX - MAX_BASIS_POINTS);\n      const numberBins = liquidityDistributionX.filter((i) => i > 0).length;\n      const [quotient, remainder] = divRem(overPoint, numberBins);\n\n      liquidityDistributionX = liquidityDistributionX.map((i) => {\n        if (i === 0) return i;\n        return isOverflow ? i - Math.floor(quotient) : i + Math.floor(quotient);\n      });\n      let remainderLeft = remainder;\n      if (remainder > 0) {\n        if (!isOverflow) {\n          liquidityDistributionX = liquidityDistributionX.map((i) => {\n            if (i === 0) return i;\n            if (remainderLeft > 0) {\n              remainderLeft--;\n              return i + 1;\n            }\n            return i;\n          });\n        } else {\n          const reverseLiquid = liquidityDistributionX.reverse().map((i) => {\n            if (i === 0) return i;\n            if (remainderLeft > 0) {\n              remainderLeft--;\n              return i - 1;\n            }\n            return i;\n          });\n          liquidityDistributionX = reverseLiquid.reverse();\n        }\n      }\n    }\n\n    if (totalY > 0 && totalY !== MAX_BASIS_POINTS) {\n      const isOverflow = totalY > MAX_BASIS_POINTS;\n      const overPoint = Math.abs(totalY - MAX_BASIS_POINTS);\n      const numberBins = liquidityDistributionY.filter((i) => i > 0).length;\n      const [quotient, remainder] = divRem(overPoint, numberBins);\n\n      liquidityDistributionY = liquidityDistributionY.map((i, idx) => {\n        if (i === 0) return i;\n        if (remainder > 0 && idx === 0) {\n          return isOverflow\n            ? i - Math.floor(quotient) - remainder\n            : i + Math.floor(quotient) + remainder;\n        }\n        return isOverflow ? i - Math.floor(quotient) : i + Math.floor(quotient);\n      });\n    }\n\n    const liquidityDistribution = deltaIds.map((i, idx) => {\n      return {\n        relativeBinId: i,\n        distributionX: liquidityDistributionX[idx],\n        distributionY: liquidityDistributionY[idx],\n      };\n    });\n\n    return liquidityDistribution;\n  }\n\n  throw new Error(`Unsupported liquidity shape: ${shape}`);\n}\n\nexport const getMaxPosition = (range: [number, number], activeId: number) => {\n  const leftRangeIndex = Math.floor(activeId / 16);\n  const rangeFromIndex = [\n    Math.floor((activeId + range[0]) / 16),\n    Math.floor((activeId + range[1]) / 16),\n  ];\n\n  const positions = Array.from(\n    { length: rangeFromIndex[1] - rangeFromIndex[0] + 1 },\n    (_, index) => {\n      return rangeFromIndex[0] + index - leftRangeIndex;\n    }\n  );\n\n  return positions;\n};\n\nexport const getMaxBinArray = (range: [number, number], activeId: number) => {\n  const arrayIndex = [activeId + range[0], activeId + range[1]];\n\n  const binIndex = [\n    Math.floor(arrayIndex[0] / BIN_ARRAY_SIZE),\n    Math.floor(arrayIndex[1] / BIN_ARRAY_SIZE),\n  ];\n\n  // check if binArrayLower, binArrayUpper is the same\n  if (binIndex[1] === binIndex[0]) {\n    binIndex[1] += 1;\n  }\n\n  const binArrayIndexLen = binIndex[1] - binIndex[0] - 1;\n  const binArrayList = Array.from({ length: binArrayIndexLen + 1 }, (_, i) => {\n    const index = binIndex[0] + i * 2;\n    return {\n      binArrayLowerIndex: index,\n      binArrayUpperIndex: index + 1,\n    };\n  });\n\n  return binArrayList;\n};\n\nexport const getBinRange = (index: number, activeId: number) => {\n  const firstBinId = Math.floor(activeId % 16);\n\n  const firstArray = [-firstBinId, -firstBinId + 16 - 1];\n  const range = [\n    firstArray[0] + index * FIXED_LENGTH,\n    firstArray[1] + index * FIXED_LENGTH,\n  ];\n  return {\n    range,\n    binLower: activeId + range[0],\n    binUpper: activeId + range[1] - 1,\n  };\n};\n\nexport const findPosition = (index: number, activeBin = ACTIVE_ID) => (\n  position: PositionInfo\n) => {\n  const { binLower, binUpper } = getBinRange(index, activeBin);\n\n  return position.lowerBinId <= binLower && position.upperBinId >= binUpper;\n};\n\nexport const getGasPrice = async (connection: Connection): Promise<number> => {\n  const buffNum = 100;\n  try {\n    return await new Promise(async (resolve) => {\n      const timeout = setTimeout(() => {\n        resolve(UNIT_PRICE_DEFAULT * buffNum);\n      }, 2000);\n      const getPriority = await connection.getRecentPrioritizationFees();\n      const currentFee = getPriority\n        .filter((fee) => fee?.prioritizationFee > 0)\n        .map((fee) => fee?.prioritizationFee);\n      clearTimeout(timeout);\n      const unitPrice =\n        currentFee.length > 0\n          ? Math.max(...currentFee, UNIT_PRICE_DEFAULT)\n          : UNIT_PRICE_DEFAULT;\n      resolve(unitPrice * buffNum);\n    });\n  } catch {\n    return UNIT_PRICE_DEFAULT * buffNum;\n  }\n};","import { Pair, PairAccount } from \"../types\";\n\nexport function pairAccountToPair(account: PairAccount): Pair {\n  return {\n    bump: account.bump,\n    liquidityBookConfig: account.liquidityBookConfig.toBase58(),\n    binStep: account.binStep,\n    binStepSeed: account.binStepSeed,\n    tokenMintX: account.tokenMintX.toBase58(),\n    tokenMintY: account.tokenMintY.toBase58(),\n    staticFeeParameters: {\n      baseFactor: account.staticFeeParameters.baseFactor,\n      filterPeriod: account.staticFeeParameters.filterPeriod,\n      decayPeriod: account.staticFeeParameters.decayPeriod,\n      reductionFactor: account.staticFeeParameters.reductionFactor,\n      variableFeeControl: account.staticFeeParameters.variableFeeControl,\n      maxVolatilityAccumulator:\n        account.staticFeeParameters.maxVolatilityAccumulator,\n      protocolShare: account.staticFeeParameters.protocolShare,\n      space: Array.from(account.staticFeeParameters.space).slice(0, 2) as [\n        number,\n        number\n      ],\n    },\n    activeId: account.activeId,\n    dynamicFeeParameters: {\n      timeLastUpdated: account.dynamicFeeParameters.timeLastUpdated,\n      volatilityAccumulator: account.dynamicFeeParameters.volatilityAccumulator,\n      volatilityReference: account.dynamicFeeParameters.volatilityReference,\n      idReference: account.dynamicFeeParameters.idReference,\n      space: Array.from(account.dynamicFeeParameters.space).slice(0, 4) as [\n        number,\n        number,\n        number,\n        number\n      ],\n    },\n    protocolFeesX: account.protocolFeesX.toString(), \n    protocolFeesY: account.protocolFeesY.toString(),\n    hook: account.hook ? account.hook.toBase58() : null,\n  };\n}\n","import {\n  ComputeBudgetProgram,\n  PublicKey,\n  SystemProgram,\n  Transaction,\n  TransactionMessage,\n} from \"@solana/web3.js\";\nimport { ILiquidityBookConfig, PairAccount, PoolMetadata } from \"../types\";\nimport {\n  BIN_ARRAY_INDEX,\n  BIN_ARRAY_SIZE,\n  CCU_LIMIT,\n  FIXED_LENGTH,\n  MAX_BASIS_POINTS,\n  PRECISION,\n  SCALE_OFFSET,\n  UNIT_PRICE_DEFAULT,\n  WRAP_SOL_ADDRESS,\n} from \"../constants/config\";\nimport { BN, utils } from \"@coral-xyz/anchor\";\nimport * as spl from \"@solana/spl-token\";\nimport { LiquidityBookAbstract } from \"../interface/liquidityBookAbstract\";\nimport { getProgram } from \"./getProgram\";\nimport { Buffer } from \"buffer\";\nimport cloneDeep from \"lodash/cloneDeep\";\nimport {\n  AddLiquidityIntoPositionParams,\n  CreatePairWithConfigParams,\n  CreatePositionParams,\n  GetBinArrayParams,\n  GetBinsArrayInfoParams,\n  GetBinsReserveParams,\n  GetBinsReserveResponse,\n  GetTokenOutputParams,\n  GetTokenOutputResponse,\n  GetUserVaultInfoParams,\n  Pair,\n  RemoveMultipleLiquidityParams,\n  RemoveMultipleLiquidityResponse,\n  ReserveParams,\n  SwapParams,\n  UserPositionsParams,\n} from \"../types/services\";\nimport { LBSwapService } from \"./swap\";\nimport bigDecimal from \"js-big-decimal\";\nimport { getIdFromPrice, getPriceFromId } from \"../utils/price\";\nimport { mulDiv, mulShr, shlDiv } from \"../utils/math\";\nimport LiquidityBookIDL from \"../constants/idl/liquidity_book.json\";\nimport { bs58 } from \"@coral-xyz/anchor/dist/cjs/utils/bytes\";\nimport { getGasPrice } from \"../utils\";\nimport { pairAccountToPair } from \"../utils/typeConverters\";\n\nexport class LiquidityBookServices extends LiquidityBookAbstract {\n  bufferGas?: number;\n  constructor(config: ILiquidityBookConfig) {\n    super(config);\n  }\n\n  get lbConfig() {\n    return new PublicKey(\"BqPmjcPbAwE7mH23BY8q8VUEN4LSjhLUv41W87GsXVn8\");\n  }\n\n  get hooksConfig() {\n    return new PublicKey(\"DgW5ARD9sU3W6SJqtyJSH3QPivxWt7EMvjER9hfFKWXF\");\n  }\n\n  public async getPairAccount(pair: PublicKey) {\n    //@ts-ignore\n    return await this.lbProgram.account.pair.fetch(pair) as PairAccount;\n  }\n\n  public async getPositionAccount(position: PublicKey) {\n    //@ts-ignore\n    return await this.lbProgram.account.position.fetch(position);\n  }\n\n  async getBinArray(params: GetBinArrayParams) {\n    const { binArrayIndex, pair, payer, transaction } = params;\n\n    const binArray = PublicKey.findProgramAddressSync(\n      [\n        Buffer.from(utils.bytes.utf8.encode(\"bin_array\")),\n        pair.toBuffer(),\n        new BN(binArrayIndex).toArrayLike(Buffer, \"le\", 4),\n      ],\n      this.lbProgram.programId\n    )[0];\n\n    if (transaction && payer) {\n      const binArrayInfo = await this.connection.getAccountInfo(binArray);\n\n      if (!binArrayInfo) {\n        const initializebinArrayConfigTx = await this.lbProgram.methods\n          .initializeBinArray(binArrayIndex)\n          .accountsPartial({ pair: pair, binArray: binArray, user: payer })\n          .instruction();\n        transaction.add(initializebinArrayConfigTx);\n      }\n    }\n\n    return binArray;\n  }\n\n  public async getBinArrayInfo(params: GetBinsArrayInfoParams) {\n    const { binArrayIndex, pair, payer } = params;\n    let resultIndex = binArrayIndex;\n    let result = [];\n\n    const binArray = await this.getBinArray({\n      binArrayIndex,\n      pair,\n      payer,\n    });\n    //@ts-ignore\n    const { bins } = await this.lbProgram.account.binArray.fetch(binArray);\n    try {\n      const binArrayOther = await this.getBinArray({\n        binArrayIndex: binArrayIndex + 1,\n        pair,\n        payer,\n      });\n      //@ts-ignore\n      const res = await this.lbProgram.account.binArray.fetch(binArrayOther);\n\n      result = [...bins, ...res.bins];\n    } catch {\n      const binArrayOther = await this.getBinArray({\n        binArrayIndex: binArrayIndex - 1,\n        pair,\n        payer,\n      });\n      //@ts-ignore\n      const res = await this.lbProgram.account.binArray.fetch(binArrayOther);\n      result = [...res.bins, ...bins];\n      resultIndex -= 1;\n    }\n\n    return { bins: result, resultIndex };\n  }\n\n  public async getBinsReserveInformation(\n    params: GetBinsReserveParams\n  ): Promise<GetBinsReserveResponse[]> {\n    const { position, pair, payer } = params;\n    const positionInfo = await this.getPositionAccount(position);\n    const firstBinId = positionInfo.lowerBinId;\n    const binArrayIndex = Math.floor(firstBinId / BIN_ARRAY_SIZE);\n\n    const { bins, resultIndex } = await this.getBinArrayInfo({\n      binArrayIndex,\n      pair,\n      payer,\n    });\n\n    const firstBinIndex = resultIndex * BIN_ARRAY_SIZE;\n    const binIds = Array.from(\n      { length: positionInfo.upperBinId - firstBinId + 1 },\n      (_, i) => firstBinId - firstBinIndex + i\n    );\n\n    const reserveXY = binIds.map((binId: number, index: number) => {\n      const liquidityShare = positionInfo.liquidityShares[index].toString();\n      const activeBin = bins[binId];\n\n      if (activeBin) {\n        const totalReserveX = +BigInt(activeBin.reserveX).toString();\n\n        const totalReserveY = +BigInt(activeBin.reserveY).toString();\n\n        const totalSupply = +BigInt(activeBin.totalSupply).toString();\n\n        const reserveX =\n          Number(totalReserveX) > 0\n            ? mulDiv(\n                Number(liquidityShare),\n                Number(totalReserveX),\n                Number(totalSupply),\n                \"down\"\n              )\n            : 0;\n\n        const reserveY =\n          Number(totalReserveY) > 0\n            ? mulDiv(\n                Number(liquidityShare),\n                Number(totalReserveY),\n                Number(totalSupply),\n                \"down\"\n              )\n            : 0;\n\n        return {\n          reserveX: reserveX || 0,\n          reserveY: reserveY || 0,\n          totalSupply: +BigInt(activeBin.totalSupply).toString(),\n          binId: firstBinId + index,\n          binPosistion: binId,\n          liquidityShare: positionInfo.liquidityShares[index],\n        };\n      }\n      return {\n        reserveX: 0,\n        reserveY: 0,\n        totalSupply: \"0\",\n        binId: firstBinId + index,\n        binPosistion: binId,\n        liquidityShare: liquidityShare,\n      };\n    });\n\n    return reserveXY;\n  }\n\n  public async createPairWithConfig(params: CreatePairWithConfigParams) {\n    const { tokenBase, tokenQuote, binStep, ratePrice, payer } = params;\n\n    const tokenX = new PublicKey(tokenBase.mintAddress);\n    const tokenY = new PublicKey(tokenQuote.mintAddress);\n\n    const id = getIdFromPrice(\n      ratePrice || 1,\n      binStep,\n      tokenBase.decimal,\n      tokenQuote.decimal\n    );\n\n    let binArrayIndex = id / BIN_ARRAY_SIZE;\n\n    if (id % BIN_ARRAY_SIZE < BIN_ARRAY_SIZE / 2) {\n      binArrayIndex -= 1;\n    }\n\n    const tx = new Transaction();\n\n    const binStepConfig = PublicKey.findProgramAddressSync(\n      [\n        Buffer.from(utils.bytes.utf8.encode(\"bin_step_config\")),\n        this.lbConfig!.toBuffer(),\n        new Uint8Array([binStep]),\n      ],\n      this.lbProgram.programId\n    )[0];\n\n    const quoteAssetBadge = PublicKey.findProgramAddressSync(\n      [\n        Buffer.from(utils.bytes.utf8.encode(\"quote_asset_badge\")),\n        this.lbConfig!.toBuffer(),\n        tokenY.toBuffer(),\n      ],\n      this.lbProgram.programId\n    )[0];\n\n    const pair = PublicKey.findProgramAddressSync(\n      [\n        Buffer.from(utils.bytes.utf8.encode(\"pair\")),\n        this.lbConfig!.toBuffer(),\n        tokenX.toBuffer(),\n        tokenY.toBuffer(),\n        new Uint8Array([binStep]),\n      ],\n      this.lbProgram.programId\n    )[0];\n\n    const initializePairConfigTx = await this.lbProgram.methods\n      .initializePair(id)\n      .accountsPartial({\n        liquidityBookConfig: this.lbConfig!,\n        binStepConfig: binStepConfig,\n        quoteAssetBadge: quoteAssetBadge,\n        pair: pair,\n        tokenMintX: tokenX,\n        tokenMintY: tokenY,\n        user: payer,\n      })\n      .instruction();\n\n    tx.add(initializePairConfigTx);\n\n    const binArrayLower = PublicKey.findProgramAddressSync(\n      [\n        Buffer.from(utils.bytes.utf8.encode(\"bin_array\")),\n        pair.toBuffer(),\n        new BN(binArrayIndex).toArrayLike(Buffer, \"le\", 4),\n      ],\n      this.lbProgram.programId\n    )[0];\n\n    const binArrayUpper = PublicKey.findProgramAddressSync(\n      [\n        Buffer.from(utils.bytes.utf8.encode(\"bin_array\")),\n        pair.toBuffer(),\n        new BN(Number(binArrayIndex) + 1).toArrayLike(Buffer, \"le\", 4),\n      ],\n      this.lbProgram.programId\n    )[0];\n\n    const initializeBinArrayLowerConfigTx = await this.lbProgram.methods\n      .initializeBinArray(binArrayIndex)\n      .accountsPartial({ pair: pair, binArray: binArrayLower, user: payer })\n      .instruction();\n\n    tx.add(initializeBinArrayLowerConfigTx);\n\n    const initializeBinArrayUpperConfigTx = await this.lbProgram.methods\n      .initializeBinArray(new BN(binArrayIndex + 1))\n      .accountsPartial({ pair: pair, binArray: binArrayUpper, user: payer })\n      .instruction();\n\n    tx.add(initializeBinArrayUpperConfigTx);\n\n    return {\n      tx,\n      pair: pair.toString(),\n      binArrayLower: binArrayLower.toString(),\n      binArrayUpper: binArrayUpper.toString(),\n      hooksConfig: this.hooksConfig.toString(),\n      activeBin: Number(id),\n    };\n  }\n\n  async createPosition(params: CreatePositionParams) {\n    const {\n      payer,\n      relativeBinIdLeft,\n      relativeBinIdRight,\n      pair,\n      binArrayIndex,\n      positionMint,\n      transaction,\n    } = params;\n\n    const position = PublicKey.findProgramAddressSync(\n      [\n        Buffer.from(utils.bytes.utf8.encode(\"position\")),\n        positionMint.toBuffer(),\n      ],\n      this.lbProgram.programId\n    )[0];\n\n    const positionVault = spl.getAssociatedTokenAddressSync(\n      positionMint,\n      payer,\n      true,\n      spl.TOKEN_2022_PROGRAM_ID\n    );\n\n    await this.getBinArray({\n      binArrayIndex,\n      pair,\n      payer,\n    });\n\n    await this.getBinArray({\n      binArrayIndex: binArrayIndex + 1,\n      pair,\n      payer,\n    });\n\n    const initializePositionTx = await this.lbProgram.methods\n      .createPosition(new BN(relativeBinIdLeft), new BN(relativeBinIdRight))\n      .accountsPartial({\n        pair,\n        position: position,\n        positionMint: positionMint,\n        positionTokenAccount: positionVault,\n        tokenProgram: spl.TOKEN_2022_PROGRAM_ID,\n        user: payer,\n      })\n      .instruction();\n\n    transaction.add(initializePositionTx);\n\n    return { position: position.toString() };\n  }\n\n  async addLiquidityIntoPosition(params: AddLiquidityIntoPositionParams) {\n    const {\n      positionMint,\n      payer,\n      pair,\n      binArrayLower,\n      binArrayUpper,\n      transaction,\n      liquidityDistribution,\n      amountX,\n      amountY,\n    } = params;\n\n    const pairInfo = await this.getPairAccount(pair);\n\n    const tokenProgramX = await getProgram(\n      pairInfo.tokenMintX,\n      this.connection\n    );\n    const tokenProgramY = await getProgram(\n      pairInfo.tokenMintY,\n      this.connection\n    );\n\n    const associatedPairVaultX = await this.getPairVaultInfo({\n      tokenAddress: pairInfo.tokenMintX,\n      pair,\n    });\n\n    const associatedPairVaultY = await this.getPairVaultInfo({\n      tokenAddress: pairInfo.tokenMintY,\n      pair,\n    });\n\n    const associatedUserVaultX = await this.getUserVaultInfo({\n      tokenAddress: pairInfo.tokenMintX,\n      payer,\n    });\n\n    const associatedUserVaultY = await this.getUserVaultInfo({\n      tokenAddress: pairInfo.tokenMintY,\n      payer,\n    });\n\n    if (\n      pairInfo.tokenMintY.toString() === WRAP_SOL_ADDRESS ||\n      pairInfo.tokenMintX.toString() === WRAP_SOL_ADDRESS\n    ) {\n      const isNativeY = pairInfo.tokenMintY.toString() === WRAP_SOL_ADDRESS;\n\n      const totalAmount = isNativeY ? amountY : amountX;\n      const totalLiquid = liquidityDistribution.reduce((prev, curr) => {\n        const currAmount = isNativeY ? curr.distributionY : curr.distributionX;\n        return prev + currAmount;\n      }, 0);\n\n      if (totalLiquid) {\n        const amount = (totalLiquid * totalAmount) / MAX_BASIS_POINTS;\n\n        const associatedUserVault = isNativeY\n          ? associatedUserVaultY\n          : associatedUserVaultX;\n\n        transaction.add(\n          SystemProgram.transfer({\n            fromPubkey: payer,\n            toPubkey: associatedUserVault,\n            lamports: amount,\n          })\n        );\n        transaction.add(spl.createSyncNativeInstruction(associatedUserVault));\n      }\n    }\n\n    const unitSPrice = await getGasPrice(this.connection).catch(\n      () => undefined\n    );\n\n    const unitPrice = Math.max(\n      Number(unitSPrice) ?? 0,\n      UNIT_PRICE_DEFAULT * (this.bufferGas ?? 1)\n    );\n\n    const hook = PublicKey.findProgramAddressSync(\n      [\n        Buffer.from(utils.bytes.utf8.encode(\"hook\")),\n        this.hooksConfig.toBuffer(),\n        pair.toBuffer(),\n      ],\n      this.hooksProgram.programId\n    )[0];\n\n    const position = PublicKey.findProgramAddressSync(\n      [\n        Buffer.from(utils.bytes.utf8.encode(\"position\")),\n        positionMint.toBuffer(),\n      ],\n      this.lbProgram.programId\n    )[0];\n\n    const positionVault = spl.getAssociatedTokenAddressSync(\n      positionMint,\n      payer,\n      true,\n      spl.TOKEN_2022_PROGRAM_ID\n    );\n\n    const addLiquidityInstructions = await this.lbProgram.methods\n      .increasePosition(new BN(amountX), new BN(amountY), liquidityDistribution)\n      .accountsPartial({\n        pair: pair,\n        position: position,\n        binArrayLower: binArrayLower,\n        binArrayUpper: binArrayUpper,\n        tokenVaultX: associatedPairVaultX,\n        tokenVaultY: associatedPairVaultY,\n        userVaultX: associatedUserVaultX,\n        userVaultY: associatedUserVaultY,\n        positionTokenAccount: positionVault,\n        tokenMintX: pairInfo.tokenMintX,\n        tokenMintY: pairInfo.tokenMintY,\n        tokenProgramX,\n        tokenProgramY,\n        positionTokenProgram: spl.TOKEN_2022_PROGRAM_ID,\n        hook: hook,\n        hooksProgram: this.hooksProgram.programId,\n        user: payer,\n        positionMint,\n      })\n      .remainingAccounts([\n        { pubkey: pair, isWritable: false, isSigner: false },\n        { pubkey: binArrayLower, isWritable: false, isSigner: false },\n        { pubkey: binArrayUpper, isWritable: false, isSigner: false },\n      ])\n      .instruction();\n\n    transaction.add(\n      ComputeBudgetProgram.setComputeUnitLimit({\n        units: CCU_LIMIT,\n      })\n    );\n    transaction.add(\n      ComputeBudgetProgram.setComputeUnitPrice({\n        microLamports: unitPrice,\n      })\n    );\n\n    transaction.add(addLiquidityInstructions);\n  }\n\n  public async removeMultipleLiquidity(\n    params: RemoveMultipleLiquidityParams\n  ): Promise<RemoveMultipleLiquidityResponse> {\n    const { maxPositionList, payer, type, pair, tokenMintX, tokenMintY } =\n      params;\n\n    const tokenProgramX = await getProgram(tokenMintX, this.connection);\n    const tokenProgramY = await getProgram(tokenMintY, this.connection);\n\n    const txCreateAccount = new Transaction();\n\n    const associatedPairVaultX = await this.getPairVaultInfo({\n      tokenAddress: tokenMintX,\n      pair,\n      payer,\n      transaction: txCreateAccount,\n    });\n\n    const associatedPairVaultY = await this.getPairVaultInfo({\n      tokenAddress: tokenMintY,\n      pair,\n      payer,\n      transaction: txCreateAccount,\n    });\n\n    const associatedUserVaultX = await this.getUserVaultInfo({\n      tokenAddress: tokenMintX,\n      payer,\n      transaction: txCreateAccount,\n    });\n\n    const associatedUserVaultY = await this.getUserVaultInfo({\n      tokenAddress: tokenMintY,\n      payer,\n      transaction: txCreateAccount,\n    });\n\n    const hook = PublicKey.findProgramAddressSync(\n      [\n        Buffer.from(utils.bytes.utf8.encode(\"hook\")),\n        this.hooksConfig!.toBuffer(),\n        pair.toBuffer(),\n      ],\n      this.hooksProgram.programId\n    )[0];\n\n    const associatedHookTokenY = spl.getAssociatedTokenAddressSync(\n      tokenMintY,\n      hook,\n      true,\n      tokenProgramY\n    );\n    const infoHookTokenY = await this.connection.getAccountInfo(\n      associatedHookTokenY\n    );\n\n    if (!infoHookTokenY) {\n      const hookTokenYInstructions =\n        spl.createAssociatedTokenAccountInstruction(\n          payer,\n          associatedHookTokenY,\n          hook,\n          tokenMintY,\n          tokenProgramY\n        );\n\n      txCreateAccount.add(hookTokenYInstructions);\n    }\n\n    const unitSPrice = await getGasPrice(this.connection).catch(\n      () => undefined\n    );\n\n    const unitPrice = Math.max(\n      Number(unitSPrice) ?? 0,\n      UNIT_PRICE_DEFAULT * (this.bufferGas ?? 1)\n    );\n\n    const positionClosed: Record<string, string>[] = [];\n    const txs = await Promise.all(\n      maxPositionList.map(async ({ position, start, end, positionMint }) => {\n        const binArrayIndex = Math.floor(start / BIN_ARRAY_SIZE);\n\n        const { resultIndex } = await this.getBinArrayInfo({\n          binArrayIndex,\n          pair,\n          payer,\n        });\n\n        const binArrayLower = await this.getBinArray({\n          binArrayIndex: resultIndex,\n          pair,\n          payer,\n        });\n\n        const binArrayUpper = await this.getBinArray({\n          binArrayIndex: resultIndex + 1,\n          pair,\n          payer,\n        });\n\n        const tx = new Transaction();\n        tx.add(\n          ComputeBudgetProgram.setComputeUnitLimit({\n            units: CCU_LIMIT,\n          })\n        );\n        tx.add(\n          ComputeBudgetProgram.setComputeUnitPrice({\n            microLamports: unitPrice,\n          })\n        );\n\n        const positionVault = spl.getAssociatedTokenAddressSync(\n          new PublicKey(positionMint),\n          payer,\n          true,\n          spl.TOKEN_2022_PROGRAM_ID\n        );\n\n        const reserveXY = cloneDeep(\n          await this.getBinsReserveInformation({\n            position: new PublicKey(position),\n            pair,\n            payer,\n          })\n        );\n\n        const hookBinArrayLower = PublicKey.findProgramAddressSync(\n          [\n            Buffer.from(utils.bytes.utf8.encode(\"bin_array\")),\n            hook.toBuffer(),\n            new BN(BIN_ARRAY_INDEX).toArrayLike(Buffer, \"le\", 4),\n          ],\n          this.hooksProgram.programId\n        )[0];\n\n        const hookBinArrayUpper = PublicKey.findProgramAddressSync(\n          [\n            Buffer.from(utils.bytes.utf8.encode(\"bin_array\")),\n            hook.toBuffer(),\n            new BN(BIN_ARRAY_INDEX + 1).toArrayLike(Buffer, \"le\", 4),\n          ],\n          this.hooksProgram.programId\n        )[0];\n\n        const hookPosition = PublicKey.findProgramAddressSync(\n          [\n            Buffer.from(utils.bytes.utf8.encode(\"position\")),\n            hook.toBuffer(),\n            new PublicKey(position).toBuffer(),\n          ],\n          this.hooksProgram.programId\n        )[0];\n\n        let removedShares: BN[] = [];\n\n        if (type === \"removeBoth\") {\n          removedShares = reserveXY.map((reserve: ReserveParams) => {\n            const binId = reserve.binId;\n            if (binId >= Number(start) && binId <= Number(end)) {\n              return reserve.liquidityShare;\n            }\n\n            return new BN(0);\n          });\n        }\n\n        if (type === \"removeBaseToken\") {\n          removedShares = reserveXY.map((reserve: ReserveParams) => {\n            if (reserve.reserveX && reserve.reserveY === 0) {\n              return reserve.liquidityShare;\n            }\n\n            return new BN(0);\n          });\n        }\n\n        if (type === \"removeQuoteToken\") {\n          removedShares = reserveXY.map((reserve: ReserveParams) => {\n            if (reserve.reserveY && reserve.reserveX === 0) {\n              return reserve.liquidityShare;\n            }\n\n            return new BN(0);\n          });\n        }\n\n        const availableShares = reserveXY.filter((item: ReserveParams) =>\n          type === \"removeBoth\"\n            ? !new BN(item.liquidityShare).eq(new BN(0))\n            : type === \"removeQuoteToken\"\n            ? !item.reserveX\n            : !item.reserveY\n        );\n\n        const isClosePosition =\n          (type === \"removeBoth\" &&\n            end - start + 1 >= availableShares.length) ||\n          (end - start + 1 === FIXED_LENGTH &&\n            availableShares.length === FIXED_LENGTH);\n        if (isClosePosition) {\n          const instructions = await this.lbProgram.methods\n            .closePosition()\n            .accountsPartial({\n              pair,\n              position,\n              binArrayLower: binArrayLower,\n              binArrayUpper: binArrayUpper,\n              tokenVaultX: associatedPairVaultX,\n              tokenVaultY: associatedPairVaultY,\n              userVaultX: associatedUserVaultX,\n              userVaultY: associatedUserVaultY,\n              positionTokenAccount: positionVault,\n              tokenMintX,\n              tokenMintY,\n              tokenProgramX,\n              tokenProgramY,\n              positionTokenProgram: spl.TOKEN_2022_PROGRAM_ID,\n              hook,\n              hooksProgram: this.hooksProgram.programId,\n              user: payer,\n              positionMint,\n            })\n            .instruction();\n\n          positionClosed.push({ position });\n          tx.add(instructions);\n        } else {\n          const instructions = await this.lbProgram.methods\n            .decreasePosition(removedShares)\n            .accountsPartial({\n              pair: pair,\n              position,\n              binArrayLower: binArrayLower,\n              binArrayUpper: binArrayUpper,\n              tokenVaultX: associatedPairVaultX,\n              tokenVaultY: associatedPairVaultY,\n              userVaultX: associatedUserVaultX,\n              userVaultY: associatedUserVaultY,\n              positionTokenAccount: positionVault,\n              tokenMintX: tokenMintX,\n              tokenMintY: tokenMintY,\n              tokenProgramX,\n              tokenProgramY,\n              positionTokenProgram: spl.TOKEN_2022_PROGRAM_ID,\n              hook: hook,\n              hooksProgram: this.hooksProgram.programId,\n              user: payer,\n              positionMint,\n            })\n            ?.remainingAccounts([\n              { pubkey: pair, isWritable: false, isSigner: false },\n              { pubkey: binArrayLower, isWritable: false, isSigner: false },\n              { pubkey: binArrayUpper, isWritable: false, isSigner: false },\n              { pubkey: hookBinArrayLower, isWritable: true, isSigner: false },\n              { pubkey: hookBinArrayUpper, isWritable: true, isSigner: false },\n              { pubkey: hookPosition, isWritable: true, isSigner: false },\n            ])\n            .instruction();\n\n          tx.add(instructions);\n        }\n\n        return tx;\n      })\n    );\n\n    const txCloseAccount = new Transaction();\n\n    if (\n      tokenMintY.toString() === WRAP_SOL_ADDRESS ||\n      tokenMintX.toString() === WRAP_SOL_ADDRESS\n    ) {\n      const isNativeY = tokenMintY.toString() === WRAP_SOL_ADDRESS;\n\n      const associatedUserVault = isNativeY\n        ? associatedUserVaultY\n        : associatedUserVaultX;\n\n      txCloseAccount.add(\n        spl.createCloseAccountInstruction(associatedUserVault, payer, payer)\n      );\n    }\n\n    return {\n      txs,\n      txCreateAccount: txCreateAccount.instructions.length\n        ? txCreateAccount\n        : undefined,\n      txCloseAccount: txCloseAccount.instructions.length\n        ? txCloseAccount\n        : undefined,\n      positionClosed,\n    };\n  }\n\n  public async swap(params: SwapParams): Promise<Transaction> {\n    const {\n      tokenMintX,\n      tokenMintY,\n      amount,\n      otherAmountOffset,\n      swapForY,\n      isExactInput,\n      pair,\n      hook,\n      payer,\n    } = params;\n\n    const pairInfo = await this.getPairAccount(pair);\n    if (!pairInfo) throw new Error(\"Pair not found\");\n\n    const currentBinArrayIndex = Math.floor(pairInfo.activeId / BIN_ARRAY_SIZE);\n\n    const surroundingIndexes = [\n      currentBinArrayIndex - 1,\n      currentBinArrayIndex,\n      currentBinArrayIndex + 1,\n    ];\n\n    const binArrayAddresses = await Promise.all(\n      surroundingIndexes.map(\n        async (idx) =>\n          await this.getBinArray({\n            binArrayIndex: idx,\n            pair,\n            payer,\n          })\n      )\n    );\n    \n    const binArrayAccountsInfo = await this.connection.getMultipleAccountsInfo(\n      binArrayAddresses\n    );\n\n    const validIndexes = surroundingIndexes.filter(\n      (_, i) => binArrayAccountsInfo[i]\n    );\n\n    if (validIndexes.length < 2) {\n      throw new Error(\"No valid bin arrays found for the pair\");\n    }\n\n    let binArrayLowerIndex: number;\n    let binArrayUpperIndex: number;\n    if (validIndexes.length === 2) {\n      [binArrayLowerIndex, binArrayUpperIndex] = validIndexes;\n    } else {\n      const activeOffset = pairInfo.activeId % BIN_ARRAY_SIZE;\n      const [first, second, third] = validIndexes;\n      [binArrayLowerIndex, binArrayUpperIndex] =\n        activeOffset < BIN_ARRAY_SIZE / 2 ? [first, second] : [second, third];\n    }\n\n    const binArrayLower = await this.getBinArray({\n      pair,\n      binArrayIndex: binArrayLowerIndex,\n      payer,\n    });\n\n    const binArrayUpper = await this.getBinArray({\n      pair,\n      binArrayIndex: binArrayUpperIndex,\n      payer,\n    });\n\n    const [tokenProgramX, tokenProgramY] = await Promise.all([\n      getProgram(tokenMintX, this.connection),\n      getProgram(tokenMintY, this.connection),\n    ]);\n\n    const latestBlockHash = await this.connection.getLatestBlockhash();\n    const tx = new Transaction({\n      feePayer: payer,\n      blockhash: latestBlockHash.blockhash,\n      lastValidBlockHeight: latestBlockHash.lastValidBlockHeight,\n    });\n\n    const associatedPairVaultX = spl.getAssociatedTokenAddressSync(\n      tokenMintX,\n      pair,\n      true,\n      tokenProgramX\n    );\n\n    const associatedPairVaultY = spl.getAssociatedTokenAddressSync(\n      tokenMintY,\n      pair,\n      true,\n      tokenProgramY\n    );\n\n    const associatedUserVaultX = spl.getAssociatedTokenAddressSync(\n      tokenMintX,\n      payer,\n      true,\n      tokenProgramX\n    );\n\n    const associatedUserVaultY = spl.getAssociatedTokenAddressSync(\n      tokenMintY,\n      payer,\n      true,\n      tokenProgramY\n    );\n\n    const infoUserVaultX = await this.connection.getAccountInfo(\n      associatedUserVaultX\n    );\n\n    if (!infoUserVaultX) {\n      const userVaultXInstructions =\n        spl.createAssociatedTokenAccountInstruction(\n          payer,\n          associatedUserVaultX,\n          payer,\n          tokenMintX,\n          tokenProgramX\n        );\n\n      tx.add(userVaultXInstructions);\n    }\n\n    const infoUserVaultY = await this.connection.getAccountInfo(\n      associatedUserVaultY\n    );\n\n    if (!infoUserVaultY) {\n      const userVaultYInstructions =\n        spl.createAssociatedTokenAccountInstruction(\n          payer,\n          associatedUserVaultY,\n          payer,\n          tokenMintY,\n          tokenProgramY\n        );\n\n      tx.add(userVaultYInstructions);\n    }\n\n    const hookBinArrayLower = PublicKey.findProgramAddressSync(\n      [\n        Buffer.from(utils.bytes.utf8.encode(\"bin_array\")),\n        hook.toBuffer(),\n        new BN(BIN_ARRAY_INDEX).toArrayLike(Buffer, \"le\", 4),\n      ],\n      this.hooksProgram.programId\n    )[0];\n\n    const hookBinArrayUpper = PublicKey.findProgramAddressSync(\n      [\n        Buffer.from(utils.bytes.utf8.encode(\"bin_array\")),\n        hook.toBuffer(),\n        new BN(BIN_ARRAY_INDEX + 1).toArrayLike(Buffer, \"le\", 4),\n      ],\n      this.hooksProgram.programId\n    )[0];\n\n    if (\n      tokenMintY.toString() === WRAP_SOL_ADDRESS ||\n      tokenMintX.toString() === WRAP_SOL_ADDRESS\n    ) {\n      const isNativeY = tokenMintY.toString() === WRAP_SOL_ADDRESS;\n\n      const associatedUserVault = isNativeY\n        ? associatedUserVaultY\n        : associatedUserVaultX;\n\n      if (isNativeY && !swapForY) {\n        tx.add(\n          SystemProgram.transfer({\n            fromPubkey: payer,\n            toPubkey: associatedUserVault,\n            lamports: amount,\n          })\n        );\n        tx.add(spl.createSyncNativeInstruction(associatedUserVault));\n      }\n\n      if (!isNativeY && swapForY) {\n        tx.add(\n          SystemProgram.transfer({\n            fromPubkey: payer,\n            toPubkey: associatedUserVault,\n            lamports: amount,\n          })\n        );\n        tx.add(spl.createSyncNativeInstruction(associatedUserVault));\n      }\n    }\n\n    const swapInstructions = await this.lbProgram.methods\n      .swap(\n        new BN(amount.toString()),\n        new BN(otherAmountOffset.toString()),\n        swapForY,\n        isExactInput ? { exactInput: {} } : { exactOutput: {} }\n      )\n      .accountsPartial({\n        pair: pair,\n        binArrayLower: binArrayLower,\n        binArrayUpper: binArrayUpper,\n        tokenVaultX: associatedPairVaultX,\n        tokenVaultY: associatedPairVaultY,\n        userVaultX: associatedUserVaultX,\n        userVaultY: associatedUserVaultY,\n        tokenMintX: tokenMintX,\n        tokenMintY: tokenMintY,\n        tokenProgramX,\n        tokenProgramY,\n        user: payer,\n      })\n      .remainingAccounts([\n        { pubkey: pair, isWritable: false, isSigner: false },\n        { pubkey: binArrayLower, isWritable: false, isSigner: false },\n        { pubkey: binArrayUpper, isWritable: false, isSigner: false },\n        { pubkey: hookBinArrayLower, isWritable: true, isSigner: false },\n        { pubkey: hookBinArrayUpper, isWritable: true, isSigner: false },\n      ])\n      .instruction();\n\n    tx.add(swapInstructions);\n\n    if (\n      tokenMintY.toString() === WRAP_SOL_ADDRESS ||\n      tokenMintX.toString() === WRAP_SOL_ADDRESS\n    ) {\n      const isNativeY = tokenMintY.toString() === WRAP_SOL_ADDRESS;\n\n      const associatedUserVault = isNativeY\n        ? associatedUserVaultY\n        : associatedUserVaultX;\n      if ((isNativeY && swapForY) || (!isNativeY && !swapForY)) {\n        tx.add(\n          spl.createCloseAccountInstruction(associatedUserVault, payer, payer)\n        );\n      }\n    }\n\n    return tx;\n  }\n\n  public async getQuote(\n    params: GetTokenOutputParams\n  ): Promise<GetTokenOutputResponse> {\n    try {\n      const data = await LBSwapService.fromLbConfig(\n        this.lbProgram,\n        this.connection\n      ).calculateInOutAmount(params);\n      const { amountIn, amountOut } = data;\n\n      const slippageFraction = params.slippage / 100;\n      const slippageScaled = Math.round(slippageFraction * PRECISION);\n      let maxAmountIn = amountIn;\n      let minAmountOut = amountOut;\n      if (params.isExactInput) {\n        minAmountOut =\n          (amountOut * BigInt(PRECISION - slippageScaled)) / BigInt(PRECISION);\n      } else {\n        // max mount in should div for slippage\n        maxAmountIn =\n          (amountIn * BigInt(PRECISION)) / BigInt(PRECISION - slippageScaled);\n      }\n\n      const { maxAmountOut } = await this.getMaxAmountOutWithFee(\n        params.pair,\n        Number(amountIn.toString()),\n        params.swapForY,\n        params.tokenBaseDecimal,\n        params.tokenQuoteDecimal\n      );\n\n      const priceImpact = new bigDecimal(amountOut)\n        .subtract(new bigDecimal(maxAmountOut))\n        .divide(new bigDecimal(maxAmountOut))\n        .multiply(new bigDecimal(100))\n        .getValue();\n\n      return {\n        amountIn: amountIn,\n        amountOut: amountOut,\n        amount: params.isExactInput ? maxAmountIn : minAmountOut,\n        otherAmountOffset: params.isExactInput ? minAmountOut : maxAmountIn,\n        priceImpact: Number(priceImpact),\n      };\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  public async getMaxAmountOutWithFee(\n    pairAddress: PublicKey,\n    amount: number,\n    swapForY: boolean = false,\n    decimalBase: number = 9,\n    decimalQuote: number = 9\n  ) {\n    try {\n      let amountIn = BigInt(amount);\n      const pairAccount = await this.getPairAccount(pairAddress);\n      const pair = pairAccountToPair(pairAccount);\n      const activeId = pair?.activeId;\n      const binStep = pair?.binStep;\n      const swapService = LBSwapService.fromLbConfig(\n        this.lbProgram,\n        this.connection\n      );\n      const feePrice = swapService.getTotalFee(pair);\n      const activePrice = getPriceFromId(binStep, activeId, 9, 9);\n      const price = getPriceFromId(\n        binStep,\n        activeId,\n        decimalBase,\n        decimalQuote\n      );\n\n      const feeAmount = swapService.getFeeAmount(amountIn, feePrice);\n      amountIn = BigInt(amountIn) - BigInt(feeAmount); // new BN(amountIn).subtract(new BN(feeAmount));\n      const maxAmountOut = swapForY\n        ? mulShr(Number(amountIn.toString()), activePrice, SCALE_OFFSET, \"down\")\n        : shlDiv(\n            Number(amountIn.toString()),\n            activePrice,\n            SCALE_OFFSET,\n            \"down\"\n          );\n\n      return { maxAmountOut, price };\n    } catch {}\n\n    return { maxAmountOut: 0, price: 0 };\n  }\n\n  public getDexName() {\n    return \"Saros DLMM\";\n  }\n\n  public getDexProgramId() {\n    return this.lbProgram.programId;\n  }\n\n  public async fetchPoolAddresses() {\n    const programId = this.getDexProgramId();\n    const connection = this.connection;\n    const pairAccount = LiquidityBookIDL.accounts.find(\n      (acc) => acc.name === \"Pair\"\n    );\n    const pairAccountDiscriminator = pairAccount\n      ? pairAccount.discriminator\n      : undefined;\n\n    if (!pairAccountDiscriminator) {\n      throw new Error(\"Pair account not found\");\n    }\n\n    const accounts = await connection.getProgramAccounts(\n      new PublicKey(programId),\n      {\n        filters: [\n          {\n            memcmp: { offset: 0, bytes: bs58.encode(pairAccountDiscriminator) },\n          },\n        ],\n      }\n    );\n    if (accounts.length === 0) {\n      throw new Error(\"Pair not found\");\n    }\n    const poolAdresses = accounts.reduce((addresses: string[], account) => {\n      if (account.account.owner.toString() !== programId.toString()) {\n        return addresses;\n      }\n      if (account.account.data.length < 8) {\n        return addresses;\n      }\n      addresses.push(account.pubkey.toString());\n      return addresses;\n    }, []);\n\n    return poolAdresses;\n  }\n\n  public async getUserPositions({ payer, pair }: UserPositionsParams) {\n    const connection = this.connection;\n    const tokenAccounts = await connection.getParsedTokenAccountsByOwner(\n      payer,\n      {\n        programId: spl.TOKEN_2022_PROGRAM_ID,\n      }\n    );\n\n    const positionMints = tokenAccounts.value\n      .filter((acc) => {\n        const amount = acc.account.data.parsed.info.tokenAmount.uiAmount;\n        // Only interested in NFTs or position tokens with amount > 0\n        return amount && amount > 0;\n      })\n      .map((acc) => new PublicKey(acc.account.data.parsed.info.mint));\n\n    const positions = await Promise.all(\n      positionMints.map(async (mint) => {\n        // Derive PDA for Position account\n        const [positionPda] = await PublicKey.findProgramAddressSync(\n          [Buffer.from(utils.bytes.utf8.encode(\"position\")), mint.toBuffer()],\n          this.lbProgram.programId\n        );\n        // Fetch and decode the Position account\n        try {\n          const accountInfo = await connection.getAccountInfo(positionPda);\n          if (!accountInfo) return null;\n          //@ts-ignore\n          const position = await this.lbProgram.account.position.fetch(\n            positionPda\n          );\n          if (position.pair.toString() !== pair.toString()) return null;\n          return { ...position, position: positionPda.toString() };\n        } catch {\n          return null;\n        }\n      })\n    );\n    return positions.filter(Boolean);\n  }\n\n  public async quote(params: {\n    amount: number;\n    metadata: PoolMetadata;\n    optional: {\n      isExactInput: boolean;\n      swapForY: boolean;\n      slippage: number;\n    };\n  }) {\n    const { amount, metadata, optional } = params;\n\n    return await this.getQuote({\n      amount: BigInt(amount),\n      isExactInput: optional.isExactInput,\n      pair: new PublicKey(metadata.poolAddress),\n      slippage: optional.slippage,\n      swapForY: optional.swapForY,\n      tokenBase: new PublicKey(metadata.baseMint),\n      tokenBaseDecimal: metadata.extra.tokenBaseDecimal,\n      tokenQuote: new PublicKey(metadata.quoteMint),\n      tokenQuoteDecimal: metadata.extra.tokenQuoteDecimal,\n    });\n  }\n\n  public async fetchPoolMetadata(pair: string): Promise<PoolMetadata> {\n    const connection = this.connection;\n    //@ts-ignore\n    const pairInfo: Pair = await this.lbProgram.account.pair.fetch(\n      new PublicKey(pair)\n    );\n    if (!pairInfo) {\n      throw new Error(\"Pair not found\");\n    }\n\n    const basePairVault = await this.getPairVaultInfo({\n      tokenAddress: new PublicKey(pairInfo.tokenMintX),\n      pair: new PublicKey(pair),\n    });\n    const quotePairVault = await this.getPairVaultInfo({\n      tokenAddress: new PublicKey(pairInfo.tokenMintY),\n      pair: new PublicKey(pair),\n    });\n\n    const [baseReserve, quoteReserve] = await Promise.all([\n      connection.getTokenAccountBalance(basePairVault).catch(() => ({\n        value: {\n          uiAmount: 0,\n          amount: \"0\",\n          decimals: 0,\n          uiAmountString: \"0\",\n        },\n      })),\n      connection.getTokenAccountBalance(quotePairVault).catch(() => ({\n        value: {\n          uiAmount: 0,\n          amount: \"0\",\n          decimals: 0,\n          uiAmountString: \"0\",\n        },\n      })),\n    ]);\n\n    return {\n      poolAddress: pair,\n      baseMint: pairInfo.tokenMintX.toString(),\n      baseReserve: baseReserve.value.amount,\n      quoteMint: pairInfo.tokenMintY.toString(),\n      quoteReserve: quoteReserve.value.amount,\n      tradeFee:\n        (pairInfo.staticFeeParameters.baseFactor * pairInfo.binStep) / 1e6,\n      extra: {\n        hook: pairInfo.hook?.toString(),\n        tokenQuoteDecimal: baseReserve.value.decimals,\n        tokenBaseDecimal: quoteReserve.value.decimals,\n      },\n    };\n  }\n\n  public async getPairVaultInfo(params: {\n    tokenAddress: PublicKey;\n    pair: PublicKey;\n    payer?: PublicKey;\n    transaction?: Transaction;\n  }) {\n    const { tokenAddress, pair, payer, transaction } = params;\n\n    const tokenMint = new PublicKey(tokenAddress);\n    const tokenProgram = await getProgram(tokenMint, this.connection);\n\n    const associatedPairVault = spl.getAssociatedTokenAddressSync(\n      tokenMint,\n      pair,\n      true,\n      tokenProgram\n    );\n\n    if (transaction && payer) {\n      const infoPairVault = await this.connection.getAccountInfo(\n        associatedPairVault\n      );\n\n      if (!infoPairVault) {\n        const pairVaultYInstructions =\n          spl.createAssociatedTokenAccountInstruction(\n            payer,\n            associatedPairVault,\n            pair,\n            tokenMint,\n            tokenProgram\n          );\n        transaction.add(pairVaultYInstructions);\n      }\n    }\n\n    return associatedPairVault;\n  }\n\n  public async getUserVaultInfo(params: GetUserVaultInfoParams) {\n    const { tokenAddress, payer, transaction } = params;\n    const tokenProgram = await getProgram(tokenAddress, this.connection);\n    const associatedUserVault = spl.getAssociatedTokenAddressSync(\n      tokenAddress,\n      payer,\n      true,\n      tokenProgram\n    );\n\n    if (transaction) {\n      const infoUserVault = await this.connection.getAccountInfo(\n        associatedUserVault\n      );\n\n      if (!infoUserVault) {\n        const userVaultYInstructions =\n          spl.createAssociatedTokenAccountInstruction(\n            payer,\n            associatedUserVault,\n            payer,\n            tokenAddress,\n            tokenProgram\n          );\n        transaction.add(userVaultYInstructions);\n      }\n    }\n    return associatedUserVault;\n  }\n\n  public async listenNewPoolAddress(\n    postTxFunction: (address: string) => Promise<void>\n  ) {\n    const LB_PROGRAM_ID = this.getDexProgramId();\n    this.connection.onLogs(\n      LB_PROGRAM_ID,\n      (logInfo) => {\n        if (!logInfo.err) {\n          const logs = logInfo.logs || [];\n          for (const log of logs) {\n            if (log.includes(\"Instruction: InitializePair\")) {\n              const signature = logInfo.signature;\n\n              this.getPairAddressFromLogs(signature).then((address) => {\n                postTxFunction(address);\n              });\n            }\n          }\n        }\n      },\n      \"finalized\"\n    );\n  }\n\n  private async getPairAddressFromLogs(signature: string) {\n    const parsedTransaction = await this.connection.getTransaction(signature, {\n      maxSupportedTransactionVersion: 0,\n    });\n    if (!parsedTransaction) {\n      throw new Error(\"Transaction not found\");\n    }\n\n    const compiledMessage = parsedTransaction.transaction.message;\n    const message = TransactionMessage.decompile(compiledMessage);\n    const instructions = message.instructions;\n    const initializePairStruct = LiquidityBookIDL.instructions.find(\n      (item) => item.name === \"initialize_pair\"\n    )!;\n\n    const initializePairDescrimator = Buffer.from(\n      initializePairStruct!.discriminator\n    );\n\n    let pairAddress = \"\";\n\n    for (const instruction of instructions) {\n      const descimatorInstruction = instruction.data.subarray(0, 8);\n      if (!descimatorInstruction.equals(initializePairDescrimator)) continue;\n      //@ts-ignore\n      const accounts = initializePairStruct.accounts.map((item, index) => {\n        return {\n          name: item.name,\n          address: instruction.keys[index].pubkey.toString(),\n        };\n      });\n      pairAddress =\n        accounts.find(\n          (item: { name: string; address: string }) => item.name === \"pair\"\n        )?.address || \"\";\n    }\n    return pairAddress;\n  }\n}\n"],"names":["MODE","LiquidityShape","RemoveLiquidityType","CONFIG","_CONFIG","TESTNET","rpc","DEVNET","MAINNET","BASE_FACTOR","BIN_STEP","ACTIVE_ID","BIN_ARRAY_SIZE","BIN_ARRAY_INDEX","MAX_BASIS_POINTS","FILTER_PERIOD","DECAY_PERIOD","REDUCTION_FACTOR","VARIABLE_FEE_CONTROL","MAX_VOLATILITY_ACCUMULATOR","PROTOCOL_SHARE","START_TIME","REWARDS_DURATION","REWARDS_PER_SECOND","Math","floor","VARIABLE_FEE_PRECISION","SCALE_OFFSET","BASIS_POINT_MAX","ONE","PRECISION","UNIT_PRICE_DEFAULT","CCU_LIMIT","WRAP_SOL_ADDRESS","FIXED_LENGTH","BIN_STEP_CONFIGS","binStep","feeParameters","baseFactor","filterPeriod","decayPeriod","reductionFactor","variableFeeControl","maxVolatilityAccumulator","protocolShare","space","LiquidityBookAbstract","config","rpcUrl","_config$options","options","mode","connection","Connection","_config$options2","commitmentOrConfig","provider","AnchorProvider","defaultOptions","lbProgram","Program","LiquidityBookIDL","hooksProgram","MdmaIDL","getProgram","_ref","_asyncToGenerator","_regenerator","m","_callee","address","_account$value","account","owner","program","w","_context","n","getParsedAccountInfo","v","value","toBase58","TOKEN_PROGRAM_ID","TOKEN_2022_PROGRAM_ID","a","_x","_x2","apply","arguments","getBase","quotient","basisPointMaxBigInt","fraction","oneBigInt","result","getPriceFromId","bin_step","bin_id","baseTokenDecimal","quoteTokenDecimal","base","exponent","decimalPow","pow","getIdFromPrice","price","Error","log","binId","round","LBError","_Error","message","_this","call","name","_inheritsLoose","_wrapNativeSuper","BinArrayRange","binArrayPrevious","binArrayCurrent","binArrayNext","index","BinArrayIndexMismatch","bins","addBins","binArray","forEach","bin","_this2","_proto","prototype","getBinMut","getAllBins","Object","values","LBSwapService","volatilityAccumulator","volatilityReference","referenceId","timeLastUpdated","fromLbConfig","_proto2","getBinArray","params","binArrayIndex","pair","PublicKey","findProgramAddressSync","Buffer","from","utils","bytes","utf8","encode","toBuffer","BN","toArrayLike","programId","calculateInOutAmount","_calculateInOutAmount","_this3","amount","swapForY","isExactInput","pairInfo","currentBinArrayIndex","binArrayIndexes","binArrayAddresses","binArrays","binRange","totalSupply","amountAfterTransferFee","amountOut","amountIn","_t","p","fetch","activeId","map","idx","Promise","all","i","error","reduce","acc","cur","add","isZero","BigInt","calculateAmountOut","calculateAmountIn","_calculateAmountIn","_callee2","totalProtocolFee","amountOutLeft","totalBinUsed","activeBin","fee","_this$swapExactOutput","amountInWithFees","amountOutOfBin","protocolFeeAmount","_t2","_context2","updateReferences","updateVolatilityAccumulator","getTotalFee","swapExactOutput","staticFeeParameters","reserveX","reserveY","moveActiveId","_x3","_x4","_x5","_calculateAmountOut","_callee3","amountInLeft","_this$swapExactInput","_t3","_context3","swapExactInput","_x6","_x7","_x8","_x9","protocolShareBigInt","binReserveOut","feeAmount","binReserveOutBigInt","toString","priceScaled","Number","amountInWithoutFee","calcAmountInByPrice","getFeeForAmount","getProtocolFee","maxAmountIn","maxFeeAmount","getFeeAmount","calcAmountOutByPrice","_updateReferences","_callee4","slot","blockTimeStamp","timeDelta","_context4","dynamicFeeParameters","idReference","toNumber","getSlot","getBlockTime","updateVolatilityReference","_x0","_x1","deltaId","abs","getVariableFee","prod","variableFee","getBaseFee","denominator","feeForAmount","protocolFee","pairId","scaleOffset","rounding","divRem","numerator","remainder","mulDiv","x","y","_divRem","mulShr","offset","shlDiv","scale","getCurveDistributionFromBinRange","deltaIds","_distributionX","_distributionY","getSigma","_R","factor","negDelta","negativeDeltaIds","Array","keys","reverse","slice","el","concat","push","length","fill","R","sigma","A","sqrt","PI","_","ind","exp","posDelta","positiveDeltaIds","unshift","RX","sigmaX","AX","RY","sigmaY","AY","liquidityDistributionX","liquidityDistributionY","totalX","val","totalY","isOverflow","overPoint","numberBins","filter","remainderLeft","reverseLiquid","_divRem2","liquidityDistribution","relativeBinId","distributionX","distributionY","createUniformDistribution","shape","minBin","maxBin","relativeIds","Spot","totalArrayLength","findActiveBinIndex","findIndex","item","isOnlyX","isOnlyY","distribution","totalYBin","totalXBin","pricePerBin","Curve","BidAsk","rSquare","rSquareX","rSquareY","_divRem3","_divRem4","getMaxPosition","range","leftRangeIndex","rangeFromIndex","positions","getMaxBinArray","arrayIndex","binIndex","binArrayIndexLen","binArrayList","binArrayLowerIndex","binArrayUpperIndex","getBinRange","firstBinId","firstArray","binLower","binUpper","findPosition","position","_getBinRange","lowerBinId","upperBinId","getGasPrice","buffNum","_ref2","resolve","timeout","getPriority","currentFee","unitPrice","setTimeout","getRecentPrioritizationFees","prioritizationFee","clearTimeout","max","pairAccountToPair","bump","liquidityBookConfig","binStepSeed","tokenMintX","tokenMintY","protocolFeesX","protocolFeesY","hook","LiquidityBookServices","_LiquidityBookAbstrac","getPairAccount","_getPairAccount","getPositionAccount","_getPositionAccount","_getBinArray","payer","transaction","binArrayInfo","initializebinArrayConfigTx","getAccountInfo","methods","initializeBinArray","accountsPartial","user","instruction","getBinArrayInfo","_getBinArrayInfo","resultIndex","_yield$this$lbProgram","binArrayOther","res","_binArrayOther","_res","getBinsReserveInformation","_getBinsReserveInformation","_callee5","positionInfo","_yield$this$getBinArr","firstBinIndex","binIds","reserveXY","_context5","liquidityShare","liquidityShares","totalReserveX","totalReserveY","binPosistion","createPairWithConfig","_createPairWithConfig","_callee6","tokenBase","tokenQuote","ratePrice","tokenX","tokenY","id","tx","binStepConfig","quoteAssetBadge","initializePairConfigTx","binArrayLower","binArrayUpper","initializeBinArrayLowerConfigTx","initializeBinArrayUpperConfigTx","_context6","mintAddress","decimal","Transaction","lbConfig","Uint8Array","initializePair","hooksConfig","createPosition","_createPosition","_callee7","relativeBinIdLeft","relativeBinIdRight","positionMint","positionVault","initializePositionTx","_context7","spl","positionTokenAccount","tokenProgram","addLiquidityIntoPosition","_addLiquidityIntoPosition","_callee8","_Number","_this$bufferGas","amountX","amountY","tokenProgramX","tokenProgramY","associatedPairVaultX","associatedPairVaultY","associatedUserVaultX","associatedUserVaultY","isNativeY","totalAmount","totalLiquid","associatedUserVault","unitSPrice","addLiquidityInstructions","_context8","getPairVaultInfo","tokenAddress","getUserVaultInfo","prev","curr","currAmount","SystemProgram","transfer","fromPubkey","toPubkey","lamports","undefined","bufferGas","increasePosition","tokenVaultX","tokenVaultY","userVaultX","userVaultY","positionTokenProgram","remainingAccounts","pubkey","isWritable","isSigner","ComputeBudgetProgram","setComputeUnitLimit","units","setComputeUnitPrice","microLamports","removeMultipleLiquidity","_removeMultipleLiquidity","_callee0","_Number2","_this$bufferGas2","maxPositionList","type","txCreateAccount","associatedHookTokenY","infoHookTokenY","hookTokenYInstructions","positionClosed","txs","txCloseAccount","_context0","_callee9","start","end","_yield$_this$getBinAr","hookBinArrayLower","hookBinArrayUpper","hookPosition","removedShares","availableShares","isClosePosition","instructions","_this$lbProgram$metho","_instructions","_context9","cloneDeep","reserve","eq","closePosition","decreasePosition","swap","_swap","_callee10","otherAmountOffset","surroundingIndexes","binArrayAccountsInfo","validIndexes","activeOffset","first","second","third","_ref4","_yield$Promise$all","latestBlockHash","infoUserVaultX","userVaultXInstructions","infoUserVaultY","userVaultYInstructions","swapInstructions","_isNativeY","_associatedUserVault","_context10","_ref3","_callee1","_context1","_x10","getMultipleAccountsInfo","getLatestBlockhash","feePayer","blockhash","lastValidBlockHeight","exactInput","exactOutput","getQuote","_getQuote","_callee11","data","slippageFraction","slippageScaled","minAmountOut","_yield$this$getMaxAmo","maxAmountOut","priceImpact","_context11","slippage","getMaxAmountOutWithFee","tokenBaseDecimal","tokenQuoteDecimal","bigDecimal","subtract","divide","multiply","getValue","_x11","_getMaxAmountOutWithFee","_callee12","pairAddress","decimalBase","decimalQuote","_context12","pairAccount","swapService","feePrice","activePrice","_x12","_x13","_x14","_x15","_x16","getDexName","getDexProgramId","fetchPoolAddresses","_fetchPoolAddresses","_callee13","pairAccountDiscriminator","accounts","poolAdresses","_context13","find","discriminator","getProgramAccounts","filters","memcmp","bs58","addresses","getUserPositions","_getUserPositions","_callee15","_ref5","tokenAccounts","positionMints","_context15","getParsedTokenAccountsByOwner","parsed","info","tokenAmount","uiAmount","mint","_ref6","_callee14","_yield$PublicKey$find","positionPda","accountInfo","_context14","_extends","_x18","Boolean","_x17","quote","_quote","_callee16","metadata","optional","_context16","poolAddress","baseMint","extra","quoteMint","_x19","fetchPoolMetadata","_fetchPoolMetadata","_callee17","_pairInfo$hook","basePairVault","quotePairVault","_yield$Promise$all2","baseReserve","quoteReserve","_context17","getTokenAccountBalance","decimals","uiAmountString","tradeFee","_x20","_getPairVaultInfo","_callee18","tokenMint","associatedPairVault","infoPairVault","pairVaultYInstructions","_context18","_x21","_getUserVaultInfo","_callee19","infoUserVault","_context19","_x22","listenNewPoolAddress","_listenNewPoolAddress","_callee20","postTxFunction","_this4","LB_PROGRAM_ID","_context20","onLogs","logInfo","err","logs","_iterator","_createForOfIteratorHelperLoose","_step","done","includes","signature","getPairAddressFromLogs","then","_x23","_getPairAddressFromLogs","_callee21","parsedTransaction","compiledMessage","initializePairStruct","initializePairDescrimator","_loop","_iterator2","_step2","_context22","getTransaction","maxSupportedTransactionVersion","TransactionMessage","decompile","_accounts$find","descimatorInstruction","_context21","subarray","equals","d","_regeneratorValues","_x24","_createClass","key","get"],"mappings":"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"}