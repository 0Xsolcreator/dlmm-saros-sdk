{"version":3,"file":"dlmm-sdk.cjs.development.js","sources":["../types/config.ts","../constants/config.ts","../interface/liquidityBookAbstract.ts","../services/getProgram.ts","../utils/price.ts","../services/swap.ts","../utils/math.ts","../types/services.ts","../utils/index.ts","../services/core.ts"],"sourcesContent":["import { PublicKey } from \"@solana/web3.js\";\nimport { BN } from \"@coral-xyz/anchor\";\n\nexport enum MODE {\n  TESTNET = \"testnet\",\n  DEVNET = \"devnet\",\n  MAINNET = \"mainnet\",\n}\n\nexport type LiquidityBookConfig = {\n  baseFactor: number;\n  binStep: number;\n  activeId: number;\n  binArraySize: number;\n  binArrayIndex: number;\n  maxBasisPoints: number;\n  filterPeriod: number;\n  decayPeriod: number;\n  reductionFactor: number;\n  variableFeeControl: number;\n  maxVolatilityAccumulator: number;\n  protocolShare: number;\n  startTime: number;\n  rewardsDuration: number;\n  rewardsPerSecond: number;\n};\n\nexport interface ILiquidityBookConfig {\n  mode: MODE;\n  liquidBookConfig?: LiquidityBookConfig;\n  options?: {\n    rpcUrl: string;\n  };\n}\n\nexport type Bin = {\n  reserveX: number;\n  reserveY: number;\n  totalSupply: number;\n};\nexport type BinArray = {\n  bins: Bin[];\n  index: number;\n};\n\nexport type StaticFeeParameters = {\n  baseFactor: number;\n  filterPeriod: number;\n  decayPeriod: number;\n  reductionFactor: number;\n  variableFeeControl: number;\n  maxVolatilityAccumulator: number;\n  protocolShare: number;\n  space: Uint8Array;\n};\n\nexport type DynamicFeeParameters = {\n  timeLastUpdated: bigint;\n  volatilityAccumulator: number;\n  volatilityReference: number;\n  idReference: number;\n  space: Uint8Array;\n};\n\nexport type PairInfo = {\n  bump: Uint8Array;\n  liquidityBookConfig: PublicKey;\n  binStep: number;\n  binStepSeed: Uint8Array;\n  tokenMintX: PublicKey;\n  tokenMintY: PublicKey;\n  staticFeeParameters: StaticFeeParameters;\n  activeId: number;\n  dynamicFeeParameters: DynamicFeeParameters;\n  protocolFeesX: BN;\n  protocolFeesY: BN;\n  hook: PublicKey | null;\n};\n\nexport interface PoolMetadata {\n  poolAddress: string;\n  baseMint: string;\n  baseReserve: string;\n  quoteMint: string;\n  quoteReserve: string;\n  tradeFee: number;\n  extra: {\n    hook?: string;\n    tokenQuoteDecimal: number;\n    tokenBaseDecimal: number;\n  };\n}\n","import { MODE } from \"../types\";\n\nexport const CONFIG = {\n  [MODE.TESTNET]: {\n    rpc: \"https://api.testnet.solana.com\",\n  },\n  [MODE.DEVNET]: {\n    rpc: \"https://api.devnet.solana.com\",\n  },\n  [MODE.MAINNET]: {\n    rpc: \"https://api.mainnet-beta.solana.com\",\n  },\n};\n\nexport const BASE_FACTOR = 8_000;\nexport const BIN_STEP = 1;\nexport const ACTIVE_ID = 8388608;\nexport const BIN_ARRAY_SIZE = 256;\nexport const BIN_ARRAY_INDEX = ACTIVE_ID / BIN_ARRAY_SIZE - 1;\nexport const MAX_BASIS_POINTS = 10_000;\nexport const FILTER_PERIOD = 30;\nexport const DECAY_PERIOD = 600;\nexport const REDUCTION_FACTOR = 5_000;\nexport const VARIABLE_FEE_CONTROL = 40_000;\nexport const MAX_VOLATILITY_ACCUMULATOR = 350_000;\nexport const PROTOCOL_SHARE = 2000;\nexport const START_TIME = 1000;\nexport const REWARDS_DURATION = 24 * 3600;\nexport const REWARDS_PER_SECOND = Math.floor(100e9 / REWARDS_DURATION);\nexport const VARIABLE_FEE_PRECISION = 100_000_000_000;\nexport const SCALE_OFFSET = 64;\nexport const BASIS_POINT_MAX = 10_000;\nexport const ONE = 1 << SCALE_OFFSET;\nexport const PRECISION = 1_000_000_000;\n\nexport const UNIT_PRICE_DEFAULT = 1_000_000;\nexport const CCU_LIMIT = 400_000;\nexport const WRAP_SOL_ADDRESS = \"So11111111111111111111111111111111111111112\";\nexport const FIXED_LENGTH = 16;\n\nexport const BIN_STEP_CONFIGS = [\n  {\n    binStep: 1,\n    feeParameters: {\n      baseFactor: 10000,\n      filterPeriod: 10,\n      decayPeriod: 120,\n      reductionFactor: 5000,\n      variableFeeControl: 2000000,\n      maxVolatilityAccumulator: 100000,\n      protocolShare: 2000,\n      space: [0, 0],\n    },\n  },\n  {\n    binStep: 2,\n    feeParameters: {\n      baseFactor: 10000,\n      filterPeriod: 10,\n      decayPeriod: 120,\n      reductionFactor: 5000,\n      variableFeeControl: 500000,\n      maxVolatilityAccumulator: 250000,\n      protocolShare: 2000,\n      space: [0, 0],\n    },\n  },\n  {\n    binStep: 5,\n    feeParameters: {\n      baseFactor: 10000,\n      filterPeriod: 30,\n      decayPeriod: 600,\n      reductionFactor: 5000,\n      variableFeeControl: 120000,\n      maxVolatilityAccumulator: 300000,\n      protocolShare: 2000,\n      space: [0, 0],\n    },\n  },\n  {\n    binStep: 10,\n    feeParameters: {\n      baseFactor: 10000,\n      filterPeriod: 30,\n      decayPeriod: 600,\n      reductionFactor: 5000,\n      variableFeeControl: 40000,\n      maxVolatilityAccumulator: 350000,\n      protocolShare: 2000,\n      space: [0, 0],\n    },\n  },\n  {\n    binStep: 20,\n    feeParameters: {\n      baseFactor: 10000,\n      filterPeriod: 30,\n      decayPeriod: 600,\n      reductionFactor: 5000,\n      variableFeeControl: 20000,\n      maxVolatilityAccumulator: 350000,\n      protocolShare: 2000,\n      space: [0, 0],\n    },\n  },\n  {\n    binStep: 50,\n    feeParameters: {\n      baseFactor: 10000,\n      filterPeriod: 120,\n      decayPeriod: 1200,\n      reductionFactor: 5000,\n      variableFeeControl: 10000,\n      maxVolatilityAccumulator: 250000,\n      protocolShare: 2000,\n      space: [0, 0],\n    },\n  },\n  {\n    binStep: 100,\n    feeParameters: {\n      baseFactor: 10000,\n      filterPeriod: 300,\n      decayPeriod: 1200,\n      reductionFactor: 5000,\n      variableFeeControl: 7500,\n      maxVolatilityAccumulator: 150000,\n      protocolShare: 2000,\n      space: [0, 0],\n    },\n  },\n  {\n    binStep: 200,\n    feeParameters: {\n      baseFactor: 10000,\n      filterPeriod: 300,\n      decayPeriod: 1200,\n      reductionFactor: 5000,\n      variableFeeControl: 7500,\n      maxVolatilityAccumulator: 150000,\n      protocolShare: 2000,\n      space: [0, 0],\n    },\n  },\n  {\n    binStep: 250,\n    feeParameters: {\n      baseFactor: 20000,\n      filterPeriod: 300,\n      decayPeriod: 1200,\n      reductionFactor: 5000,\n      variableFeeControl: 7500,\n      maxVolatilityAccumulator: 150000,\n      protocolShare: 2000,\n      space: [0, 0],\n    },\n  },\n];\n","import { Connection } from \"@solana/web3.js\";\nimport { AnchorProvider, Idl, Program } from \"@coral-xyz/anchor\";\nimport { ILiquidityBookConfig } from \"../types\";\nimport { CONFIG } from \"../constants/config\";\nimport LiquidityBookIDL from \"../constants/idl/liquidity_book.json\";\nimport MdmaIDL from \"../constants/idl/mdma_hook.json\";\n\nexport abstract class LiquidityBookAbstract {\n  connection: Connection;\n\n  lbProgram!: Program<Idl>;\n  hooksProgram!: Program<Idl>;\n\n  constructor(config: ILiquidityBookConfig) {\n    // Initialize the services heref\n    this.connection = new Connection(\n      config.options?.rpcUrl || CONFIG[config.mode].rpc,\n      {\n        commitment: \"confirmed\",\n        httpHeaders: {\n          development: \"coin98\",\n        },\n      }\n    );\n\n    const provider = new AnchorProvider(\n      this.connection,\n      (window as any).solana,\n      AnchorProvider.defaultOptions()\n    );\n\n    this.lbProgram = new Program(LiquidityBookIDL as Idl, provider);\n    this.hooksProgram = new Program(MdmaIDL as Idl, provider);\n  }\n}\n","import { TOKEN_2022_PROGRAM_ID, TOKEN_PROGRAM_ID } from \"@solana/spl-token\";\nimport { Connection, PublicKey } from \"@solana/web3.js\";\n\nexport const getProgram = async (\n  address: PublicKey,\n  connection: Connection\n) => {\n  const account = await connection.getParsedAccountInfo(address);\n\n  const owner = account.value?.owner.toBase58();\n\n  const program =\n    owner === TOKEN_PROGRAM_ID.toBase58()\n      ? TOKEN_PROGRAM_ID\n      : TOKEN_2022_PROGRAM_ID;\n\n  return program;\n};\n","import { BASIS_POINT_MAX, ONE, SCALE_OFFSET } from '../constants/config'\n\nconst getBase = (binStep: number) => {\n  const quotient = binStep << SCALE_OFFSET\n  if (quotient < 0) return null\n\n  const basisPointMaxBigInt = BASIS_POINT_MAX\n\n  //@ts-ignore\n  if (basisPointMaxBigInt === 0) return null\n  const fraction = quotient / basisPointMaxBigInt\n\n  const oneBigInt = ONE\n  const result = oneBigInt + fraction\n\n  return result\n}\n\nexport const getPriceFromId = (\n  bin_step: number,\n  bin_id: number,\n  baseTokenDecimal: number,\n  quoteTokenDecimal: number\n) => {\n  const base = getBase(bin_step) as number\n  const exponent = bin_id - 8_388_608\n  const decimalPow = Math.pow(10, baseTokenDecimal - quoteTokenDecimal)\n\n  return Math.pow(base, exponent) * decimalPow\n}\n\nexport const getIdFromPrice = (\n  price: number,\n  binStep: number,\n  baseTokenDecimal: number,\n  quoteTokenDecimal: number\n): number => {\n  if (price <= 0) throw new Error('Giá phải lớn hơn 0')\n  if (binStep <= 0 || binStep > BASIS_POINT_MAX)\n    throw new Error('Bin step invalid')\n\n  const decimalPow = Math.pow(10, quoteTokenDecimal - baseTokenDecimal)\n\n  const base = 1 + binStep / BASIS_POINT_MAX\n  const exponent = Math.log(price * decimalPow) / Math.log(base)\n  const binId = Math.round(exponent + 8_388_608)\n\n  return binId\n}\n","import { BN, Idl, Program, utils } from \"@coral-xyz/anchor\";\nimport { Bin, BinArray } from \"../types\";\n\nimport { Connection, PublicKey } from \"@solana/web3.js\";\nimport {\n  BASIS_POINT_MAX,\n  BIN_ARRAY_SIZE,\n  PRECISION,\n  SCALE_OFFSET,\n  VARIABLE_FEE_PRECISION,\n} from \"../constants/config\";\nimport { getPriceFromId } from \"../utils/price\";\nimport {\n  GetBinArrayParams,\n  GetTokenOutputParams,\n  Pair,\n} from \"../types/services\";\n\nclass LBError extends Error {\n  static BinNotFound = new LBError(\"Bin not found\");\n  static BinArrayIndexMismatch = new LBError(\"Bin array index mismatch\");\n\n  constructor(message: string) {\n    super(message);\n    this.name = \"LBError\";\n  }\n}\n\nclass BinArrayRange {\n  private readonly bins: { [binId: number]: Bin };\n  constructor(\n    binArrayPrevious: BinArray,\n    binArrayCurrent: BinArray,\n    binArrayNext: BinArray\n  ) {\n    if (\n      binArrayCurrent.index !== binArrayPrevious.index + 1 ||\n      binArrayNext.index !== binArrayCurrent.index + 1\n    ) {\n      throw LBError.BinArrayIndexMismatch;\n    }\n\n    this.bins = {};\n\n    const addBins = (binArray: BinArray) => {\n      binArray.bins.forEach((bin, index) => {\n        const binId = binArray.index * BIN_ARRAY_SIZE + index;\n        this.bins[binId] = bin;\n      });\n    };\n\n    addBins(binArrayPrevious);\n    addBins(binArrayCurrent);\n    addBins(binArrayNext);\n  }\n\n  getBinMut(binId: number) {\n    const bin = this.bins[binId];\n    return bin;\n  }\n\n  getAllBins() {\n    return Object.values(this.bins);\n  }\n}\n\nexport class LBSwapService {\n  lbProgram!: Program<Idl>;\n  volatilityAccumulator: number;\n  volatilityReference: number;\n  timeLastUpdated: number;\n  referenceId: number;\n  connection: Connection;\n\n  constructor(lbProgram: Program<Idl>, connection: Connection) {\n    this.lbProgram = lbProgram;\n    this.connection = connection;\n    this.volatilityAccumulator = 0;\n    this.volatilityReference = 0;\n    this.referenceId = 0;\n    this.timeLastUpdated = 0;\n  }\n\n  static fromLbConfig(lbProgram: Program<Idl>, connection: Connection) {\n    return new LBSwapService(lbProgram, connection);\n  }\n\n  getBinArray(params: GetBinArrayParams) {\n    const { binArrayIndex, pair } = params;\n\n    const binArray = PublicKey.findProgramAddressSync(\n      [\n        Buffer.from(utils.bytes.utf8.encode(\"bin_array\")),\n        pair.toBuffer(),\n        new BN(binArrayIndex).toArrayLike(Buffer, \"le\", 4),\n      ],\n      this.lbProgram.programId\n    )[0];\n\n    return binArray;\n  }\n\n  public async calculateInOutAmount(params: GetTokenOutputParams) {\n    const { amount, swapForY, pair, isExactInput } = params;\n    try {\n       //@ts-ignore\n      const pairInfo: Pair = await this.lbProgram.account.pair.fetch(pair);\n      if (!pairInfo) throw new Error(\"Pair not found\");\n\n      const currentBinArrayIndex = Math.floor(\n        pairInfo.activeId / BIN_ARRAY_SIZE\n      );\n      const binArrayIndexes = [\n        currentBinArrayIndex - 1,\n        currentBinArrayIndex,\n        currentBinArrayIndex + 1,\n      ];\n      const binArrayAddresses = binArrayIndexes.map((idx) =>\n        this.getBinArray({\n          binArrayIndex: idx,\n          pair,\n        })\n      );\n\n      // Fetch bin arrays in batch, fallback to empty if not found\n      const binArrays: BinArray[] = await Promise.all(\n        binArrayAddresses.map((address, i) =>\n           //@ts-ignore\n          this.lbProgram.account.binArray.fetch(address).catch((error: any) => {\n            return { index: binArrayIndexes[i], bins: [] } as BinArray;\n          })\n        )\n      );\n\n      // Validate bin arrays and build range\n      const binRange = new BinArrayRange(\n        binArrays[0],\n        binArrays[1],\n        binArrays[2]\n      );\n      const totalSupply = binRange\n        .getAllBins()\n        .reduce((acc, cur) => acc.add(cur.totalSupply), new BN(0));\n      if (totalSupply.isZero()) {\n        return {\n          amountIn: BigInt(0),\n          amountOut: BigInt(0),\n        };\n      }\n\n      const amountAfterTransferFee = amount;\n\n      if (isExactInput) {\n        const amountOut = await this.calculateAmountOut(\n          amountAfterTransferFee,\n          binRange,\n          pairInfo,\n          swapForY\n        );\n\n        return {\n          amountIn: amount,\n          amountOut,\n        };\n      } else {\n        const amountIn = await this.calculateAmountIn(\n          amountAfterTransferFee,\n          binRange,\n          pairInfo,\n          swapForY\n        );\n\n        return {\n          amountIn,\n          amountOut: amountAfterTransferFee,\n        };\n      }\n    } catch (error) {\n      throw new Error(error as string);\n    }\n  }\n\n  /**\n   * @description Calculate the input amount for the swap. isExactInput = false\n   */\n  public async calculateAmountIn(\n    amount: bigint,\n    bins: BinArrayRange,\n    pairInfo: Pair,\n    swapForY: boolean\n  ) {\n    let amountIn = BigInt(0);\n    let totalProtocolFee = BigInt(0);\n    let amountOutLeft = amount;\n    let activeId = pairInfo.activeId;\n\n    await this.updateReferences(pairInfo, activeId);\n\n    while (amountOutLeft > BigInt(0)) {\n      this.updateVolatilityAccumulator(pairInfo, activeId);\n\n      const activeBin = bins.getBinMut(activeId);\n      if (!activeBin) {\n        break;\n      }\n\n      const fee = this.getTotalFee(pairInfo);\n\n      const {\n        amountInWithFees,\n        amountOut: amountOutOfBin,\n        protocolFeeAmount,\n      } = this.swapExactOutput({\n        binStep: pairInfo.binStep,\n        activeId,\n        amountOutLeft,\n        fee,\n        protocolShare: pairInfo.staticFeeParameters.protocolShare,\n        swapForY,\n        reserveX: activeBin.reserveX,\n        reserveY: activeBin.reserveY,\n      });\n\n      amountIn += amountInWithFees;\n      amountOutLeft -= amountOutOfBin;\n      totalProtocolFee += protocolFeeAmount;\n\n      if (!amountOutLeft) break;\n      activeId = this.moveActiveId(activeId, swapForY);\n    }\n\n    return amountIn;\n  }\n\n  /**\n   * @description Calculate the output amount for the swap. isExactInput = true\n   */\n  public async calculateAmountOut(\n    amount: bigint,\n    bins: BinArrayRange,\n    pairInfo: Pair,\n    swapForY: boolean\n  ) {\n    try {\n      let amountOut = BigInt(0);\n      let totalProtocolFee = BigInt(0);\n      let amountInLeft = amount;\n      let activeId = pairInfo.activeId;\n\n      await this.updateReferences(pairInfo, activeId);\n\n      while (amountInLeft > BigInt(0)) {\n        this.updateVolatilityAccumulator(pairInfo, activeId);\n\n        const activeBin = bins.getBinMut(activeId);\n        if (!activeBin) {\n          break;\n        }\n\n        const fee = this.getTotalFee(pairInfo);\n\n        const {\n          amountInWithFees,\n          amountOut: amountOutOfBin,\n          protocolFeeAmount,\n        } = this.swapExactInput({\n          binStep: pairInfo.binStep,\n          activeId,\n          amountInLeft,\n          fee,\n          protocolShare: pairInfo.staticFeeParameters.protocolShare,\n          swapForY,\n          reserveX: activeBin.reserveX,\n          reserveY: activeBin.reserveY,\n        });\n\n        amountOut += amountOutOfBin;\n        amountInLeft -= amountInWithFees;\n        totalProtocolFee += protocolFeeAmount;\n\n        if (!amountInLeft) break;\n        activeId = this.moveActiveId(activeId, swapForY);\n      }\n\n      return amountOut;\n    } catch (error) {\n      throw new Error(error as string);\n    }\n  }\n\n  public swapExactOutput(params: {\n    binStep: number;\n    activeId: number;\n    amountOutLeft: bigint;\n    fee: bigint;\n    protocolShare: number;\n    swapForY: boolean;\n    reserveX: BN;\n    reserveY: BN;\n  }) {\n    const {\n      binStep,\n      activeId,\n      amountOutLeft,\n      protocolShare,\n      swapForY,\n      reserveX,\n      reserveY,\n      fee,\n    } = params;\n    const protocolShareBigInt = BigInt(protocolShare);\n    const binReserveOut = swapForY ? reserveY : reserveX;\n\n    if (binReserveOut.isZero()) {\n      return {\n        amountInWithFees: BigInt(0),\n        amountOut: BigInt(0),\n        feeAmount: BigInt(0),\n        protocolFeeAmount: BigInt(0),\n      };\n    }\n\n    const binReserveOutBigInt = BigInt(binReserveOut.toString());\n    const amountOut =\n      amountOutLeft > binReserveOutBigInt ? binReserveOutBigInt : amountOutLeft;\n\n    /** @notice assume base token and quote token have the same decimals to get the price */\n    const price = getPriceFromId(binStep, activeId, 9, 9);\n    // Encode price as bigint with SCALE_OFFSET\n    const priceScaled = BigInt(\n      Math.round(Number(price) * Math.pow(2, SCALE_OFFSET))\n    );\n\n    const amountInWithoutFee = this.calcAmountInByPrice(\n      amountOut,\n      priceScaled,\n      SCALE_OFFSET,\n      swapForY,\n      \"up\"\n    );\n\n    const feeAmount = this.getFeeForAmount(amountInWithoutFee, fee);\n    const amountIn = amountInWithoutFee + feeAmount;\n    const protocolFeeAmount = this.getProtocolFee(\n      feeAmount,\n      protocolShareBigInt\n    );\n\n    return {\n      amountInWithFees: amountIn,\n      amountOut,\n      feeAmount,\n      protocolFeeAmount,\n    };\n  }\n\n  public swapExactInput(params: {\n    binStep: number;\n    activeId: number;\n    amountInLeft: bigint;\n    fee: bigint;\n    protocolShare: number;\n    swapForY: boolean;\n    reserveX: BN;\n    reserveY: BN;\n  }) {\n    const {\n      binStep,\n      activeId,\n      amountInLeft,\n      protocolShare,\n      swapForY,\n      reserveX,\n      reserveY,\n      fee,\n    } = params;\n    const protocolShareBigInt = BigInt(protocolShare);\n    const binReserveOut = swapForY ? reserveY : reserveX;\n\n    if (binReserveOut.isZero()) {\n      return {\n        amountInWithFees: BigInt(0),\n        amountOut: BigInt(0),\n        feeAmount: BigInt(0),\n        protocolFeeAmount: BigInt(0),\n      };\n    }\n\n    const binReserveOutBigInt = BigInt(binReserveOut.toString());\n\n    /** @notice assume base token and quote token have the same decimals to get the price */\n    const price = getPriceFromId(binStep, activeId, 9, 9);\n    // Encode price as bigint with SCALE_OFFSET\n    const priceScaled = BigInt(\n      Math.round(Number(price) * Math.pow(2, SCALE_OFFSET))\n    );\n\n    // Calculate maxAmountIn (input needed to take all output in bin, before fee)\n    let maxAmountIn = this.calcAmountInByPrice(\n      binReserveOutBigInt,\n      priceScaled,\n      SCALE_OFFSET,\n      swapForY,\n      \"up\"\n    );\n\n    // Add fee to get total input needed (ceil)\n    const maxFeeAmount = this.getFeeForAmount(maxAmountIn, fee);\n    maxAmountIn += maxFeeAmount;\n\n    let amountOut = BigInt(0);\n    let amountIn = BigInt(0);\n    let feeAmount = BigInt(0);\n\n    if (amountInLeft >= maxAmountIn) {\n      feeAmount = maxFeeAmount;\n      amountIn = maxAmountIn - feeAmount;\n      amountOut = binReserveOutBigInt;\n    } else {\n      feeAmount = this.getFeeAmount(amountInLeft, fee);\n      amountIn = amountInLeft - feeAmount;\n      amountOut = this.calcAmountOutByPrice(\n        amountIn,\n        priceScaled,\n        SCALE_OFFSET,\n        swapForY,\n        \"down\"\n      );\n      if (amountOut > binReserveOutBigInt) {\n        amountOut = binReserveOutBigInt;\n      }\n    }\n\n    const protocolFeeAmount =\n      protocolShare > BigInt(0)\n        ? this.getProtocolFee(feeAmount, protocolShareBigInt)\n        : BigInt(0);\n\n    return {\n      amountInWithFees: amountIn + feeAmount,\n      amountOut,\n      feeAmount,\n      protocolFeeAmount,\n    };\n  }\n\n  public async updateReferences(pairInfo: Pair, activeId: number) {\n    this.referenceId = pairInfo.dynamicFeeParameters.idReference;\n    this.timeLastUpdated =\n      pairInfo.dynamicFeeParameters.timeLastUpdated.toNumber();\n    this.volatilityReference =\n      pairInfo.dynamicFeeParameters.volatilityReference;\n\n    const slot = await this.connection.getSlot(); // Lấy slot hiện tại\n    const blockTimeStamp = await this.connection.getBlockTime(slot);\n\n    if (blockTimeStamp) {\n      const timeDelta = blockTimeStamp - this.timeLastUpdated;\n\n      if (timeDelta > pairInfo.staticFeeParameters.filterPeriod) {\n        this.referenceId = activeId;\n\n        if (timeDelta >= pairInfo.staticFeeParameters.decayPeriod) {\n          this.volatilityReference = 0;\n        } else {\n          return this.updateVolatilityReference(pairInfo);\n        }\n      }\n\n      this.timeLastUpdated = blockTimeStamp;\n    }\n\n    return this.updateVolatilityAccumulator(pairInfo, activeId);\n  }\n\n  public updateVolatilityReference(pairInfo: Pair) {\n    this.volatilityReference =\n      (pairInfo.dynamicFeeParameters.volatilityAccumulator *\n        pairInfo.staticFeeParameters.reductionFactor) /\n      10_000;\n  }\n\n  public updateVolatilityAccumulator(pairInfo: Pair, activeId: number) {\n    const deltaId = Math.abs(activeId - this.referenceId);\n    const volatilityAccumulator = deltaId * 10000 + this.volatilityReference;\n\n    const maxVolatilityAccumulator =\n      pairInfo.staticFeeParameters.maxVolatilityAccumulator;\n\n    if (volatilityAccumulator > maxVolatilityAccumulator) {\n      this.volatilityAccumulator = maxVolatilityAccumulator;\n    } else {\n      this.volatilityAccumulator = volatilityAccumulator;\n    }\n  }\n\n  public getVariableFee(pairInfo: Pair): bigint {\n    const variableFeeControl = BigInt(\n      pairInfo.staticFeeParameters.variableFeeControl\n    );\n    if (variableFeeControl > BigInt(0)) {\n      const prod = BigInt(\n        Math.floor(this.volatilityAccumulator * pairInfo.binStep)\n      );\n      const variableFee =\n        (prod * prod * variableFeeControl +\n          BigInt(VARIABLE_FEE_PRECISION) -\n          BigInt(1)) /\n        BigInt(VARIABLE_FEE_PRECISION);\n      return variableFee;\n    }\n    return variableFeeControl;\n  }\n\n  public getBaseFee(binStep: number, baseFactor: number): bigint {\n    return BigInt(binStep) * BigInt(baseFactor) * BigInt(10);\n  }\n\n  public getFeeForAmount(amount: bigint, fee: bigint) {\n    const denominator = BigInt(PRECISION) - fee;\n    const feeForAmount = (amount * fee + denominator - BigInt(1)) / denominator;\n\n    return feeForAmount;\n  }\n\n  public getFeeAmount(amount: bigint, fee: bigint) {\n    const feeAmount =\n      (amount * fee + BigInt(PRECISION) - BigInt(1)) / BigInt(PRECISION);\n\n    return feeAmount;\n  }\n\n  public getProtocolFee(fee: bigint, protocolShare: bigint) {\n    const protocolFee = (fee * protocolShare) / BigInt(BASIS_POINT_MAX);\n\n    return protocolFee;\n  }\n\n  public getTotalFee(pairInfo: Pair) {\n    return (\n      this.getBaseFee(\n        pairInfo.binStep,\n        pairInfo.staticFeeParameters.baseFactor\n      ) + this.getVariableFee(pairInfo)\n    );\n  }\n\n  public moveActiveId(pairId: number, swapForY: boolean) {\n    if (swapForY) {\n      return pairId - 1;\n    } else {\n      return pairId + 1;\n    }\n  }\n\n  /**\n   * Calculates the input amount required for a swap based on the desired output amount and price.\n   *\n   * @param amountOut - The desired output amount as a bigint.\n   * @param priceScaled - The scaled price as a bigint.\n   * @param scaleOffset - The scaling factor used for price adjustments.\n   * @param swapForY - A boolean indicating the direction of the swap\n   * @param rounding - Specifies the rounding mode\n   * @returns The calculated input amount as a bigint.\n   */\n  private calcAmountInByPrice(\n    amountOut: bigint,\n    priceScaled: bigint,\n    scaleOffset: number,\n    swapForY: boolean,\n    rounding: \"up\" | \"down\"\n  ): bigint {\n    if (swapForY) {\n      // amountIn = (amountOut << scaleOffset) / priceScaled\n      return rounding === \"up\"\n        ? ((amountOut << BigInt(scaleOffset)) + priceScaled - BigInt(1)) /\n            priceScaled\n        : (amountOut << BigInt(scaleOffset)) / priceScaled;\n    } else {\n      // amountIn = (amountOut * priceScaled) >> scaleOffset\n      return rounding === \"up\"\n        ? (amountOut * priceScaled +\n            (BigInt(1) << BigInt(scaleOffset)) -\n            BigInt(1)) >>\n            BigInt(scaleOffset)\n        : (amountOut * priceScaled) >> BigInt(scaleOffset);\n    }\n  }\n\n  /**\n   * Calculates the output amount based on the input amount, price, and scaling factors.\n   *\n   * @param amountIn - The input amount as a bigint.\n   * @param priceScaled - The scaled price as a bigint.\n   * @param scaleOffset - The scaling offset as a number, used to adjust the precision.\n   * @param swapForY - A boolean indicating the direction of the swap\n   * @param rounding - The rounding mode to apply when calculating the output amount\n   * @returns The calculated output amount as a bigint.\n   */\n  private calcAmountOutByPrice(\n    amountIn: bigint,\n    priceScaled: bigint,\n    scaleOffset: number,\n    swapForY: boolean,\n    rounding: \"up\" | \"down\"\n  ): bigint {\n    if (swapForY) {\n      // price = (Y / X) & swapForY => amountOut = amountIn * price\n      // amountOut = (amountIn * priceScaled) >> scaleOffset\n      return rounding === \"up\"\n        ? (amountIn * priceScaled +\n            (BigInt(1) << BigInt(scaleOffset)) -\n            BigInt(1)) >>\n            BigInt(scaleOffset)\n        : (amountIn * priceScaled) >> BigInt(scaleOffset);\n    } else {\n      // price = (X / Y) & !swapForY => amountOut = amountIn / price\n      // amountOut = (amountIn << scaleOffset) / priceScaled\n      return rounding === \"up\"\n        ? ((amountIn << BigInt(scaleOffset)) + priceScaled - BigInt(1)) /\n            priceScaled\n        : (amountIn << BigInt(scaleOffset)) / priceScaled;\n    }\n  }\n}\n","export const divRem = (numerator: number, denominator: number) => {\n  if (denominator === 0) {\n    throw new Error('Division by zero') // Xử lý lỗi chia cho 0\n  }\n\n  // Tính thương và phần dư\n  const quotient = numerator / denominator // Thương\n  const remainder = numerator % denominator // Phần dư\n\n  return [quotient, remainder] // Trả về mảng chứa thương và phần dư\n}\n\n/// (x * y) / denominator\nexport const mulDiv = (\n  x: number,\n  y: number,\n  denominator: number,\n  rounding: 'up' | 'down'\n) => {\n  const prod = x * y\n\n  if (rounding === 'up') {\n    return Math.floor((prod + denominator - 1) / denominator)\n  }\n\n  if (rounding === 'down') {\n    const [quotient] = divRem(prod, denominator)\n    return quotient\n  }\n}\n\nexport const mulShr = (\n  x: number,\n  y: number,\n  offset: number,\n  rounding: 'up' | 'down'\n) => {\n  const denominator = 1 << offset\n  return mulDiv(x, y, denominator, rounding)\n}\n\n// (x << offset) / y\nexport const shlDiv = (\n  x: number,\n  y: number,\n  offset: number,\n  rounding: 'up' | 'down'\n) => {\n  const scale = 1 << offset\n  return mulDiv(x, scale, y, rounding)\n}\n","import { PublicKey, Transaction } from \"@solana/web3.js\";\nimport { BN } from \"@coral-xyz/anchor\";\n\nexport enum LiquidityShape {\n  Spot = \"Spot\",\n  Curve = \"Curve\",\n  BidAsk = \"BidAsk\",\n}\n\nexport enum RemoveLiquidityType {\n  Both = \"removeBoth\",\n  BaseToken = \"removeBaseToken\",\n  QuoteToken = \"removeQuoteToken\",\n}\n\nexport interface PositionInfo {\n  pair: string;\n  positionMint: string;\n  position: string;\n\n  liquidityShares: string[];\n  lowerBinId: number;\n  upperBinId: number;\n  space: number[];\n}\n\nexport interface GetBinArrayParams {\n  binArrayIndex: number;\n  pair: PublicKey;\n  payer?: PublicKey;\n  transaction?: Transaction;\n}\nexport interface SwapParams {\n  tokenMintX: PublicKey;\n  tokenMintY: PublicKey;\n  amount: bigint;\n  otherAmountOffset: bigint;\n  swapForY: boolean;\n  isExactInput: boolean;\n  pair: PublicKey;\n  hook: PublicKey;\n  payer: PublicKey;\n}\n\nexport interface GetTokenOutputParams {\n  pair: PublicKey;\n  tokenBase: PublicKey;\n  tokenQuote: PublicKey;\n  amount: bigint;\n  swapForY: boolean;\n  isExactInput: boolean;\n  tokenBaseDecimal: number;\n  tokenQuoteDecimal: number;\n  slippage: number;\n}\n\nexport interface GetTokenOutputResponse {\n  amountIn: bigint;\n  amountOut: bigint;\n  priceImpact: number;\n  amount: bigint;\n  otherAmountOffset: bigint;\n}\n\nexport interface Pair {\n  bump: number[];\n  liquidityBookConfig: string; // PublicKey as string\n  binStep: number;\n  binStepSeed: number[];\n  tokenMintX: string; // PublicKey as string\n  tokenMintY: string; // PublicKey as string\n  staticFeeParameters: {\n    baseFactor: number;\n    filterPeriod: number;\n    decayPeriod: number;\n    reductionFactor: number;\n    variableFeeControl: number;\n    maxVolatilityAccumulator: number;\n    protocolShare: number;\n    space: [number, number];\n  };\n  activeId: number;\n  dynamicFeeParameters: {\n    timeLastUpdated: BN; // hex string, likely timestamp\n    volatilityAccumulator: number;\n    volatilityReference: number;\n    idReference: number;\n    space: [number, number, number, number];\n  };\n  protocolFeesX: string; // likely bytes/hex\n  protocolFeesY: string; // likely bytes/hex\n  hook: null | string; // hook could be nullable\n}\n\ninterface Bin {\n  totalSupply: string;\n  reserveX: string;\n  reserveY: string;\n}\n\nexport interface BinArray {\n  index: number;\n  pair: PublicKey;\n  bins: Bin[];\n  space: number[];\n}\n\nexport interface CreatePairWithConfigParams {\n  tokenBase: {\n    decimal: number;\n    mintAddress: string;\n  };\n  tokenQuote: {\n    decimal: number;\n    mintAddress: string;\n  };\n  binStep: number;\n  ratePrice: number;\n  payer: PublicKey;\n}\n\nexport interface CreatePositionParams {\n  payer: PublicKey;\n  relativeBinIdLeft: number;\n  relativeBinIdRight: number;\n  pair: PublicKey;\n  binArrayIndex: number;\n  positionMint: PublicKey;\n  transaction: Transaction;\n}\n\nexport interface GetUserVaultInfoParams {\n  tokenAddress: PublicKey;\n  payer: PublicKey;\n  transaction?: Transaction;\n}\n\nexport interface Distribution {\n  relativeBinId: number;\n  distributionX: number;\n  distributionY: number;\n}\n\nexport interface AddLiquidityIntoPositionParams {\n  positionMint: PublicKey;\n  payer: PublicKey;\n  pair: PublicKey;\n  transaction: Transaction;\n  liquidityDistribution: Distribution[];\n  amountY: number;\n  amountX: number;\n  binArrayLower: PublicKey;\n  binArrayUpper: PublicKey;\n}\n\nexport interface AddLiquidityParams {\n  tokenX: {\n    address?: string;\n    decimals: number;\n    amount: number;\n    mintAddress: string;\n  };\n  tokenY: {\n    address?: string;\n    decimals: number;\n    amount: number;\n    mintAddress: string;\n  };\n\n  pair: string;\n  binRange: [number, number];\n  positions: PositionInfo[];\n  shape: LiquidityShape;\n  activeBin: number;\n  refId: number;\n  payer: PublicKey;\n}\n\nexport interface RemoveMultipleLiquidityParams {\n  maxPositionList: {\n    position: string;\n    start: number;\n    end: number;\n    positionMint: string;\n  }[];\n  payer: PublicKey;\n  type: \"removeBoth\" | \"removeBaseToken\" | \"removeQuoteToken\";\n  pair: PublicKey;\n  tokenMintX: PublicKey;\n  tokenMintY: PublicKey;\n  activeId: number;\n}\n\nexport interface RemoveMultipleLiquidityResponse {\n  txs: Transaction[];\n  txCreateAccount?: Transaction;\n  txCloseAccount?: Transaction;\n  positionClosed?: Record<string, string>[];\n}\n\nexport interface GetBinsArrayInfoParams {\n  binArrayIndex: number;\n  pair: PublicKey;\n  payer: PublicKey;\n}\n\nexport interface GetBinsReserveParams {\n  position: PublicKey;\n  pair: PublicKey;\n  payer: PublicKey;\n}\n\nexport interface GetBinsReserveResponse {\n  reserveX: string | number;\n  reserveY: string | number;\n  totalSupply: string | number;\n  liquidityShare: BN;\n  binId: number;\n  binPosistion: number;\n}\n\nexport interface ReserveParams {\n  binId: number;\n  reserveX: string | number;\n  reserveY: string | number;\n  liquidityShare: string | number;\n}\n\nexport interface UserPositionsParams {\n  payer: PublicKey;\n  pair: PublicKey;\n}\n","import { Connection } from \"@solana/web3.js\";\nimport {\n  ACTIVE_ID,\n  BIN_ARRAY_SIZE,\n  FIXED_LENGTH,\n  MAX_BASIS_POINTS,\n  UNIT_PRICE_DEFAULT,\n} from \"../constants/config\";\nimport { LiquidityShape, PositionInfo } from \"../types/services\";\nimport { divRem } from \"./math\";\n\nexport interface Distribution {\n  relativeBinId: number;\n  distributionX: number;\n  distributionY: number;\n}\n\ninterface CreateLiquidityDistributionParams {\n  shape: LiquidityShape;\n  binRange: [number, number];\n}\n\nconst getCurveDistributionFromBinRange = (binRange: number[]) => {\n  const activeId = 0;\n\n  // init return values\n  let deltaIds: number[] = [],\n    _distributionX: number[] = [],\n    _distributionY: number[] = [];\n\n  // get sigma based on radius R\n  const getSigma = (_R: number) => {\n    const factor =\n      _R >= 20\n        ? 2.0\n        : _R >= 15\n        ? 1.8\n        : _R >= 10\n        ? 1.7\n        : _R >= 8\n        ? 1.6\n        : _R >= 6\n        ? 1.5\n        : _R >= 5\n        ? 1.4\n        : 1.0;\n    return _R / factor;\n  };\n\n  // range only includes B tokens (Y tokens)\n  if (binRange[1] < activeId) {\n    const negDelta = binRange[1] - binRange[0] + 1;\n    const negativeDeltaIds = Array.from(Array(activeId - binRange[0]).keys())\n      .reverse()\n      .slice(0, negDelta)\n      .map((el) => -1 * (el + 1));\n\n    deltaIds = [...negativeDeltaIds];\n    if (activeId === binRange[1]) {\n      deltaIds.push(0);\n    }\n\n    _distributionX = [...Array(deltaIds.length).fill(0)];\n\n    // radius is num of bins\n    const R = deltaIds.length - 1;\n    const sigma = getSigma(R);\n\n    // A = 1 / (sigma  * sqrt(2 * pi))\n    const A = 1 / (Math.sqrt(Math.PI * 2) * sigma);\n\n    // dist = 2 * A * exp(-0.5 * (r /sigma) ^ 2)\n    // r is distance from right-most bin\n    _distributionY = deltaIds.map(\n      (_, ind) => 2 * A * Math.exp(-0.5 * Math.pow((R - ind) / sigma, 2))\n    );\n  }\n\n  // range only includes A tokens (X tokens)\n  else if (activeId < binRange[0]) {\n    const posDelta = binRange[1] - binRange[0] + 1;\n    const positiveDeltaIds = Array.from(Array(binRange[1] - activeId).keys())\n      .reverse()\n      .slice(0, posDelta)\n      .reverse()\n      .map((el) => el + 1);\n\n    deltaIds = [...positiveDeltaIds];\n    if (activeId === binRange[0]) {\n      deltaIds.unshift(0);\n    }\n\n    _distributionY = [...Array(deltaIds.length).fill(0)];\n\n    // radius is num of bins\n    const R = deltaIds.length - 1;\n    const sigma = getSigma(R);\n\n    // A = 1 / (sigma  * sqrt(2 * pi))\n    const A = 1 / (Math.sqrt(Math.PI * 2) * sigma);\n\n    // dist = 2 * A * exp(-0.5 * (r /sigma) ^ 2)\n    // r is distance from left-most bin\n    _distributionX = deltaIds.map(\n      (_, ind) => 2 * A * Math.exp(-0.5 * Math.pow(ind / sigma, 2))\n    );\n  }\n\n  // range includes both X and Y tokens\n  else {\n    const negDelta = activeId - binRange[0];\n    const posDelta = binRange[1] - activeId;\n\n    const negativeDeltaIds = Array.from(Array(negDelta).keys())\n      .reverse()\n      .map((el) => -1 * (el + 1));\n    const positiveDeltaIds = Array.from(Array(posDelta).keys()).map(\n      (el) => el + 1\n    );\n    deltaIds = [...negativeDeltaIds, 0, ...positiveDeltaIds];\n\n    // radius is num of bins\n    const RX = positiveDeltaIds.length;\n    const sigmaX = getSigma(RX);\n\n    // A = 1 / (sigma  * sqrt(2 * pi))\n    const AX = RX === 0 ? 1 : 1 / (Math.sqrt(Math.PI * 2) * sigmaX);\n\n    // dist = 2 * A * exp(-0.5 * (r /sigma) ^ 2)\n    // r is distance from 0\n    _distributionX = [\n      ...Array(negDelta).fill(0),\n      AX,\n      ...positiveDeltaIds.map(\n        (_, ind) => 2 * AX * Math.exp(-0.5 * Math.pow((ind + 1) / sigmaX, 2))\n      ),\n    ];\n\n    // radius is num of bins\n    const RY = negativeDeltaIds.length;\n    const sigmaY = getSigma(RY);\n\n    // A = 1 / (sigma  * sqrt(2 * pi))\n    const AY = RY === 0 ? 1 : 1 / (Math.sqrt(Math.PI * 2) * sigmaY);\n\n    // dist = 2 * A * exp(-0.5 * (r /sigma) ^ 2)\n    // r is distance from 0\n    _distributionY = [\n      ...negativeDeltaIds.map(\n        (_, ind) => 2 * AY * Math.exp(-0.5 * Math.pow((RY - ind) / sigmaY, 2))\n      ),\n      AY,\n      ...Array(posDelta).fill(0),\n    ];\n  }\n\n  let liquidityDistributionX = _distributionX.map((i) =>\n    Math.floor(i * MAX_BASIS_POINTS)\n  );\n\n  let liquidityDistributionY = _distributionY.map((i) =>\n    Math.floor(i * MAX_BASIS_POINTS)\n  );\n\n  // check totalX and totalY with MAX_BASIS_POINTS\n  const totalX = liquidityDistributionX.reduce((acc, val) => acc + val, 0);\n\n  const totalY = liquidityDistributionY.reduce((acc, val) => acc + val, 0);\n\n  if (totalX > 0 && totalX !== MAX_BASIS_POINTS) {\n    const isOverflow = totalX > MAX_BASIS_POINTS;\n    const overPoint = Math.abs(totalX - MAX_BASIS_POINTS);\n    const numberBins = liquidityDistributionX.filter((i) => i > 0).length;\n    const [quotient, remainder] = divRem(overPoint, numberBins);\n\n    liquidityDistributionX = liquidityDistributionX.map((i) => {\n      if (i === 0) return i;\n      return isOverflow ? i - Math.floor(quotient) : i + Math.floor(quotient);\n    });\n    let remainderLeft = remainder;\n    if (remainder > 0) {\n      if (!isOverflow) {\n        liquidityDistributionX = liquidityDistributionX.map((i) => {\n          if (i === 0) return i;\n          if (remainderLeft > 0) {\n            remainderLeft--;\n            return i + 1;\n          }\n          return i;\n        });\n      } else {\n        const reverseLiquid = liquidityDistributionX.reverse().map((i) => {\n          if (i === 0) return i;\n          if (remainderLeft > 0) {\n            remainderLeft--;\n            return i - 1;\n          }\n          return i;\n        });\n        liquidityDistributionX = reverseLiquid.reverse();\n      }\n    }\n  }\n\n  if (totalY > 0 && totalY !== MAX_BASIS_POINTS) {\n    const isOverflow = totalY > MAX_BASIS_POINTS;\n    const overPoint = Math.abs(totalY - MAX_BASIS_POINTS);\n    const numberBins = liquidityDistributionY.filter((i) => i > 0).length;\n    const [quotient, remainder] = divRem(overPoint, numberBins);\n\n    liquidityDistributionY = liquidityDistributionY.map((i, idx) => {\n      if (i === 0) return i;\n      if (remainder > 0 && idx === numberBins - 1) {\n        return isOverflow\n          ? i - Math.floor(quotient) - remainder\n          : i + Math.floor(quotient) + remainder;\n      }\n      return isOverflow ? i - Math.floor(quotient) : i + Math.floor(quotient);\n    });\n  }\n\n  //return\n  const liquidityDistribution = deltaIds.map((i, idx) => {\n    return {\n      relativeBinId: i,\n      distributionX: liquidityDistributionX[idx],\n      distributionY: liquidityDistributionY[idx],\n    };\n  });\n  return liquidityDistribution;\n};\n\nexport function createUniformDistribution(\n  params: CreateLiquidityDistributionParams\n): Distribution[] {\n  const { shape, binRange } = params;\n\n  const [minBin, maxBin] = binRange;\n\n  if (minBin > maxBin) {\n    throw new Error(\"Invalid binRange: minBin must be <= maxBin\");\n  }\n\n  const relativeIds = Array.from(\n    { length: maxBin - minBin + 1 },\n    (_, i) => i + minBin\n  );\n\n  if (shape === LiquidityShape.Spot) {\n    const totalArrayLength = maxBin - minBin + 1;\n    const findActiveBinIndex = relativeIds.findIndex((item) => item === 0);\n\n    if (findActiveBinIndex === -1) {\n      const isOnlyX = minBin > 0;\n      const isOnlyY = maxBin < 0;\n      const distribution = MAX_BASIS_POINTS / totalArrayLength;\n\n      return relativeIds.map((x) => ({\n        relativeBinId: x,\n        distributionX: isOnlyX ? distribution : 0,\n        distributionY: isOnlyY ? distribution : 0,\n      }));\n    }\n\n    const totalYBin = Math.abs(minBin);\n    const totalXBin = maxBin;\n\n    const distributionX = Array.from({ length: totalArrayLength }, (_, i) => {\n      if (i < findActiveBinIndex) return 0;\n      const pricePerBin = Math.floor(\n        (2 * MAX_BASIS_POINTS) / (totalXBin * 2 + 1)\n      );\n      if (i === findActiveBinIndex)\n        return MAX_BASIS_POINTS - pricePerBin * totalXBin;\n      return pricePerBin;\n    });\n\n    const distributionY = Array.from({ length: totalArrayLength }, (_, i) => {\n      if (i > findActiveBinIndex) return 0;\n      const pricePerBin = Math.floor(\n        (2 * MAX_BASIS_POINTS) / (totalYBin * 2 + 1)\n      );\n      if (i === findActiveBinIndex)\n        return MAX_BASIS_POINTS - pricePerBin * totalYBin;\n      return pricePerBin;\n    });\n\n    return relativeIds.map((x, i) => ({\n      relativeBinId: x,\n      distributionX: distributionX[i],\n      distributionY: distributionY[i],\n    }));\n  }\n\n  if (shape === LiquidityShape.Curve) {\n    return getCurveDistributionFromBinRange(binRange);\n  }\n\n  if (shape === LiquidityShape.BidAsk) {\n    //MAX_BASIS_POINTS = 10000\n    //binRange = [min, max]\n    //activeid = 0\n\n    const activeBin = 0;\n\n    let _distributionY: number[] = [];\n\n    let _distributionX: number[] = [];\n\n    let deltaIds: number[] = [];\n\n    if (maxBin < activeBin) {\n      const negDelta = maxBin - minBin + 1;\n      const negativeDeltaIds = Array.from(Array(activeBin - minBin).keys())\n        .reverse()\n        .slice(0, negDelta)\n        .map((el) => -1 * (el + 1));\n\n      deltaIds = [...negativeDeltaIds];\n\n      _distributionX = [...Array(deltaIds.length).fill(0)];\n\n      // dist = 2/R^2 * r\n      const rSquare = Math.pow(deltaIds[0], 2);\n      _distributionY = deltaIds.map((i) => ((i - 1) * -2) / rSquare);\n    } else if (activeBin < minBin) {\n      const posDelta = binRange[1] - binRange[0] + 1;\n      const positiveDeltaIds = Array.from(Array(binRange[1] - activeBin).keys())\n        .reverse()\n        .slice(0, posDelta)\n        .reverse()\n        .map((el) => el + 1);\n\n      deltaIds = [...positiveDeltaIds];\n      // dist = 2/R^2 * i\n      const rSquare = Math.pow(deltaIds[deltaIds.length - 1], 2);\n      _distributionX = deltaIds.map((i) => ((i + 1) * 2) / rSquare);\n      _distributionY = [...Array(deltaIds.length).fill(0)];\n    } else {\n      const negDelta = activeBin - binRange[0];\n      const posDelta = binRange[1] - activeBin;\n\n      const negativeDeltaIds = Array.from(Array(negDelta).keys())\n        .reverse()\n        .map((el) => -1 * (el + 1));\n      const positiveDeltaIds = Array.from(Array(posDelta).keys()).map(\n        (el) => el + 1\n      );\n\n      deltaIds = [...negativeDeltaIds, 0, ...positiveDeltaIds];\n\n      // dist = 1/R^2 * i\n      const rSquareX =\n        positiveDeltaIds.length === 0\n          ? 1\n          : positiveDeltaIds.length === 1 && positiveDeltaIds[0] === 1\n          ? 3\n          : Math.pow(positiveDeltaIds[positiveDeltaIds.length - 1], 2);\n      _distributionX = [\n        ...Array(negDelta).fill(0),\n        1 / rSquareX,\n        ...positiveDeltaIds.map((i) => (i + 1) / rSquareX),\n      ];\n\n      // dist = 1/R^2 * i\n      const rSquareY =\n        negativeDeltaIds.length === 0\n          ? 1\n          : negativeDeltaIds[0] === -1\n          ? 3\n          : Math.pow(negativeDeltaIds[0], 2);\n      _distributionY = [\n        ...negativeDeltaIds.map((i) => (-1 * (i - 1)) / rSquareY),\n        1 / rSquareY,\n        ...Array(posDelta).fill(0),\n      ];\n    }\n\n    let liquidityDistributionX = _distributionX.map((i) => {\n      return Math.floor(i * MAX_BASIS_POINTS);\n    });\n\n    let liquidityDistributionY = _distributionY.map((i) => {\n      return Math.floor(i * MAX_BASIS_POINTS);\n    });\n\n    // check totalX and totalY with MAX_BASIS_POINTS\n    const totalX = liquidityDistributionX.reduce((acc, val) => acc + val, 0);\n\n    const totalY = liquidityDistributionY.reduce((acc, val) => acc + val, 0);\n\n    if (totalX > 0 && totalX !== MAX_BASIS_POINTS) {\n      const isOverflow = totalX > MAX_BASIS_POINTS;\n      const overPoint = Math.abs(totalX - MAX_BASIS_POINTS);\n      const numberBins = liquidityDistributionX.filter((i) => i > 0).length;\n      const [quotient, remainder] = divRem(overPoint, numberBins);\n\n      liquidityDistributionX = liquidityDistributionX.map((i) => {\n        if (i === 0) return i;\n        return isOverflow ? i - Math.floor(quotient) : i + Math.floor(quotient);\n      });\n      let remainderLeft = remainder;\n      if (remainder > 0) {\n        if (!isOverflow) {\n          liquidityDistributionX = liquidityDistributionX.map((i) => {\n            if (i === 0) return i;\n            if (remainderLeft > 0) {\n              remainderLeft--;\n              return i + 1;\n            }\n            return i;\n          });\n        } else {\n          const reverseLiquid = liquidityDistributionX.reverse().map((i) => {\n            if (i === 0) return i;\n            if (remainderLeft > 0) {\n              remainderLeft--;\n              return i - 1;\n            }\n            return i;\n          });\n          liquidityDistributionX = reverseLiquid.reverse();\n        }\n      }\n    }\n\n    if (totalY > 0 && totalY !== MAX_BASIS_POINTS) {\n      const isOverflow = totalY > MAX_BASIS_POINTS;\n      const overPoint = Math.abs(totalY - MAX_BASIS_POINTS);\n      const numberBins = liquidityDistributionY.filter((i) => i > 0).length;\n      const [quotient, remainder] = divRem(overPoint, numberBins);\n\n      liquidityDistributionY = liquidityDistributionY.map((i, idx) => {\n        if (i === 0) return i;\n        if (remainder > 0 && idx === 0) {\n          return isOverflow\n            ? i - Math.floor(quotient) - remainder\n            : i + Math.floor(quotient) + remainder;\n        }\n        return isOverflow ? i - Math.floor(quotient) : i + Math.floor(quotient);\n      });\n    }\n\n    const liquidityDistribution = deltaIds.map((i, idx) => {\n      return {\n        relativeBinId: i,\n        distributionX: liquidityDistributionX[idx],\n        distributionY: liquidityDistributionY[idx],\n      };\n    });\n\n    return liquidityDistribution;\n  }\n\n  throw new Error(`Unsupported liquidity shape: ${shape}`);\n}\n\nexport const getMaxPosition = (range: [number, number], activeId: number) => {\n  const leftRangeIndex = Math.floor(activeId / 16);\n  const rangeFromIndex = [\n    Math.floor((activeId + range[0]) / 16),\n    Math.floor((activeId + range[1]) / 16),\n  ];\n\n  const positions = Array.from(\n    { length: rangeFromIndex[1] - rangeFromIndex[0] + 1 },\n    (_, index) => {\n      return rangeFromIndex[0] + index - leftRangeIndex;\n    }\n  );\n\n  return positions;\n};\n\nexport const getMaxBinArray = (range: [number, number], activeId: number) => {\n  const arrayIndex = [activeId + range[0], activeId + range[1]];\n\n  const binIndex = [\n    Math.floor(arrayIndex[0] / BIN_ARRAY_SIZE),\n    Math.floor(arrayIndex[1] / BIN_ARRAY_SIZE),\n  ];\n\n  // check if binArrayLower, binArrayUpper is the same\n  if (binIndex[1] === binIndex[0]) {\n    binIndex[1] += 1;\n  }\n\n  const binArrayIndexLen = binIndex[1] - binIndex[0] - 1;\n  const binArrayList = Array.from({ length: binArrayIndexLen + 1 }, (_, i) => {\n    const index = binIndex[0] + i * 2;\n    return {\n      binArrayLowerIndex: index,\n      binArrayUpperIndex: index + 1,\n    };\n  });\n\n  return binArrayList;\n};\n\nexport const getBinRange = (index: number, activeId: number) => {\n  const firstBinId = Math.floor(activeId % 16);\n\n  const firstArray = [-firstBinId, -firstBinId + 16 - 1];\n  const range = [\n    firstArray[0] + index * FIXED_LENGTH,\n    firstArray[1] + index * FIXED_LENGTH,\n  ];\n  return {\n    range,\n    binLower: activeId + range[0],\n    binUpper: activeId + range[1] - 1,\n  };\n};\n\nexport const findPosition =\n  (index: number, activeBin = ACTIVE_ID) =>\n  (position: PositionInfo) => {\n    const { binLower, binUpper } = getBinRange(index, activeBin);\n\n    return position.lowerBinId <= binLower && position.upperBinId >= binUpper;\n  };\n\nexport const getGasPrice = async (connection: Connection): Promise<number> => {\n  const buffNum = 100;\n  try {\n    return await new Promise(async (resolve) => {\n      const timeout = setTimeout(() => {\n        resolve(UNIT_PRICE_DEFAULT * buffNum);\n      }, 2000);\n      const getPriority = await connection.getRecentPrioritizationFees();\n      const currentFee = getPriority\n        .filter((fee) => fee?.prioritizationFee > 0)\n        .map((fee) => fee?.prioritizationFee);\n      clearTimeout(timeout);\n      const unitPrice =\n        currentFee.length > 0\n          ? Math.max(...currentFee, UNIT_PRICE_DEFAULT)\n          : UNIT_PRICE_DEFAULT;\n      resolve(unitPrice * buffNum);\n    });\n  } catch {\n    return UNIT_PRICE_DEFAULT * buffNum;\n  }\n};","import {\n  ComputeBudgetProgram,\n  PublicKey,\n  SystemProgram,\n  Transaction,\n  TransactionMessage,\n} from \"@solana/web3.js\";\nimport { ILiquidityBookConfig, PoolMetadata } from \"../types\";\nimport {\n  BIN_ARRAY_INDEX,\n  BIN_ARRAY_SIZE,\n  CCU_LIMIT,\n  FIXED_LENGTH,\n  MAX_BASIS_POINTS,\n  PRECISION,\n  SCALE_OFFSET,\n  UNIT_PRICE_DEFAULT,\n  WRAP_SOL_ADDRESS,\n} from \"../constants/config\";\nimport { BN, utils } from \"@coral-xyz/anchor\";\nimport * as spl from \"@solana/spl-token\";\nimport { LiquidityBookAbstract } from \"../interface/liquidityBookAbstract\";\nimport { getProgram } from \"./getProgram\";\nimport { Buffer } from \"buffer\";\nimport cloneDeep from \"lodash/cloneDeep\";\nimport {\n  AddLiquidityIntoPositionParams,\n  CreatePairWithConfigParams,\n  CreatePositionParams,\n  GetBinArrayParams,\n  GetBinsArrayInfoParams,\n  GetBinsReserveParams,\n  GetBinsReserveResponse,\n  GetTokenOutputParams,\n  GetTokenOutputResponse,\n  GetUserVaultInfoParams,\n  Pair,\n  RemoveMultipleLiquidityParams,\n  RemoveMultipleLiquidityResponse,\n  ReserveParams,\n  SwapParams,\n  UserPositionsParams,\n} from \"../types/services\";\nimport { LBSwapService } from \"./swap\";\nimport bigDecimal from \"js-big-decimal\";\nimport { getIdFromPrice, getPriceFromId } from \"../utils/price\";\nimport { mulDiv, mulShr, shlDiv } from \"../utils/math\";\nimport LiquidityBookIDL from \"../constants/idl/liquidity_book.json\";\nimport { bs58 } from \"@coral-xyz/anchor/dist/cjs/utils/bytes\";\nimport { getGasPrice } from \"../utils\";\n\nexport class LiquidityBookServices extends LiquidityBookAbstract {\n  bufferGas?: number;\n  constructor(config: ILiquidityBookConfig) {\n    super(config);\n  }\n\n  get lbConfig() {\n    return new PublicKey(\"BqPmjcPbAwE7mH23BY8q8VUEN4LSjhLUv41W87GsXVn8\");\n  }\n\n  get hooksConfig() {\n    return new PublicKey(\"DgW5ARD9sU3W6SJqtyJSH3QPivxWt7EMvjER9hfFKWXF\");\n  }\n\n  public async getPairAccount(pair: PublicKey) {\n    //@ts-ignore\n    return await this.lbProgram.account.pair.fetch(pair);\n  }\n\n  public async getPositionAccount(position: PublicKey) {\n    //@ts-ignore\n    return await this.lbProgram.account.position.fetch(position);\n  }\n\n  async getBinArray(params: GetBinArrayParams) {\n    const { binArrayIndex, pair, payer, transaction } = params;\n\n    const binArray = PublicKey.findProgramAddressSync(\n      [\n        Buffer.from(utils.bytes.utf8.encode(\"bin_array\")),\n        pair.toBuffer(),\n        new BN(binArrayIndex).toArrayLike(Buffer, \"le\", 4),\n      ],\n      this.lbProgram.programId\n    )[0];\n\n    if (transaction && payer) {\n      const binArrayInfo = await this.connection.getAccountInfo(binArray);\n\n      if (!binArrayInfo) {\n        const initializebinArrayConfigTx = await this.lbProgram.methods\n          .initializeBinArray(binArrayIndex)\n          .accountsPartial({ pair: pair, binArray: binArray, user: payer })\n          .instruction();\n        transaction.add(initializebinArrayConfigTx);\n      }\n    }\n\n    return binArray;\n  }\n\n  public async getBinArrayInfo(params: GetBinsArrayInfoParams) {\n    const { binArrayIndex, pair, payer } = params;\n    let resultIndex = binArrayIndex;\n    let result = [];\n\n    const binArray = await this.getBinArray({\n      binArrayIndex,\n      pair,\n      payer,\n    });\n    //@ts-ignore\n    const { bins } = await this.lbProgram.account.binArray.fetch(binArray);\n    try {\n      const binArrayOther = await this.getBinArray({\n        binArrayIndex: binArrayIndex + 1,\n        pair,\n        payer,\n      });\n      //@ts-ignore\n      const res = await this.lbProgram.account.binArray.fetch(binArrayOther);\n\n      result = [...bins, ...res.bins];\n    } catch {\n      const binArrayOther = await this.getBinArray({\n        binArrayIndex: binArrayIndex - 1,\n        pair,\n        payer,\n      });\n      //@ts-ignore\n      const res = await this.lbProgram.account.binArray.fetch(binArrayOther);\n      result = [...res.bins, ...bins];\n      resultIndex -= 1;\n    }\n\n    return { bins: result, resultIndex };\n  }\n\n  public async getBinsReserveInformation(\n    params: GetBinsReserveParams\n  ): Promise<GetBinsReserveResponse[]> {\n    const { position, pair, payer } = params;\n    const positionInfo = await this.getPositionAccount(position);\n    const firstBinId = positionInfo.lowerBinId;\n    const binArrayIndex = Math.floor(firstBinId / BIN_ARRAY_SIZE);\n\n    const { bins, resultIndex } = await this.getBinArrayInfo({\n      binArrayIndex,\n      pair,\n      payer,\n    });\n\n    const firstBinIndex = resultIndex * BIN_ARRAY_SIZE;\n    const binIds = Array.from(\n      { length: positionInfo.upperBinId - firstBinId + 1 },\n      (_, i) => firstBinId - firstBinIndex + i\n    );\n\n    const reserveXY = binIds.map((binId: number, index: number) => {\n      const liquidityShare = positionInfo.liquidityShares[index].toString();\n      const activeBin = bins[binId];\n\n      if (activeBin) {\n        const totalReserveX = +BigInt(activeBin.reserveX).toString();\n\n        const totalReserveY = +BigInt(activeBin.reserveY).toString();\n\n        const totalSupply = +BigInt(activeBin.totalSupply).toString();\n\n        const reserveX =\n          Number(totalReserveX) > 0\n            ? mulDiv(\n                Number(liquidityShare),\n                Number(totalReserveX),\n                Number(totalSupply),\n                \"down\"\n              )\n            : 0;\n\n        const reserveY =\n          Number(totalReserveY) > 0\n            ? mulDiv(\n                Number(liquidityShare),\n                Number(totalReserveY),\n                Number(totalSupply),\n                \"down\"\n              )\n            : 0;\n\n        return {\n          reserveX: reserveX || 0,\n          reserveY: reserveY || 0,\n          totalSupply: +BigInt(activeBin.totalSupply).toString(),\n          binId: firstBinId + index,\n          binPosistion: binId,\n          liquidityShare: positionInfo.liquidityShares[index],\n        };\n      }\n      return {\n        reserveX: 0,\n        reserveY: 0,\n        totalSupply: \"0\",\n        binId: firstBinId + index,\n        binPosistion: binId,\n        liquidityShare: liquidityShare,\n      };\n    });\n\n    return reserveXY;\n  }\n\n  public async createPairWithConfig(params: CreatePairWithConfigParams) {\n    const { tokenBase, tokenQuote, binStep, ratePrice, payer } = params;\n\n    const tokenX = new PublicKey(tokenBase.mintAddress);\n    const tokenY = new PublicKey(tokenQuote.mintAddress);\n\n    const id = getIdFromPrice(\n      ratePrice || 1,\n      binStep,\n      tokenBase.decimal,\n      tokenQuote.decimal\n    );\n\n    let binArrayIndex = id / BIN_ARRAY_SIZE;\n\n    if (id % BIN_ARRAY_SIZE < BIN_ARRAY_SIZE / 2) {\n      binArrayIndex -= 1;\n    }\n\n    const tx = new Transaction();\n\n    const binStepConfig = PublicKey.findProgramAddressSync(\n      [\n        Buffer.from(utils.bytes.utf8.encode(\"bin_step_config\")),\n        this.lbConfig!.toBuffer(),\n        new Uint8Array([binStep]),\n      ],\n      this.lbProgram.programId\n    )[0];\n\n    const quoteAssetBadge = PublicKey.findProgramAddressSync(\n      [\n        Buffer.from(utils.bytes.utf8.encode(\"quote_asset_badge\")),\n        this.lbConfig!.toBuffer(),\n        tokenY.toBuffer(),\n      ],\n      this.lbProgram.programId\n    )[0];\n\n    const pair = PublicKey.findProgramAddressSync(\n      [\n        Buffer.from(utils.bytes.utf8.encode(\"pair\")),\n        this.lbConfig!.toBuffer(),\n        tokenX.toBuffer(),\n        tokenY.toBuffer(),\n        new Uint8Array([binStep]),\n      ],\n      this.lbProgram.programId\n    )[0];\n\n    const initializePairConfigTx = await this.lbProgram.methods\n      .initializePair(id)\n      .accountsPartial({\n        liquidityBookConfig: this.lbConfig!,\n        binStepConfig: binStepConfig,\n        quoteAssetBadge: quoteAssetBadge,\n        pair: pair,\n        tokenMintX: tokenX,\n        tokenMintY: tokenY,\n        user: payer,\n      })\n      .instruction();\n\n    tx.add(initializePairConfigTx);\n\n    const binArrayLower = PublicKey.findProgramAddressSync(\n      [\n        Buffer.from(utils.bytes.utf8.encode(\"bin_array\")),\n        pair.toBuffer(),\n        new BN(binArrayIndex).toArrayLike(Buffer, \"le\", 4),\n      ],\n      this.lbProgram.programId\n    )[0];\n\n    const binArrayUpper = PublicKey.findProgramAddressSync(\n      [\n        Buffer.from(utils.bytes.utf8.encode(\"bin_array\")),\n        pair.toBuffer(),\n        new BN(Number(binArrayIndex) + 1).toArrayLike(Buffer, \"le\", 4),\n      ],\n      this.lbProgram.programId\n    )[0];\n\n    const initializeBinArrayLowerConfigTx = await this.lbProgram.methods\n      .initializeBinArray(binArrayIndex)\n      .accountsPartial({ pair: pair, binArray: binArrayLower, user: payer })\n      .instruction();\n\n    tx.add(initializeBinArrayLowerConfigTx);\n\n    const initializeBinArrayUpperConfigTx = await this.lbProgram.methods\n      .initializeBinArray(new BN(binArrayIndex + 1))\n      .accountsPartial({ pair: pair, binArray: binArrayUpper, user: payer })\n      .instruction();\n\n    tx.add(initializeBinArrayUpperConfigTx);\n\n    return {\n      tx,\n      pair: pair.toString(),\n      binArrayLower: binArrayLower.toString(),\n      binArrayUpper: binArrayUpper.toString(),\n      hooksConfig: this.hooksConfig.toString(),\n      activeBin: Number(id),\n    };\n  }\n\n  async createPosition(params: CreatePositionParams) {\n    const {\n      payer,\n      relativeBinIdLeft,\n      relativeBinIdRight,\n      pair,\n      binArrayIndex,\n      positionMint,\n      transaction,\n    } = params;\n\n    const position = PublicKey.findProgramAddressSync(\n      [\n        Buffer.from(utils.bytes.utf8.encode(\"position\")),\n        positionMint.toBuffer(),\n      ],\n      this.lbProgram.programId\n    )[0];\n\n    const positionVault = spl.getAssociatedTokenAddressSync(\n      positionMint,\n      payer,\n      true,\n      spl.TOKEN_2022_PROGRAM_ID\n    );\n\n    await this.getBinArray({\n      binArrayIndex,\n      pair,\n      payer,\n    });\n\n    await this.getBinArray({\n      binArrayIndex: binArrayIndex + 1,\n      pair,\n      payer,\n    });\n\n    const initializePositionTx = await this.lbProgram.methods\n      .createPosition(new BN(relativeBinIdLeft), new BN(relativeBinIdRight))\n      .accountsPartial({\n        pair,\n        position: position,\n        positionMint: positionMint,\n        positionTokenAccount: positionVault,\n        tokenProgram: spl.TOKEN_2022_PROGRAM_ID,\n        user: payer,\n      })\n      .instruction();\n\n    transaction.add(initializePositionTx);\n\n    return { position: position.toString() };\n  }\n\n  async addLiquidityIntoPosition(params: AddLiquidityIntoPositionParams) {\n    const {\n      positionMint,\n      payer,\n      pair,\n      binArrayLower,\n      binArrayUpper,\n      transaction,\n      liquidityDistribution,\n      amountX,\n      amountY,\n    } = params;\n\n    const pairInfo = await this.getPairAccount(pair);\n\n    const tokenProgramX = await getProgram(\n      pairInfo.tokenMintX,\n      this.connection\n    );\n    const tokenProgramY = await getProgram(\n      pairInfo.tokenMintY,\n      this.connection\n    );\n\n    const associatedPairVaultX = await this.getPairVaultInfo({\n      tokenAddress: pairInfo.tokenMintX,\n      pair,\n    });\n\n    const associatedPairVaultY = await this.getPairVaultInfo({\n      tokenAddress: pairInfo.tokenMintY,\n      pair,\n    });\n\n    const associatedUserVaultX = await this.getUserVaultInfo({\n      tokenAddress: pairInfo.tokenMintX,\n      payer,\n    });\n\n    const associatedUserVaultY = await this.getUserVaultInfo({\n      tokenAddress: pairInfo.tokenMintY,\n      payer,\n    });\n\n    if (\n      pairInfo.tokenMintY.toString() === WRAP_SOL_ADDRESS ||\n      pairInfo.tokenMintX.toString() === WRAP_SOL_ADDRESS\n    ) {\n      const isNativeY = pairInfo.tokenMintY.toString() === WRAP_SOL_ADDRESS;\n\n      const totalAmount = isNativeY ? amountY : amountX;\n      const totalLiquid = liquidityDistribution.reduce((prev, curr) => {\n        const currAmount = isNativeY ? curr.distributionY : curr.distributionX;\n        return prev + currAmount;\n      }, 0);\n\n      if (totalLiquid) {\n        const amount = (totalLiquid * totalAmount) / MAX_BASIS_POINTS;\n\n        const associatedUserVault = isNativeY\n          ? associatedUserVaultY\n          : associatedUserVaultX;\n\n        transaction.add(\n          SystemProgram.transfer({\n            fromPubkey: payer,\n            toPubkey: associatedUserVault,\n            lamports: amount,\n          })\n        );\n        transaction.add(spl.createSyncNativeInstruction(associatedUserVault));\n      }\n    }\n\n    const unitSPrice = await getGasPrice(this.connection).catch(\n      () => undefined\n    );\n\n    const unitPrice = Math.max(\n      Number(unitSPrice) ?? 0,\n      UNIT_PRICE_DEFAULT * (this.bufferGas ?? 1)\n    );\n\n    const hook = PublicKey.findProgramAddressSync(\n      [\n        Buffer.from(utils.bytes.utf8.encode(\"hook\")),\n        this.hooksConfig.toBuffer(),\n        pair.toBuffer(),\n      ],\n      this.hooksProgram.programId\n    )[0];\n\n    const position = PublicKey.findProgramAddressSync(\n      [\n        Buffer.from(utils.bytes.utf8.encode(\"position\")),\n        positionMint.toBuffer(),\n      ],\n      this.lbProgram.programId\n    )[0];\n\n    const positionVault = spl.getAssociatedTokenAddressSync(\n      positionMint,\n      payer,\n      true,\n      spl.TOKEN_2022_PROGRAM_ID\n    );\n\n    const addLiquidityInstructions = await this.lbProgram.methods\n      .increasePosition(new BN(amountX), new BN(amountY), liquidityDistribution)\n      .accountsPartial({\n        pair: pair,\n        position: position,\n        binArrayLower: binArrayLower,\n        binArrayUpper: binArrayUpper,\n        tokenVaultX: associatedPairVaultX,\n        tokenVaultY: associatedPairVaultY,\n        userVaultX: associatedUserVaultX,\n        userVaultY: associatedUserVaultY,\n        positionTokenAccount: positionVault,\n        tokenMintX: pairInfo.tokenMintX,\n        tokenMintY: pairInfo.tokenMintY,\n        tokenProgramX,\n        tokenProgramY,\n        positionTokenProgram: spl.TOKEN_2022_PROGRAM_ID,\n        hook: hook,\n        hooksProgram: this.hooksProgram.programId,\n        user: payer,\n        positionMint,\n      })\n      .remainingAccounts([\n        { pubkey: pair, isWritable: false, isSigner: false },\n        { pubkey: binArrayLower, isWritable: false, isSigner: false },\n        { pubkey: binArrayUpper, isWritable: false, isSigner: false },\n      ])\n      .instruction();\n\n    transaction.add(\n      ComputeBudgetProgram.setComputeUnitLimit({\n        units: CCU_LIMIT,\n      })\n    );\n    transaction.add(\n      ComputeBudgetProgram.setComputeUnitPrice({\n        microLamports: unitPrice,\n      })\n    );\n\n    transaction.add(addLiquidityInstructions);\n  }\n\n  public async removeMultipleLiquidity(\n    params: RemoveMultipleLiquidityParams\n  ): Promise<RemoveMultipleLiquidityResponse> {\n    const { maxPositionList, payer, type, pair, tokenMintX, tokenMintY } =\n      params;\n\n    const tokenProgramX = await getProgram(tokenMintX, this.connection);\n    const tokenProgramY = await getProgram(tokenMintY, this.connection);\n\n    const txCreateAccount = new Transaction();\n\n    const associatedPairVaultX = await this.getPairVaultInfo({\n      tokenAddress: tokenMintX,\n      pair,\n      payer,\n      transaction: txCreateAccount,\n    });\n\n    const associatedPairVaultY = await this.getPairVaultInfo({\n      tokenAddress: tokenMintY,\n      pair,\n      payer,\n      transaction: txCreateAccount,\n    });\n\n    const associatedUserVaultX = await this.getUserVaultInfo({\n      tokenAddress: tokenMintX,\n      payer,\n      transaction: txCreateAccount,\n    });\n\n    const associatedUserVaultY = await this.getUserVaultInfo({\n      tokenAddress: tokenMintY,\n      payer,\n      transaction: txCreateAccount,\n    });\n\n    const hook = PublicKey.findProgramAddressSync(\n      [\n        Buffer.from(utils.bytes.utf8.encode(\"hook\")),\n        this.hooksConfig!.toBuffer(),\n        pair.toBuffer(),\n      ],\n      this.hooksProgram.programId\n    )[0];\n\n    const associatedHookTokenY = spl.getAssociatedTokenAddressSync(\n      tokenMintY,\n      hook,\n      true,\n      tokenProgramY\n    );\n    const infoHookTokenY = await this.connection.getAccountInfo(\n      associatedHookTokenY\n    );\n\n    if (!infoHookTokenY) {\n      const hookTokenYInstructions =\n        spl.createAssociatedTokenAccountInstruction(\n          payer,\n          associatedHookTokenY,\n          hook,\n          tokenMintY,\n          tokenProgramY\n        );\n\n      txCreateAccount.add(hookTokenYInstructions);\n    }\n\n    const unitSPrice = await getGasPrice(this.connection).catch(\n      () => undefined\n    );\n\n    const unitPrice = Math.max(\n      Number(unitSPrice) ?? 0,\n      UNIT_PRICE_DEFAULT * (this.bufferGas ?? 1)\n    );\n\n    const positionClosed: Record<string, string>[] = [];\n    const txs = await Promise.all(\n      maxPositionList.map(async ({ position, start, end, positionMint }) => {\n        const binArrayIndex = Math.floor(start / BIN_ARRAY_SIZE);\n\n        const { resultIndex } = await this.getBinArrayInfo({\n          binArrayIndex,\n          pair,\n          payer,\n        });\n\n        const binArrayLower = await this.getBinArray({\n          binArrayIndex: resultIndex,\n          pair,\n          payer,\n        });\n\n        const binArrayUpper = await this.getBinArray({\n          binArrayIndex: resultIndex + 1,\n          pair,\n          payer,\n        });\n\n        const tx = new Transaction();\n        tx.add(\n          ComputeBudgetProgram.setComputeUnitLimit({\n            units: CCU_LIMIT,\n          })\n        );\n        tx.add(\n          ComputeBudgetProgram.setComputeUnitPrice({\n            microLamports: unitPrice,\n          })\n        );\n\n        const positionVault = spl.getAssociatedTokenAddressSync(\n          new PublicKey(positionMint),\n          payer,\n          true,\n          spl.TOKEN_2022_PROGRAM_ID\n        );\n\n        const reserveXY = cloneDeep(\n          await this.getBinsReserveInformation({\n            position: new PublicKey(position),\n            pair,\n            payer,\n          })\n        );\n\n        const hookBinArrayLower = PublicKey.findProgramAddressSync(\n          [\n            Buffer.from(utils.bytes.utf8.encode(\"bin_array\")),\n            hook.toBuffer(),\n            new BN(BIN_ARRAY_INDEX).toArrayLike(Buffer, \"le\", 4),\n          ],\n          this.hooksProgram.programId\n        )[0];\n\n        const hookBinArrayUpper = PublicKey.findProgramAddressSync(\n          [\n            Buffer.from(utils.bytes.utf8.encode(\"bin_array\")),\n            hook.toBuffer(),\n            new BN(BIN_ARRAY_INDEX + 1).toArrayLike(Buffer, \"le\", 4),\n          ],\n          this.hooksProgram.programId\n        )[0];\n\n        const hookPosition = PublicKey.findProgramAddressSync(\n          [\n            Buffer.from(utils.bytes.utf8.encode(\"position\")),\n            hook.toBuffer(),\n            new PublicKey(position).toBuffer(),\n          ],\n          this.hooksProgram.programId\n        )[0];\n\n        let removedShares: BN[] = [];\n\n        if (type === \"removeBoth\") {\n          removedShares = reserveXY.map((reserve: ReserveParams) => {\n            const binId = reserve.binId;\n            if (binId >= Number(start) && binId <= Number(end)) {\n              return reserve.liquidityShare;\n            }\n\n            return new BN(0);\n          });\n        }\n\n        if (type === \"removeBaseToken\") {\n          removedShares = reserveXY.map((reserve: ReserveParams) => {\n            if (reserve.reserveX && reserve.reserveY === 0) {\n              return reserve.liquidityShare;\n            }\n\n            return new BN(0);\n          });\n        }\n\n        if (type === \"removeQuoteToken\") {\n          removedShares = reserveXY.map((reserve: ReserveParams) => {\n            if (reserve.reserveY && reserve.reserveX === 0) {\n              return reserve.liquidityShare;\n            }\n\n            return new BN(0);\n          });\n        }\n\n        const availableShares = reserveXY.filter((item: ReserveParams) =>\n          type === \"removeBoth\"\n            ? !new BN(item.liquidityShare).eq(new BN(0))\n            : type === \"removeQuoteToken\"\n            ? !item.reserveX\n            : !item.reserveY\n        );\n\n        const isClosePosition =\n          (type === \"removeBoth\" &&\n            end - start + 1 >= availableShares.length) ||\n          (end - start + 1 === FIXED_LENGTH &&\n            availableShares.length === FIXED_LENGTH);\n        if (isClosePosition) {\n          const instructions = await this.lbProgram.methods\n            .closePosition()\n            .accountsPartial({\n              pair,\n              position,\n              binArrayLower: binArrayLower,\n              binArrayUpper: binArrayUpper,\n              tokenVaultX: associatedPairVaultX,\n              tokenVaultY: associatedPairVaultY,\n              userVaultX: associatedUserVaultX,\n              userVaultY: associatedUserVaultY,\n              positionTokenAccount: positionVault,\n              tokenMintX,\n              tokenMintY,\n              tokenProgramX,\n              tokenProgramY,\n              positionTokenProgram: spl.TOKEN_2022_PROGRAM_ID,\n              hook,\n              hooksProgram: this.hooksProgram.programId,\n              user: payer,\n              positionMint,\n            })\n            .instruction();\n\n          positionClosed.push({ position });\n          tx.add(instructions);\n        } else {\n          const instructions = await this.lbProgram.methods\n            .decreasePosition(removedShares)\n            .accountsPartial({\n              pair: pair,\n              position,\n              binArrayLower: binArrayLower,\n              binArrayUpper: binArrayUpper,\n              tokenVaultX: associatedPairVaultX,\n              tokenVaultY: associatedPairVaultY,\n              userVaultX: associatedUserVaultX,\n              userVaultY: associatedUserVaultY,\n              positionTokenAccount: positionVault,\n              tokenMintX: tokenMintX,\n              tokenMintY: tokenMintY,\n              tokenProgramX,\n              tokenProgramY,\n              positionTokenProgram: spl.TOKEN_2022_PROGRAM_ID,\n              hook: hook,\n              hooksProgram: this.hooksProgram.programId,\n              user: payer,\n              positionMint,\n            })\n            ?.remainingAccounts([\n              { pubkey: pair, isWritable: false, isSigner: false },\n              { pubkey: binArrayLower, isWritable: false, isSigner: false },\n              { pubkey: binArrayUpper, isWritable: false, isSigner: false },\n              { pubkey: hookBinArrayLower, isWritable: true, isSigner: false },\n              { pubkey: hookBinArrayUpper, isWritable: true, isSigner: false },\n              { pubkey: hookPosition, isWritable: true, isSigner: false },\n            ])\n            .instruction();\n\n          tx.add(instructions);\n        }\n\n        return tx;\n      })\n    );\n\n    const txCloseAccount = new Transaction();\n\n    if (\n      tokenMintY.toString() === WRAP_SOL_ADDRESS ||\n      tokenMintX.toString() === WRAP_SOL_ADDRESS\n    ) {\n      const isNativeY = tokenMintY.toString() === WRAP_SOL_ADDRESS;\n\n      const associatedUserVault = isNativeY\n        ? associatedUserVaultY\n        : associatedUserVaultX;\n\n      txCloseAccount.add(\n        spl.createCloseAccountInstruction(associatedUserVault, payer, payer)\n      );\n    }\n\n    return {\n      txs,\n      txCreateAccount: txCreateAccount.instructions.length\n        ? txCreateAccount\n        : undefined,\n      txCloseAccount: txCloseAccount.instructions.length\n        ? txCloseAccount\n        : undefined,\n      positionClosed,\n    };\n  }\n\n  public async swap(params: SwapParams): Promise<Transaction> {\n    const {\n      tokenMintX,\n      tokenMintY,\n      amount,\n      otherAmountOffset,\n      swapForY,\n      isExactInput,\n      pair,\n      hook,\n      payer,\n    } = params;\n\n    const pairInfo = await this.getPairAccount(pair);\n    if (!pairInfo) throw new Error(\"Pair not found\");\n\n    let binArrayIndex = pairInfo.activeId / BIN_ARRAY_SIZE;\n    if (pairInfo.activeId % BIN_ARRAY_SIZE < BIN_ARRAY_SIZE / 2) {\n      binArrayIndex -= 1;\n    }\n\n    const binArrayLower = await this.getBinArray({\n      binArrayIndex,\n      pair,\n      payer,\n    });\n\n    const binArrayUpper = await this.getBinArray({\n      binArrayIndex: binArrayIndex + 1,\n      pair,\n      payer,\n    });\n\n    const [tokenProgramX, tokenProgramY] = await Promise.all([\n      getProgram(tokenMintX, this.connection),\n      getProgram(tokenMintY, this.connection),\n    ]);\n\n    const latestBlockHash = await this.connection.getLatestBlockhash();\n    const tx = new Transaction({\n      feePayer: payer,\n      blockhash: latestBlockHash.blockhash,\n      lastValidBlockHeight: latestBlockHash.lastValidBlockHeight,\n    });\n\n    const associatedPairVaultX = spl.getAssociatedTokenAddressSync(\n      tokenMintX,\n      pair,\n      true,\n      tokenProgramX\n    );\n\n    const associatedPairVaultY = spl.getAssociatedTokenAddressSync(\n      tokenMintY,\n      pair,\n      true,\n      tokenProgramY\n    );\n\n    const associatedUserVaultX = spl.getAssociatedTokenAddressSync(\n      tokenMintX,\n      payer,\n      true,\n      tokenProgramX\n    );\n\n    const associatedUserVaultY = spl.getAssociatedTokenAddressSync(\n      tokenMintY,\n      payer,\n      true,\n      tokenProgramY\n    );\n\n    const infoUserVaultX = await this.connection.getAccountInfo(\n      associatedUserVaultX\n    );\n\n    if (!infoUserVaultX) {\n      const userVaultXInstructions =\n        spl.createAssociatedTokenAccountInstruction(\n          payer,\n          associatedUserVaultX,\n          payer,\n          tokenMintX,\n          tokenProgramX\n        );\n\n      tx.add(userVaultXInstructions);\n    }\n\n    const infoUserVaultY = await this.connection.getAccountInfo(\n      associatedUserVaultY\n    );\n\n    if (!infoUserVaultY) {\n      const userVaultYInstructions =\n        spl.createAssociatedTokenAccountInstruction(\n          payer,\n          associatedUserVaultY,\n          payer,\n          tokenMintY,\n          tokenProgramY\n        );\n\n      tx.add(userVaultYInstructions);\n    }\n\n    const hookBinArrayLower = PublicKey.findProgramAddressSync(\n      [\n        Buffer.from(utils.bytes.utf8.encode(\"bin_array\")),\n        hook.toBuffer(),\n        new BN(BIN_ARRAY_INDEX).toArrayLike(Buffer, \"le\", 4),\n      ],\n      this.hooksProgram.programId\n    )[0];\n\n    const hookBinArrayUpper = PublicKey.findProgramAddressSync(\n      [\n        Buffer.from(utils.bytes.utf8.encode(\"bin_array\")),\n        hook.toBuffer(),\n        new BN(BIN_ARRAY_INDEX + 1).toArrayLike(Buffer, \"le\", 4),\n      ],\n      this.hooksProgram.programId\n    )[0];\n\n    if (\n      tokenMintY.toString() === WRAP_SOL_ADDRESS ||\n      tokenMintX.toString() === WRAP_SOL_ADDRESS\n    ) {\n      const isNativeY = tokenMintY.toString() === WRAP_SOL_ADDRESS;\n\n      const associatedUserVault = isNativeY\n        ? associatedUserVaultY\n        : associatedUserVaultX;\n\n      if (isNativeY && !swapForY) {\n        tx.add(\n          SystemProgram.transfer({\n            fromPubkey: payer,\n            toPubkey: associatedUserVault,\n            lamports: amount,\n          })\n        );\n        tx.add(spl.createSyncNativeInstruction(associatedUserVault));\n      }\n\n      if (!isNativeY && swapForY) {\n        tx.add(\n          SystemProgram.transfer({\n            fromPubkey: payer,\n            toPubkey: associatedUserVault,\n            lamports: amount,\n          })\n        );\n        tx.add(spl.createSyncNativeInstruction(associatedUserVault));\n      }\n    }\n\n    const swapInstructions = await this.lbProgram.methods\n      .swap(\n        new BN(amount.toString()),\n        new BN(otherAmountOffset.toString()),\n        swapForY,\n        isExactInput ? { exactInput: {} } : { exactOutput: {} }\n      )\n      .accountsPartial({\n        pair: pair,\n        binArrayLower: binArrayLower,\n        binArrayUpper: binArrayUpper,\n        tokenVaultX: associatedPairVaultX,\n        tokenVaultY: associatedPairVaultY,\n        userVaultX: associatedUserVaultX,\n        userVaultY: associatedUserVaultY,\n        tokenMintX: tokenMintX,\n        tokenMintY: tokenMintY,\n        tokenProgramX,\n        tokenProgramY,\n        user: payer,\n      })\n      .remainingAccounts([\n        { pubkey: pair, isWritable: false, isSigner: false },\n        { pubkey: binArrayLower, isWritable: false, isSigner: false },\n        { pubkey: binArrayUpper, isWritable: false, isSigner: false },\n        { pubkey: hookBinArrayLower, isWritable: true, isSigner: false },\n        { pubkey: hookBinArrayUpper, isWritable: true, isSigner: false },\n      ])\n      .instruction();\n\n    tx.add(swapInstructions);\n\n    if (\n      tokenMintY.toString() === WRAP_SOL_ADDRESS ||\n      tokenMintX.toString() === WRAP_SOL_ADDRESS\n    ) {\n      const isNativeY = tokenMintY.toString() === WRAP_SOL_ADDRESS;\n\n      const associatedUserVault = isNativeY\n        ? associatedUserVaultY\n        : associatedUserVaultX;\n      if ((isNativeY && swapForY) || (!isNativeY && !swapForY)) {\n        tx.add(\n          spl.createCloseAccountInstruction(associatedUserVault, payer, payer)\n        );\n      }\n    }\n\n    return tx;\n  }\n\n  public async getQuote(\n    params: GetTokenOutputParams\n  ): Promise<GetTokenOutputResponse> {\n    try {\n      const data = await LBSwapService.fromLbConfig(\n        this.lbProgram,\n        this.connection\n      ).calculateInOutAmount(params);\n      const { amountIn, amountOut } = data;\n\n      const slippageFraction = params.slippage / 100;\n      const slippageScaled = Math.round(slippageFraction * PRECISION);\n      let maxAmountIn = amountIn;\n      let minAmountOut = amountOut;\n      if (params.isExactInput) {\n        minAmountOut =\n          (amountOut * BigInt(PRECISION - slippageScaled)) / BigInt(PRECISION);\n      } else {\n        // max mount in should div for slippage\n        maxAmountIn =\n          (amountIn * BigInt(PRECISION)) / BigInt(PRECISION - slippageScaled);\n      }\n\n      const { maxAmountOut } = await this.getMaxAmountOutWithFee(\n        params.pair,\n        Number(amountIn.toString()),\n        params.swapForY,\n        params.tokenBaseDecimal,\n        params.tokenQuoteDecimal\n      );\n\n      const priceImpact = new bigDecimal(amountOut)\n        .subtract(new bigDecimal(maxAmountOut))\n        .divide(new bigDecimal(maxAmountOut))\n        .multiply(new bigDecimal(100))\n        .getValue();\n\n      return {\n        amountIn: amountIn,\n        amountOut: amountOut,\n        amount: params.isExactInput ? maxAmountIn : minAmountOut,\n        otherAmountOffset: params.isExactInput ? minAmountOut : maxAmountIn,\n        priceImpact: Number(priceImpact),\n      };\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  public async getMaxAmountOutWithFee(\n    pairAddress: PublicKey,\n    amount: number,\n    swapForY: boolean = false,\n    decimalBase: number = 9,\n    decimalQuote: number = 9\n  ) {\n    try {\n      let amountIn = BigInt(amount);\n      const pair = await this.getPairAccount(pairAddress);\n      const activeId = pair?.activeId;\n      const binStep = pair?.binStep;\n      const swapService = LBSwapService.fromLbConfig(\n        this.lbProgram,\n        this.connection\n      );\n      const feePrice = swapService.getTotalFee(pair);\n      const activePrice = getPriceFromId(binStep, activeId, 9, 9);\n      const price = getPriceFromId(\n        binStep,\n        activeId,\n        decimalBase,\n        decimalQuote\n      );\n\n      const feeAmount = swapService.getFeeAmount(amountIn, feePrice);\n      amountIn = BigInt(amountIn) - BigInt(feeAmount); // new BN(amountIn).subtract(new BN(feeAmount));\n      const maxAmountOut = swapForY\n        ? mulShr(Number(amountIn.toString()), activePrice, SCALE_OFFSET, \"down\")\n        : shlDiv(\n            Number(amountIn.toString()),\n            activePrice,\n            SCALE_OFFSET,\n            \"down\"\n          );\n\n      return { maxAmountOut, price };\n    } catch {}\n\n    return { maxAmountOut: 0, price: 0 };\n  }\n\n  public getDexName() {\n    return \"Saros DLMM\";\n  }\n\n  public getDexProgramId() {\n    return this.lbProgram.programId;\n  }\n\n  public async fetchPoolAddresses() {\n    const programId = this.getDexProgramId();\n    const connection = this.connection;\n    const pairAccount = LiquidityBookIDL.accounts.find(\n      (acc) => acc.name === \"Pair\"\n    );\n    const pairAccountDiscriminator = pairAccount\n      ? pairAccount.discriminator\n      : undefined;\n\n    if (!pairAccountDiscriminator) {\n      throw new Error(\"Pair account not found\");\n    }\n\n    const accounts = await connection.getProgramAccounts(\n      new PublicKey(programId),\n      {\n        filters: [\n          {\n            memcmp: { offset: 0, bytes: bs58.encode(pairAccountDiscriminator) },\n          },\n        ],\n      }\n    );\n    if (accounts.length === 0) {\n      throw new Error(\"Pair not found\");\n    }\n    const poolAdresses = accounts.reduce((addresses: string[], account) => {\n      if (account.account.owner.toString() !== programId.toString()) {\n        return addresses;\n      }\n      if (account.account.data.length < 8) {\n        return addresses;\n      }\n      addresses.push(account.pubkey.toString());\n      return addresses;\n    }, []);\n\n    return poolAdresses;\n  }\n\n  public async getUserPositions({ payer, pair }: UserPositionsParams) {\n    const connection = this.connection;\n    const tokenAccounts = await connection.getParsedTokenAccountsByOwner(\n      payer,\n      {\n        programId: spl.TOKEN_2022_PROGRAM_ID,\n      }\n    );\n\n    const positionMints = tokenAccounts.value\n      .filter((acc) => {\n        const amount = acc.account.data.parsed.info.tokenAmount.uiAmount;\n        // Only interested in NFTs or position tokens with amount > 0\n        return amount && amount > 0;\n      })\n      .map((acc) => new PublicKey(acc.account.data.parsed.info.mint));\n\n    const positions = await Promise.all(\n      positionMints.map(async (mint) => {\n        // Derive PDA for Position account\n        const [positionPda] = await PublicKey.findProgramAddressSync(\n          [Buffer.from(utils.bytes.utf8.encode(\"position\")), mint.toBuffer()],\n          this.lbProgram.programId\n        );\n        // Fetch and decode the Position account\n        try {\n          const accountInfo = await connection.getAccountInfo(positionPda);\n          if (!accountInfo) return null;\n          //@ts-ignore\n          const position = await this.lbProgram.account.position.fetch(\n            positionPda\n          );\n          if (position.pair.toString() !== pair.toString()) return null;\n          return { ...position, position: positionPda.toString() };\n        } catch {\n          return null;\n        }\n      })\n    );\n    return positions.filter(Boolean);\n  }\n\n  public async quote(params: {\n    amount: number;\n    metadata: PoolMetadata;\n    optional: {\n      isExactInput: boolean;\n      swapForY: boolean;\n      slippage: number;\n    };\n  }) {\n    const { amount, metadata, optional } = params;\n\n    return await this.getQuote({\n      amount: BigInt(amount),\n      isExactInput: optional.isExactInput,\n      pair: new PublicKey(metadata.poolAddress),\n      slippage: optional.slippage,\n      swapForY: optional.swapForY,\n      tokenBase: new PublicKey(metadata.baseMint),\n      tokenBaseDecimal: metadata.extra.tokenBaseDecimal,\n      tokenQuote: new PublicKey(metadata.quoteMint),\n      tokenQuoteDecimal: metadata.extra.tokenQuoteDecimal,\n    });\n  }\n\n  public async fetchPoolMetadata(pair: string): Promise<PoolMetadata> {\n    const connection = this.connection;\n    //@ts-ignore\n    const pairInfo: Pair = await this.lbProgram.account.pair.fetch(\n      new PublicKey(pair)\n    );\n    if (!pairInfo) {\n      throw new Error(\"Pair not found\");\n    }\n\n    const basePairVault = await this.getPairVaultInfo({\n      tokenAddress: new PublicKey(pairInfo.tokenMintX),\n      pair: new PublicKey(pair),\n    });\n    const quotePairVault = await this.getPairVaultInfo({\n      tokenAddress: new PublicKey(pairInfo.tokenMintY),\n      pair: new PublicKey(pair),\n    });\n\n    const [baseReserve, quoteReserve] = await Promise.all([\n      connection.getTokenAccountBalance(basePairVault).catch(() => ({\n        value: {\n          uiAmount: 0,\n          amount: \"0\",\n          decimals: 0,\n          uiAmountString: \"0\",\n        },\n      })),\n      connection.getTokenAccountBalance(quotePairVault).catch(() => ({\n        value: {\n          uiAmount: 0,\n          amount: \"0\",\n          decimals: 0,\n          uiAmountString: \"0\",\n        },\n      })),\n    ]);\n\n    return {\n      poolAddress: pair,\n      baseMint: pairInfo.tokenMintX.toString(),\n      baseReserve: baseReserve.value.amount,\n      quoteMint: pairInfo.tokenMintY.toString(),\n      quoteReserve: quoteReserve.value.amount,\n      tradeFee:\n        (pairInfo.staticFeeParameters.baseFactor * pairInfo.binStep) / 1e6,\n      extra: {\n        hook: pairInfo.hook?.toString(),\n        tokenQuoteDecimal: baseReserve.value.decimals,\n        tokenBaseDecimal: quoteReserve.value.decimals,\n      },\n    };\n  }\n\n  public async getPairVaultInfo(params: {\n    tokenAddress: PublicKey;\n    pair: PublicKey;\n    payer?: PublicKey;\n    transaction?: Transaction;\n  }) {\n    const { tokenAddress, pair, payer, transaction } = params;\n\n    const tokenMint = new PublicKey(tokenAddress);\n    const tokenProgram = await getProgram(tokenMint, this.connection);\n\n    const associatedPairVault = spl.getAssociatedTokenAddressSync(\n      tokenMint,\n      pair,\n      true,\n      tokenProgram\n    );\n\n    if (transaction && payer) {\n      const infoPairVault = await this.connection.getAccountInfo(\n        associatedPairVault\n      );\n\n      if (!infoPairVault) {\n        const pairVaultYInstructions =\n          spl.createAssociatedTokenAccountInstruction(\n            payer,\n            associatedPairVault,\n            pair,\n            tokenMint,\n            tokenProgram\n          );\n        transaction.add(pairVaultYInstructions);\n      }\n    }\n\n    return associatedPairVault;\n  }\n\n  public async getUserVaultInfo(params: GetUserVaultInfoParams) {\n    const { tokenAddress, payer, transaction } = params;\n    const tokenProgram = await getProgram(tokenAddress, this.connection);\n    const associatedUserVault = spl.getAssociatedTokenAddressSync(\n      tokenAddress,\n      payer,\n      true,\n      tokenProgram\n    );\n\n    if (transaction) {\n      const infoUserVault = await this.connection.getAccountInfo(\n        associatedUserVault\n      );\n\n      if (!infoUserVault) {\n        const userVaultYInstructions =\n          spl.createAssociatedTokenAccountInstruction(\n            payer,\n            associatedUserVault,\n            payer,\n            tokenAddress,\n            tokenProgram\n          );\n        transaction.add(userVaultYInstructions);\n      }\n    }\n    return associatedUserVault;\n  }\n\n  public async listenNewPoolAddress(\n    postTxFunction: (address: string) => Promise<void>\n  ) {\n    const LB_PROGRAM_ID = this.getDexProgramId();\n    this.connection.onLogs(\n      LB_PROGRAM_ID,\n      (logInfo) => {\n        if (!logInfo.err) {\n          const logs = logInfo.logs || [];\n          for (const log of logs) {\n            if (log.includes(\"Instruction: InitializePair\")) {\n              const signature = logInfo.signature;\n\n              this.getPairAddressFromLogs(signature).then((address) => {\n                postTxFunction(address);\n              });\n            }\n          }\n        }\n      },\n      \"finalized\"\n    );\n  }\n\n  private async getPairAddressFromLogs(signature: string) {\n    const parsedTransaction = await this.connection.getTransaction(signature, {\n      maxSupportedTransactionVersion: 0,\n    });\n    if (!parsedTransaction) {\n      throw new Error(\"Transaction not found\");\n    }\n\n    const compiledMessage = parsedTransaction.transaction.message;\n    const message = TransactionMessage.decompile(compiledMessage);\n    const instructions = message.instructions;\n    const initializePairStruct = LiquidityBookIDL.instructions.find(\n      (item) => item.name === \"initialize_pair\"\n    )!;\n\n    const initializePairDescrimator = Buffer.from(\n      initializePairStruct!.discriminator\n    );\n\n    let pairAddress = \"\";\n\n    for (const instruction of instructions) {\n      const descimatorInstruction = instruction.data.subarray(0, 8);\n      if (!descimatorInstruction.equals(initializePairDescrimator)) continue;\n      //@ts-ignore\n      const accounts = initializePairStruct.accounts.map((item, index) => {\n        return {\n          name: item.name,\n          address: instruction.keys[index].pubkey.toString(),\n        };\n      });\n      pairAddress =\n        accounts.find(\n          (item: { name: string; address: string }) => item.name === \"pair\"\n        )?.address || \"\";\n    }\n    return pairAddress;\n  }\n}\n"],"names":["MODE","CONFIG","_CONFIG","TESTNET","rpc","DEVNET","MAINNET","BASE_FACTOR","BIN_STEP","ACTIVE_ID","BIN_ARRAY_SIZE","BIN_ARRAY_INDEX","MAX_BASIS_POINTS","FILTER_PERIOD","DECAY_PERIOD","REDUCTION_FACTOR","VARIABLE_FEE_CONTROL","MAX_VOLATILITY_ACCUMULATOR","PROTOCOL_SHARE","START_TIME","REWARDS_DURATION","REWARDS_PER_SECOND","Math","floor","VARIABLE_FEE_PRECISION","SCALE_OFFSET","BASIS_POINT_MAX","ONE","PRECISION","UNIT_PRICE_DEFAULT","CCU_LIMIT","WRAP_SOL_ADDRESS","FIXED_LENGTH","BIN_STEP_CONFIGS","binStep","feeParameters","baseFactor","filterPeriod","decayPeriod","reductionFactor","variableFeeControl","maxVolatilityAccumulator","protocolShare","space","LiquidityBookAbstract","config","connection","Connection","_config$options","options","rpcUrl","mode","commitment","httpHeaders","development","provider","AnchorProvider","window","solana","defaultOptions","lbProgram","Program","LiquidityBookIDL","hooksProgram","MdmaIDL","getProgram","_ref","_asyncToGenerator","_regenerator","m","_callee","address","_account$value","account","owner","program","w","_context","n","getParsedAccountInfo","v","value","toBase58","TOKEN_PROGRAM_ID","TOKEN_2022_PROGRAM_ID","a","_x","_x2","apply","arguments","getBase","quotient","basisPointMaxBigInt","fraction","oneBigInt","result","getPriceFromId","bin_step","bin_id","baseTokenDecimal","quoteTokenDecimal","base","exponent","decimalPow","pow","getIdFromPrice","price","Error","log","binId","round","LBError","_Error","message","_this","call","name","_inheritsLoose","_wrapNativeSuper","BinArrayRange","binArrayPrevious","binArrayCurrent","binArrayNext","index","BinArrayIndexMismatch","bins","addBins","binArray","forEach","bin","_this2","_proto","prototype","getBinMut","getAllBins","Object","values","LBSwapService","volatilityAccumulator","volatilityReference","referenceId","timeLastUpdated","fromLbConfig","_proto2","getBinArray","params","binArrayIndex","pair","PublicKey","findProgramAddressSync","Buffer","from","utils","bytes","utf8","encode","toBuffer","BN","toArrayLike","programId","calculateInOutAmount","_calculateInOutAmount","_this3","amount","swapForY","isExactInput","pairInfo","currentBinArrayIndex","binArrayIndexes","binArrayAddresses","binArrays","binRange","totalSupply","amountAfterTransferFee","amountOut","amountIn","_t","p","fetch","activeId","map","idx","Promise","all","i","error","reduce","acc","cur","add","isZero","BigInt","calculateAmountOut","calculateAmountIn","_calculateAmountIn","_callee2","totalProtocolFee","amountOutLeft","activeBin","fee","_this$swapExactOutput","amountInWithFees","amountOutOfBin","protocolFeeAmount","_context2","updateReferences","updateVolatilityAccumulator","getTotalFee","swapExactOutput","staticFeeParameters","reserveX","reserveY","moveActiveId","_x3","_x4","_x5","_calculateAmountOut","_callee3","amountInLeft","_this$swapExactInput","_t2","_context3","swapExactInput","_x6","_x7","_x8","_x9","protocolShareBigInt","binReserveOut","feeAmount","binReserveOutBigInt","toString","priceScaled","Number","amountInWithoutFee","calcAmountInByPrice","getFeeForAmount","getProtocolFee","maxAmountIn","maxFeeAmount","getFeeAmount","calcAmountOutByPrice","_updateReferences","_callee4","slot","blockTimeStamp","timeDelta","_context4","dynamicFeeParameters","idReference","toNumber","getSlot","getBlockTime","updateVolatilityReference","_x0","_x1","deltaId","abs","getVariableFee","prod","variableFee","getBaseFee","denominator","feeForAmount","protocolFee","pairId","scaleOffset","rounding","divRem","numerator","remainder","mulDiv","x","y","_divRem","mulShr","offset","shlDiv","scale","LiquidityShape","RemoveLiquidityType","getGasPrice","buffNum","_ref2","resolve","timeout","getPriority","currentFee","unitPrice","setTimeout","getRecentPrioritizationFees","filter","prioritizationFee","clearTimeout","length","max","concat","LiquidityBookServices","_LiquidityBookAbstrac","getPairAccount","_getPairAccount","getPositionAccount","_getPositionAccount","position","_getBinArray","payer","transaction","binArrayInfo","initializebinArrayConfigTx","getAccountInfo","methods","initializeBinArray","accountsPartial","user","instruction","getBinArrayInfo","_getBinArrayInfo","resultIndex","_yield$this$lbProgram","binArrayOther","res","_binArrayOther","_res","getBinsReserveInformation","_getBinsReserveInformation","_callee5","positionInfo","firstBinId","_yield$this$getBinArr","firstBinIndex","binIds","reserveXY","_context5","lowerBinId","Array","upperBinId","_","liquidityShare","liquidityShares","totalReserveX","totalReserveY","binPosistion","createPairWithConfig","_createPairWithConfig","_callee6","tokenBase","tokenQuote","ratePrice","tokenX","tokenY","id","tx","binStepConfig","quoteAssetBadge","initializePairConfigTx","binArrayLower","binArrayUpper","initializeBinArrayLowerConfigTx","initializeBinArrayUpperConfigTx","_context6","mintAddress","decimal","Transaction","lbConfig","Uint8Array","initializePair","liquidityBookConfig","tokenMintX","tokenMintY","hooksConfig","createPosition","_createPosition","_callee7","relativeBinIdLeft","relativeBinIdRight","positionMint","positionVault","initializePositionTx","_context7","spl","positionTokenAccount","tokenProgram","addLiquidityIntoPosition","_addLiquidityIntoPosition","_callee8","_Number","_this$bufferGas","liquidityDistribution","amountX","amountY","tokenProgramX","tokenProgramY","associatedPairVaultX","associatedPairVaultY","associatedUserVaultX","associatedUserVaultY","isNativeY","totalAmount","totalLiquid","associatedUserVault","unitSPrice","hook","addLiquidityInstructions","_context8","getPairVaultInfo","tokenAddress","getUserVaultInfo","prev","curr","currAmount","distributionY","distributionX","SystemProgram","transfer","fromPubkey","toPubkey","lamports","undefined","bufferGas","increasePosition","tokenVaultX","tokenVaultY","userVaultX","userVaultY","positionTokenProgram","remainingAccounts","pubkey","isWritable","isSigner","ComputeBudgetProgram","setComputeUnitLimit","units","setComputeUnitPrice","microLamports","removeMultipleLiquidity","_removeMultipleLiquidity","_callee0","_Number2","_this$bufferGas2","maxPositionList","type","txCreateAccount","associatedHookTokenY","infoHookTokenY","hookTokenYInstructions","positionClosed","txs","txCloseAccount","_context0","_callee9","start","end","_yield$_this$getBinAr","hookBinArrayLower","hookBinArrayUpper","hookPosition","removedShares","availableShares","isClosePosition","instructions","_this$lbProgram$metho","_instructions","_t3","_context9","cloneDeep","reserve","item","eq","closePosition","push","decreasePosition","swap","_swap","_callee1","otherAmountOffset","_yield$Promise$all","latestBlockHash","infoUserVaultX","userVaultXInstructions","infoUserVaultY","userVaultYInstructions","swapInstructions","_isNativeY","_associatedUserVault","_context1","getLatestBlockhash","feePayer","blockhash","lastValidBlockHeight","exactInput","exactOutput","getQuote","_getQuote","_callee10","data","slippageFraction","slippageScaled","minAmountOut","_yield$this$getMaxAmo","maxAmountOut","priceImpact","_t4","_context10","slippage","getMaxAmountOutWithFee","tokenBaseDecimal","tokenQuoteDecimal","bigDecimal","subtract","divide","multiply","getValue","_x10","_getMaxAmountOutWithFee","_callee11","pairAddress","decimalBase","decimalQuote","_context11","swapService","feePrice","activePrice","_x11","_x12","_x13","_x14","_x15","getDexName","getDexProgramId","fetchPoolAddresses","_fetchPoolAddresses","_callee12","pairAccount","pairAccountDiscriminator","accounts","poolAdresses","_context12","find","discriminator","getProgramAccounts","filters","memcmp","bs58","addresses","getUserPositions","_getUserPositions","_callee14","_ref3","tokenAccounts","positionMints","positions","_context14","getParsedTokenAccountsByOwner","parsed","info","tokenAmount","uiAmount","mint","_ref4","_callee13","_yield$PublicKey$find","positionPda","accountInfo","_context13","_extends","_x17","Boolean","_x16","quote","_quote","_callee15","metadata","optional","_context15","poolAddress","baseMint","extra","quoteMint","_x18","fetchPoolMetadata","_fetchPoolMetadata","_callee16","_pairInfo$hook","basePairVault","quotePairVault","_yield$Promise$all2","baseReserve","quoteReserve","_context16","getTokenAccountBalance","decimals","uiAmountString","tradeFee","_x19","_getPairVaultInfo","_callee17","tokenMint","associatedPairVault","infoPairVault","pairVaultYInstructions","_context17","_x20","_getUserVaultInfo","_callee18","infoUserVault","_context18","_x21","listenNewPoolAddress","_listenNewPoolAddress","_callee19","postTxFunction","LB_PROGRAM_ID","_context19","onLogs","logInfo","err","logs","_iterator","_createForOfIteratorHelperLoose","_step","done","includes","signature","getPairAddressFromLogs","then","_x22","_getPairAddressFromLogs","_callee20","parsedTransaction","compiledMessage","initializePairStruct","initializePairDescrimator","_loop","_iterator2","_step2","_context21","getTransaction","maxSupportedTransactionVersion","TransactionMessage","decompile","_accounts$find","descimatorInstruction","_context20","subarray","equals","keys","d","_regeneratorValues","_x23","_createClass","key","get"],"mappings":"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"}